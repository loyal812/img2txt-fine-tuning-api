{"messages": [{"role": "system", "content": "You are an expert Q&A system that is trusted around the world.\nAlways answer the query using the provided context information, and not prior knowledge.\nSome rules to follow:\n1. Never directly reference the given context in your answer.\n2. Avoid statements like 'Based on the context, ...' or 'The context information ...' or anything along those lines."}, {"role": "user", "content": "Context information is below.\n---------------------\npage_label: 4\nfile_path: test\\regression\\regression_test006\\W120623A.pdf\n\nApplication programming interface\n4\nthe APIs of a given language cannot be used in other languages, unless the function calls are wrapped with specific\nadaptation libraries.\nObject API and protocols\nAn object API can prescribe a specific object exchange format, an object exchange protocol can define a way to\ntransfer the same kind of information in a message sent to a remote system.\nWhen a message is exchanged via a protocol between two different platforms using objects on both sides, the object\nin a programming language can be transformed (marshalled and unmarshalled) in an object in a remote and different\nlanguage: so, e.g., a program written in Java invokes a service via SOAP or IIOP written in C# both programs use\nAPIs for remote invocation (each locally to the machine where they are working) to (remotely) exchange\ninformation that they both convert from/to an object in local memory.\nInstead when a similar object is exchanged via an API local to a single machine the object is effectively exchanged\n(or a reference to it) in memory: e.g. via the memory allocated by a single process, or among multiple processes\nusing shared memory or other sharing techologies like tuple spaces.\nAPI sharing and reuse via virtual machine\nSome languages like those running in a virtual machine (e.g. .NET CLI compliant languages in the Common\nLanguage Runtime and JVM compliant languages in the Java Virtual Machine) can share APIs.\nIn this case the virtual machine enables the language interoperation thanks to the common denominator of the virtual\nmachine that abstracts from the specific language using an intermediate bytecode and its language binding.\nHence this approach maximizes the code reuse potential for all the existing libraries and related APIs.\nWeb APIs\nWhen used in the context of web development, an API is typically defined as a set of Hypertext Transfer Protocol\n(HTTP) request messages, along with a definition of the structure of response messages, which is usually in an\nExtensible Markup Language (XML) or JavaScript Object Notation (JSON) format. While \"Web API\" is virtually a\nsynonym for web service, the recent trend (so-called Web 2.0) has been moving away from Simple Object Access\nProtocol (SOAP) based services towards more direct Representational State Transfer (REST) style\ncommunications.[5] Web APIs allow the combination of multiple services into new applications known as\nmashups.[6]\nWeb use to share content\nThe practice of publishing APIs has allowed web communities to create an open architecture for sharing content and\ndata between communities and applications. In this way, content that is created in one place can be dynamically\nposted and updated in multiple locations on the web.\n1.Photos can be shared from sites like Flickr and Photobucket to social network sites like Facebook and MySpace.\n2.Content can be embedded, e.g. embedding a presentation from SlideShare on a LinkedIn profile.\n3.Content can be dynamically posted. Sharing live comments made on Twitter with a Facebook account, for\nexample, is enabled by their APIs.\n4.4.Video content can be embedded on sites which are served by another host.\n5.User information can be shared from web communities to outside applications, delivering new functionality to\nthe web community that shares its user data via an open API. One of the best examples of this is the Facebook\nApplication platform. Another is the Open Social platform.[7]\n\npage_label: 5\nfile_path: test\\regression\\regression_test006\\W120623A.pdf\n\nApplication programming interface\n5\nImplementations\nThe POSIX standard defines an API that allows a wide range of common computing functions to be written in a way\nsuch that they may operate on many different systems (Mac OS X, and various Berkeley Software Distributions\n(BSDs) implement this interface); however, making use of this requires re-compiling for each platform. A\ncompatible API, on the other hand, allows compiled object code to function without any changes to the system\nimplementing that API. This is beneficial to both software providers (where they may distribute existing software on\nnew systems without producing and distributing upgrades) and users (where they may install older software on their\nnew systems without purchasing upgrades), although this generally requires that various software libraries\nimplement the necessary APIs as well.\nMicrosoft has shown a strong commitment to a backward compatible API, particularly within their Windows API\n(Win32) library, such that older applications may run on newer versions of Windows using an executable-specific\nsetting called \"Compatibility Mode\".[8]\nApple Inc. has shown less concern, breaking compatibility or implementing an API in a slower \"emulation mode\";\nthis allows greater freedom in development, at the cost of making older software obsolete.\nAmong Unix-like operating systems, there are many related but incompatible operating systems running on a\ncommon hardware platform (particularly Intel 80386-compatible systems). There have been several attempts to\nstandardize the API such that software vendors may distribute one binary application for all these systems; however,\nto date, none of these have met with much success. The Linux Standard Base is attempting to do this for the Linux\nplatform, while many of the BSD Unixes, such as FreeBSD, NetBSD, and OpenBSD, implement various levels of\nAPI compatibility for both backward compatibility (allowing programs written for older versions to run on newer\ndistributions of the system) and cross-platform compatibility (allowing execution of foreign code without\nrecompiling).\nRelease policies\nThe two options for releasing API are:\n1.Protecting information on APIs from the general public. For example, Sony used to make its official PlayStation\n2 API available only to licensed PlayStation developers. This enabled Sony to control who wrote PlayStation 2\ngames. This gives companies quality control privileges and can provide them with potential licensing revenue\nstreams.\n2.Making APIs freely available. For example, Microsoft makes the Microsoft Windows API public, and Apple\nreleases its APIs Carbon and Cocoa, so that software can be written for their platforms.\nA mix of the two behaviors can be used as well.\nAPIs and Copyrights\nIn 2010 Oracle sued Google for having distributed a new implementation of Java embedded in the Android operating\nsystem.[9] The litigation concerns also the fact that Google did not acquire any permission to reproduce the Java API.\nInstead a similar permission was given to the OpenJDK project. However, Hon. William Alsup ruled on May 31,\n2012, that APIs cannot be copyrighted.\nAPI examples\n\u2022ASPI for SCSI device interfacing\n\u2022Carbon and Cocoa for the Macintosh\n\u2022DirectX for Microsoft Windows\n\u2022\u2022EHLLAPI\n---------------------\nGiven the context information and not prior knowledge, answer the query.\nQuery: What is the purpose of adaptation libraries when using APIs in different languages?\nAnswer: "}, {"role": "assistant", "content": "Adaptation libraries are used to wrap the function calls of APIs when they are being used in different languages. This allows the APIs of a given language to be utilized in other languages, which would not be possible without these specific adaptation libraries."}]}
{"messages": [{"role": "system", "content": "You are an expert Q&A system that is trusted around the world.\nAlways answer the query using the provided context information, and not prior knowledge.\nSome rules to follow:\n1. Never directly reference the given context in your answer.\n2. Avoid statements like 'Based on the context, ...' or 'The context information ...' or anything along those lines."}, {"role": "user", "content": "Context information is below.\n---------------------\npage_label: 4\nfile_path: test\\regression\\regression_test006\\W120623A.pdf\n\nApplication programming interface\n4\nthe APIs of a given language cannot be used in other languages, unless the function calls are wrapped with specific\nadaptation libraries.\nObject API and protocols\nAn object API can prescribe a specific object exchange format, an object exchange protocol can define a way to\ntransfer the same kind of information in a message sent to a remote system.\nWhen a message is exchanged via a protocol between two different platforms using objects on both sides, the object\nin a programming language can be transformed (marshalled and unmarshalled) in an object in a remote and different\nlanguage: so, e.g., a program written in Java invokes a service via SOAP or IIOP written in C# both programs use\nAPIs for remote invocation (each locally to the machine where they are working) to (remotely) exchange\ninformation that they both convert from/to an object in local memory.\nInstead when a similar object is exchanged via an API local to a single machine the object is effectively exchanged\n(or a reference to it) in memory: e.g. via the memory allocated by a single process, or among multiple processes\nusing shared memory or other sharing techologies like tuple spaces.\nAPI sharing and reuse via virtual machine\nSome languages like those running in a virtual machine (e.g. .NET CLI compliant languages in the Common\nLanguage Runtime and JVM compliant languages in the Java Virtual Machine) can share APIs.\nIn this case the virtual machine enables the language interoperation thanks to the common denominator of the virtual\nmachine that abstracts from the specific language using an intermediate bytecode and its language binding.\nHence this approach maximizes the code reuse potential for all the existing libraries and related APIs.\nWeb APIs\nWhen used in the context of web development, an API is typically defined as a set of Hypertext Transfer Protocol\n(HTTP) request messages, along with a definition of the structure of response messages, which is usually in an\nExtensible Markup Language (XML) or JavaScript Object Notation (JSON) format. While \"Web API\" is virtually a\nsynonym for web service, the recent trend (so-called Web 2.0) has been moving away from Simple Object Access\nProtocol (SOAP) based services towards more direct Representational State Transfer (REST) style\ncommunications.[5] Web APIs allow the combination of multiple services into new applications known as\nmashups.[6]\nWeb use to share content\nThe practice of publishing APIs has allowed web communities to create an open architecture for sharing content and\ndata between communities and applications. In this way, content that is created in one place can be dynamically\nposted and updated in multiple locations on the web.\n1.Photos can be shared from sites like Flickr and Photobucket to social network sites like Facebook and MySpace.\n2.Content can be embedded, e.g. embedding a presentation from SlideShare on a LinkedIn profile.\n3.Content can be dynamically posted. Sharing live comments made on Twitter with a Facebook account, for\nexample, is enabled by their APIs.\n4.4.Video content can be embedded on sites which are served by another host.\n5.User information can be shared from web communities to outside applications, delivering new functionality to\nthe web community that shares its user data via an open API. One of the best examples of this is the Facebook\nApplication platform. Another is the Open Social platform.[7]\n\npage_label: 3\nfile_path: test\\regression\\regression_test006\\W120623A.pdf\n\nApplication programming interface\n3\nIn this case the API can be interpreted as the two methods pop() and push(), or, more generally, as the idea that\none can use an item of type Stack that implements the behavior of a stack: a pile exposing its top to add/remove\nelements. The second interpretation appears more appropriate in the spirit of object orientation.\nThis concept can be carried to the point where a class interface in an API has no methods at all, but only behaviors\nassociated with it. For instance, the Java language and Lisp (programming language) API include the interface\nSerializable, which is a marker interface that requires that each class that implements it should behave in a\nserialized fashion. This does not require to have any public method, but rather requires that any class that\nimplements it to have a representation that can be saved (serialized) at any time (this is typically true for any class\ncontaining simple data and no link to external resources, like an open connection to a file, a remote system, or an\nexternal device).\nSimilarly the behavior of an object in a concurrent (multi-threaded) environment is not necessarily determined by\nspecific methods, belonging to the interface implemented, but still belongs to the API for that Class of objects, and\nshould be described in the documentation.[2]\nIn this sense, in object-oriented languages, the API defines a set of object behaviors, possibly mediated by a set of\nclass methods.\nIn such languages, the API is still distributed as a library. For example, the Java language libraries include a set of\nAPIs that are provided in the form of the JDK used by the developers to build new Java programs. The JDK includes\nthe documentation of the API in JavaDoc notation.\nThe quality of the documentation associated with an API is often a factor determining its success in terms of ease of\nuse.\nAPI libraries and frameworks\nAn API is usually related to a software library: the API describes and prescribes the expected behavior while the\nlibrary is an actual implementation of this set of rules. A single API can have multiple implementations (or none,\nbeing abstract) in the form of different libraries that share the same programming interface.\nAn API can also be related to a software framework: a framework can be based on several libraries implementing\nseveral APIs, but unlike the normal use of an API, the access to the behavior built into the framework is mediated by\nextending its content with new classes plugged into the framework itself. Moreover the overall program flow of\ncontrol can be out of the control of the caller, and in the hands of the framework via inversion of control or a similar\nmechanisms.[3]\nAPI and protocols\nAn API can also be an implementation of a protocol.\nIn general the difference between an API and a protocol is that the protocol defines a standard way to exchange\nrequests and responses based on a common transport and agreeing on a data/message exchange format, while an API\n(not implementing a protocol) is usually implemented as a library to be used directly: hence there can be no\ntransport involved (no information physically transferred from/to some remote machine), but rather only simple\ninformation exchange via function calls (local to the machine where the elaboration takes place) and data is\nexchanged in formats expressed in a specific language.[4]\nWhen an API implements a protocol it can be based on proxy methods for remote invocations that underneath rely\non the communication protocol. The role of the API can be exactly to hide the detail of the transport protocol. E.g.:\nRMI is an API that implements the JRMP protocol or the IIOP as RMI-IIOP.\nProtocols are usually shared between different technologies (system based on given computer programming \nlanguages in a given operating system) and usually allow the different technologies to exchange information, acting \nas an abstraction/mediation level between the two worlds. While APIs can be specific to a given technology: hence\n---------------------\nGiven the context information and not prior knowledge, answer the query.\nQuery: How can object APIs and protocols be used to transfer information between different platforms?\nAnswer: "}, {"role": "assistant", "content": "Object APIs and protocols can be used to transfer information between different platforms through a process called marshalling and unmarshalling. When a message is exchanged via a protocol between two different platforms using objects on both sides, the object in a programming language can be transformed into an object in a remote and different language. For instance, a program written in Java might invoke a service via SOAP or IIOP written in C#. Both programs use APIs for remote invocation to exchange information, which they both convert from or to an object in local memory. This process allows for the transfer of information between different platforms."}]}
{"messages": [{"role": "system", "content": "You are an expert Q&A system that is trusted around the world.\nAlways answer the query using the provided context information, and not prior knowledge.\nSome rules to follow:\n1. Never directly reference the given context in your answer.\n2. Avoid statements like 'Based on the context, ...' or 'The context information ...' or anything along those lines."}, {"role": "user", "content": "Context information is below.\n---------------------\npage_label: 4\nfile_path: test\\regression\\regression_test006\\W120623A.pdf\n\nApplication programming interface\n4\nthe APIs of a given language cannot be used in other languages, unless the function calls are wrapped with specific\nadaptation libraries.\nObject API and protocols\nAn object API can prescribe a specific object exchange format, an object exchange protocol can define a way to\ntransfer the same kind of information in a message sent to a remote system.\nWhen a message is exchanged via a protocol between two different platforms using objects on both sides, the object\nin a programming language can be transformed (marshalled and unmarshalled) in an object in a remote and different\nlanguage: so, e.g., a program written in Java invokes a service via SOAP or IIOP written in C# both programs use\nAPIs for remote invocation (each locally to the machine where they are working) to (remotely) exchange\ninformation that they both convert from/to an object in local memory.\nInstead when a similar object is exchanged via an API local to a single machine the object is effectively exchanged\n(or a reference to it) in memory: e.g. via the memory allocated by a single process, or among multiple processes\nusing shared memory or other sharing techologies like tuple spaces.\nAPI sharing and reuse via virtual machine\nSome languages like those running in a virtual machine (e.g. .NET CLI compliant languages in the Common\nLanguage Runtime and JVM compliant languages in the Java Virtual Machine) can share APIs.\nIn this case the virtual machine enables the language interoperation thanks to the common denominator of the virtual\nmachine that abstracts from the specific language using an intermediate bytecode and its language binding.\nHence this approach maximizes the code reuse potential for all the existing libraries and related APIs.\nWeb APIs\nWhen used in the context of web development, an API is typically defined as a set of Hypertext Transfer Protocol\n(HTTP) request messages, along with a definition of the structure of response messages, which is usually in an\nExtensible Markup Language (XML) or JavaScript Object Notation (JSON) format. While \"Web API\" is virtually a\nsynonym for web service, the recent trend (so-called Web 2.0) has been moving away from Simple Object Access\nProtocol (SOAP) based services towards more direct Representational State Transfer (REST) style\ncommunications.[5] Web APIs allow the combination of multiple services into new applications known as\nmashups.[6]\nWeb use to share content\nThe practice of publishing APIs has allowed web communities to create an open architecture for sharing content and\ndata between communities and applications. In this way, content that is created in one place can be dynamically\nposted and updated in multiple locations on the web.\n1.Photos can be shared from sites like Flickr and Photobucket to social network sites like Facebook and MySpace.\n2.Content can be embedded, e.g. embedding a presentation from SlideShare on a LinkedIn profile.\n3.Content can be dynamically posted. Sharing live comments made on Twitter with a Facebook account, for\nexample, is enabled by their APIs.\n4.4.Video content can be embedded on sites which are served by another host.\n5.User information can be shared from web communities to outside applications, delivering new functionality to\nthe web community that shares its user data via an open API. One of the best examples of this is the Facebook\nApplication platform. Another is the Open Social platform.[7]\n\npage_label: 3\nfile_path: test\\regression\\regression_test006\\W120623A.pdf\n\nApplication programming interface\n3\nIn this case the API can be interpreted as the two methods pop() and push(), or, more generally, as the idea that\none can use an item of type Stack that implements the behavior of a stack: a pile exposing its top to add/remove\nelements. The second interpretation appears more appropriate in the spirit of object orientation.\nThis concept can be carried to the point where a class interface in an API has no methods at all, but only behaviors\nassociated with it. For instance, the Java language and Lisp (programming language) API include the interface\nSerializable, which is a marker interface that requires that each class that implements it should behave in a\nserialized fashion. This does not require to have any public method, but rather requires that any class that\nimplements it to have a representation that can be saved (serialized) at any time (this is typically true for any class\ncontaining simple data and no link to external resources, like an open connection to a file, a remote system, or an\nexternal device).\nSimilarly the behavior of an object in a concurrent (multi-threaded) environment is not necessarily determined by\nspecific methods, belonging to the interface implemented, but still belongs to the API for that Class of objects, and\nshould be described in the documentation.[2]\nIn this sense, in object-oriented languages, the API defines a set of object behaviors, possibly mediated by a set of\nclass methods.\nIn such languages, the API is still distributed as a library. For example, the Java language libraries include a set of\nAPIs that are provided in the form of the JDK used by the developers to build new Java programs. The JDK includes\nthe documentation of the API in JavaDoc notation.\nThe quality of the documentation associated with an API is often a factor determining its success in terms of ease of\nuse.\nAPI libraries and frameworks\nAn API is usually related to a software library: the API describes and prescribes the expected behavior while the\nlibrary is an actual implementation of this set of rules. A single API can have multiple implementations (or none,\nbeing abstract) in the form of different libraries that share the same programming interface.\nAn API can also be related to a software framework: a framework can be based on several libraries implementing\nseveral APIs, but unlike the normal use of an API, the access to the behavior built into the framework is mediated by\nextending its content with new classes plugged into the framework itself. Moreover the overall program flow of\ncontrol can be out of the control of the caller, and in the hands of the framework via inversion of control or a similar\nmechanisms.[3]\nAPI and protocols\nAn API can also be an implementation of a protocol.\nIn general the difference between an API and a protocol is that the protocol defines a standard way to exchange\nrequests and responses based on a common transport and agreeing on a data/message exchange format, while an API\n(not implementing a protocol) is usually implemented as a library to be used directly: hence there can be no\ntransport involved (no information physically transferred from/to some remote machine), but rather only simple\ninformation exchange via function calls (local to the machine where the elaboration takes place) and data is\nexchanged in formats expressed in a specific language.[4]\nWhen an API implements a protocol it can be based on proxy methods for remote invocations that underneath rely\non the communication protocol. The role of the API can be exactly to hide the detail of the transport protocol. E.g.:\nRMI is an API that implements the JRMP protocol or the IIOP as RMI-IIOP.\nProtocols are usually shared between different technologies (system based on given computer programming \nlanguages in a given operating system) and usually allow the different technologies to exchange information, acting \nas an abstraction/mediation level between the two worlds. While APIs can be specific to a given technology: hence\n---------------------\nGiven the context information and not prior knowledge, answer the query.\nQuery: Explain the process of marshalling and unmarshalling objects in remote language invocations.\nAnswer: "}, {"role": "assistant", "content": "In the process of remote language invocations, marshalling and unmarshalling of objects are crucial steps. When a message is exchanged via a protocol between two different platforms using objects on both sides, the object in a programming language can be transformed. This transformation process is known as marshalling and unmarshalling. For instance, a program written in Java invokes a service via SOAP or IIOP written in C# - both programs use APIs for remote invocation to exchange information. This information is converted from/to an object in local memory. This process allows an object in one programming language to be transformed into an object in a remote and different language."}]}
{"messages": [{"role": "system", "content": "You are an expert Q&A system that is trusted around the world.\nAlways answer the query using the provided context information, and not prior knowledge.\nSome rules to follow:\n1. Never directly reference the given context in your answer.\n2. Avoid statements like 'Based on the context, ...' or 'The context information ...' or anything along those lines."}, {"role": "user", "content": "Context information is below.\n---------------------\npage_label: 4\nfile_path: test\\regression\\regression_test006\\W120623A.pdf\n\nApplication programming interface\n4\nthe APIs of a given language cannot be used in other languages, unless the function calls are wrapped with specific\nadaptation libraries.\nObject API and protocols\nAn object API can prescribe a specific object exchange format, an object exchange protocol can define a way to\ntransfer the same kind of information in a message sent to a remote system.\nWhen a message is exchanged via a protocol between two different platforms using objects on both sides, the object\nin a programming language can be transformed (marshalled and unmarshalled) in an object in a remote and different\nlanguage: so, e.g., a program written in Java invokes a service via SOAP or IIOP written in C# both programs use\nAPIs for remote invocation (each locally to the machine where they are working) to (remotely) exchange\ninformation that they both convert from/to an object in local memory.\nInstead when a similar object is exchanged via an API local to a single machine the object is effectively exchanged\n(or a reference to it) in memory: e.g. via the memory allocated by a single process, or among multiple processes\nusing shared memory or other sharing techologies like tuple spaces.\nAPI sharing and reuse via virtual machine\nSome languages like those running in a virtual machine (e.g. .NET CLI compliant languages in the Common\nLanguage Runtime and JVM compliant languages in the Java Virtual Machine) can share APIs.\nIn this case the virtual machine enables the language interoperation thanks to the common denominator of the virtual\nmachine that abstracts from the specific language using an intermediate bytecode and its language binding.\nHence this approach maximizes the code reuse potential for all the existing libraries and related APIs.\nWeb APIs\nWhen used in the context of web development, an API is typically defined as a set of Hypertext Transfer Protocol\n(HTTP) request messages, along with a definition of the structure of response messages, which is usually in an\nExtensible Markup Language (XML) or JavaScript Object Notation (JSON) format. While \"Web API\" is virtually a\nsynonym for web service, the recent trend (so-called Web 2.0) has been moving away from Simple Object Access\nProtocol (SOAP) based services towards more direct Representational State Transfer (REST) style\ncommunications.[5] Web APIs allow the combination of multiple services into new applications known as\nmashups.[6]\nWeb use to share content\nThe practice of publishing APIs has allowed web communities to create an open architecture for sharing content and\ndata between communities and applications. In this way, content that is created in one place can be dynamically\nposted and updated in multiple locations on the web.\n1.Photos can be shared from sites like Flickr and Photobucket to social network sites like Facebook and MySpace.\n2.Content can be embedded, e.g. embedding a presentation from SlideShare on a LinkedIn profile.\n3.Content can be dynamically posted. Sharing live comments made on Twitter with a Facebook account, for\nexample, is enabled by their APIs.\n4.4.Video content can be embedded on sites which are served by another host.\n5.User information can be shared from web communities to outside applications, delivering new functionality to\nthe web community that shares its user data via an open API. One of the best examples of this is the Facebook\nApplication platform. Another is the Open Social platform.[7]\n\npage_label: 5\nfile_path: test\\regression\\regression_test006\\W120623A.pdf\n\nApplication programming interface\n5\nImplementations\nThe POSIX standard defines an API that allows a wide range of common computing functions to be written in a way\nsuch that they may operate on many different systems (Mac OS X, and various Berkeley Software Distributions\n(BSDs) implement this interface); however, making use of this requires re-compiling for each platform. A\ncompatible API, on the other hand, allows compiled object code to function without any changes to the system\nimplementing that API. This is beneficial to both software providers (where they may distribute existing software on\nnew systems without producing and distributing upgrades) and users (where they may install older software on their\nnew systems without purchasing upgrades), although this generally requires that various software libraries\nimplement the necessary APIs as well.\nMicrosoft has shown a strong commitment to a backward compatible API, particularly within their Windows API\n(Win32) library, such that older applications may run on newer versions of Windows using an executable-specific\nsetting called \"Compatibility Mode\".[8]\nApple Inc. has shown less concern, breaking compatibility or implementing an API in a slower \"emulation mode\";\nthis allows greater freedom in development, at the cost of making older software obsolete.\nAmong Unix-like operating systems, there are many related but incompatible operating systems running on a\ncommon hardware platform (particularly Intel 80386-compatible systems). There have been several attempts to\nstandardize the API such that software vendors may distribute one binary application for all these systems; however,\nto date, none of these have met with much success. The Linux Standard Base is attempting to do this for the Linux\nplatform, while many of the BSD Unixes, such as FreeBSD, NetBSD, and OpenBSD, implement various levels of\nAPI compatibility for both backward compatibility (allowing programs written for older versions to run on newer\ndistributions of the system) and cross-platform compatibility (allowing execution of foreign code without\nrecompiling).\nRelease policies\nThe two options for releasing API are:\n1.Protecting information on APIs from the general public. For example, Sony used to make its official PlayStation\n2 API available only to licensed PlayStation developers. This enabled Sony to control who wrote PlayStation 2\ngames. This gives companies quality control privileges and can provide them with potential licensing revenue\nstreams.\n2.Making APIs freely available. For example, Microsoft makes the Microsoft Windows API public, and Apple\nreleases its APIs Carbon and Cocoa, so that software can be written for their platforms.\nA mix of the two behaviors can be used as well.\nAPIs and Copyrights\nIn 2010 Oracle sued Google for having distributed a new implementation of Java embedded in the Android operating\nsystem.[9] The litigation concerns also the fact that Google did not acquire any permission to reproduce the Java API.\nInstead a similar permission was given to the OpenJDK project. However, Hon. William Alsup ruled on May 31,\n2012, that APIs cannot be copyrighted.\nAPI examples\n\u2022ASPI for SCSI device interfacing\n\u2022Carbon and Cocoa for the Macintosh\n\u2022DirectX for Microsoft Windows\n\u2022\u2022EHLLAPI\n---------------------\nGiven the context information and not prior knowledge, answer the query.\nQuery: How does API sharing and reuse work in virtual machine environments?\nAnswer: "}, {"role": "assistant", "content": "In virtual machine environments, languages that run within the virtual machine can share APIs. This is enabled by the common denominator of the virtual machine, which abstracts from the specific language using an intermediate bytecode and its language binding. This approach maximizes the code reuse potential for all the existing libraries and related APIs. Examples of this include .NET CLI compliant languages in the Common Language Runtime and JVM compliant languages in the Java Virtual Machine."}]}
{"messages": [{"role": "system", "content": "You are an expert Q&A system that is trusted around the world.\nAlways answer the query using the provided context information, and not prior knowledge.\nSome rules to follow:\n1. Never directly reference the given context in your answer.\n2. Avoid statements like 'Based on the context, ...' or 'The context information ...' or anything along those lines."}, {"role": "user", "content": "Context information is below.\n---------------------\npage_label: 4\nfile_path: test\\regression\\regression_test006\\W120623A.pdf\n\nApplication programming interface\n4\nthe APIs of a given language cannot be used in other languages, unless the function calls are wrapped with specific\nadaptation libraries.\nObject API and protocols\nAn object API can prescribe a specific object exchange format, an object exchange protocol can define a way to\ntransfer the same kind of information in a message sent to a remote system.\nWhen a message is exchanged via a protocol between two different platforms using objects on both sides, the object\nin a programming language can be transformed (marshalled and unmarshalled) in an object in a remote and different\nlanguage: so, e.g., a program written in Java invokes a service via SOAP or IIOP written in C# both programs use\nAPIs for remote invocation (each locally to the machine where they are working) to (remotely) exchange\ninformation that they both convert from/to an object in local memory.\nInstead when a similar object is exchanged via an API local to a single machine the object is effectively exchanged\n(or a reference to it) in memory: e.g. via the memory allocated by a single process, or among multiple processes\nusing shared memory or other sharing techologies like tuple spaces.\nAPI sharing and reuse via virtual machine\nSome languages like those running in a virtual machine (e.g. .NET CLI compliant languages in the Common\nLanguage Runtime and JVM compliant languages in the Java Virtual Machine) can share APIs.\nIn this case the virtual machine enables the language interoperation thanks to the common denominator of the virtual\nmachine that abstracts from the specific language using an intermediate bytecode and its language binding.\nHence this approach maximizes the code reuse potential for all the existing libraries and related APIs.\nWeb APIs\nWhen used in the context of web development, an API is typically defined as a set of Hypertext Transfer Protocol\n(HTTP) request messages, along with a definition of the structure of response messages, which is usually in an\nExtensible Markup Language (XML) or JavaScript Object Notation (JSON) format. While \"Web API\" is virtually a\nsynonym for web service, the recent trend (so-called Web 2.0) has been moving away from Simple Object Access\nProtocol (SOAP) based services towards more direct Representational State Transfer (REST) style\ncommunications.[5] Web APIs allow the combination of multiple services into new applications known as\nmashups.[6]\nWeb use to share content\nThe practice of publishing APIs has allowed web communities to create an open architecture for sharing content and\ndata between communities and applications. In this way, content that is created in one place can be dynamically\nposted and updated in multiple locations on the web.\n1.Photos can be shared from sites like Flickr and Photobucket to social network sites like Facebook and MySpace.\n2.Content can be embedded, e.g. embedding a presentation from SlideShare on a LinkedIn profile.\n3.Content can be dynamically posted. Sharing live comments made on Twitter with a Facebook account, for\nexample, is enabled by their APIs.\n4.4.Video content can be embedded on sites which are served by another host.\n5.User information can be shared from web communities to outside applications, delivering new functionality to\nthe web community that shares its user data via an open API. One of the best examples of this is the Facebook\nApplication platform. Another is the Open Social platform.[7]\n\npage_label: 7\nfile_path: test\\regression\\regression_test006\\W120623A.pdf\n\nApplication programming interface\n7\nExternal links\n\u2022What is an API? Your Guide to the Internet (R)evolution (http:/ / www. 3scale. net/ wp-content/ uploads/ 2012/\n06/ What-is-an-API-1. 0. pdf)\n\u2022How to design a good API and why it matters (http:/ / lcsd05. cs. tamu. edu/ slides/ keynote. pdf)\n\u2022How to Write an API (http:/ / www. lior. ca/ publications/ api_design. pdf)\n\u2022LMAX Application Programming Interface (API) technology (http:/ / www. lmax. com/ trading-tech/ api-trading)\n---------------------\nGiven the context information and not prior knowledge, answer the query.\nQuery: Define Web APIs and their role in web development.\nAnswer: "}, {"role": "assistant", "content": "Web APIs, in the context of web development, are typically defined as a set of Hypertext Transfer Protocol (HTTP) request messages, along with a definition of the structure of response messages, which is usually in an Extensible Markup Language (XML) or JavaScript Object Notation (JSON) format. The term \"Web API\" is virtually synonymous with web service. Recently, there has been a trend towards more direct Representational State Transfer (REST) style communications, moving away from Simple Object Access Protocol (SOAP) based services. Web APIs allow the combination of multiple services into new applications, known as mashups. They also enable the sharing of content and data between communities and applications, allowing content created in one place to be dynamically posted and updated in multiple locations on the web."}]}
{"messages": [{"role": "system", "content": "You are an expert Q&A system that is trusted around the world.\nAlways answer the query using the provided context information, and not prior knowledge.\nSome rules to follow:\n1. Never directly reference the given context in your answer.\n2. Avoid statements like 'Based on the context, ...' or 'The context information ...' or anything along those lines."}, {"role": "user", "content": "Context information is below.\n---------------------\npage_label: 4\nfile_path: test\\regression\\regression_test006\\W120623A.pdf\n\nApplication programming interface\n4\nthe APIs of a given language cannot be used in other languages, unless the function calls are wrapped with specific\nadaptation libraries.\nObject API and protocols\nAn object API can prescribe a specific object exchange format, an object exchange protocol can define a way to\ntransfer the same kind of information in a message sent to a remote system.\nWhen a message is exchanged via a protocol between two different platforms using objects on both sides, the object\nin a programming language can be transformed (marshalled and unmarshalled) in an object in a remote and different\nlanguage: so, e.g., a program written in Java invokes a service via SOAP or IIOP written in C# both programs use\nAPIs for remote invocation (each locally to the machine where they are working) to (remotely) exchange\ninformation that they both convert from/to an object in local memory.\nInstead when a similar object is exchanged via an API local to a single machine the object is effectively exchanged\n(or a reference to it) in memory: e.g. via the memory allocated by a single process, or among multiple processes\nusing shared memory or other sharing techologies like tuple spaces.\nAPI sharing and reuse via virtual machine\nSome languages like those running in a virtual machine (e.g. .NET CLI compliant languages in the Common\nLanguage Runtime and JVM compliant languages in the Java Virtual Machine) can share APIs.\nIn this case the virtual machine enables the language interoperation thanks to the common denominator of the virtual\nmachine that abstracts from the specific language using an intermediate bytecode and its language binding.\nHence this approach maximizes the code reuse potential for all the existing libraries and related APIs.\nWeb APIs\nWhen used in the context of web development, an API is typically defined as a set of Hypertext Transfer Protocol\n(HTTP) request messages, along with a definition of the structure of response messages, which is usually in an\nExtensible Markup Language (XML) or JavaScript Object Notation (JSON) format. While \"Web API\" is virtually a\nsynonym for web service, the recent trend (so-called Web 2.0) has been moving away from Simple Object Access\nProtocol (SOAP) based services towards more direct Representational State Transfer (REST) style\ncommunications.[5] Web APIs allow the combination of multiple services into new applications known as\nmashups.[6]\nWeb use to share content\nThe practice of publishing APIs has allowed web communities to create an open architecture for sharing content and\ndata between communities and applications. In this way, content that is created in one place can be dynamically\nposted and updated in multiple locations on the web.\n1.Photos can be shared from sites like Flickr and Photobucket to social network sites like Facebook and MySpace.\n2.Content can be embedded, e.g. embedding a presentation from SlideShare on a LinkedIn profile.\n3.Content can be dynamically posted. Sharing live comments made on Twitter with a Facebook account, for\nexample, is enabled by their APIs.\n4.4.Video content can be embedded on sites which are served by another host.\n5.User information can be shared from web communities to outside applications, delivering new functionality to\nthe web community that shares its user data via an open API. One of the best examples of this is the Facebook\nApplication platform. Another is the Open Social platform.[7]\n\npage_label: 3\nfile_path: test\\regression\\regression_test006\\W120623A.pdf\n\nApplication programming interface\n3\nIn this case the API can be interpreted as the two methods pop() and push(), or, more generally, as the idea that\none can use an item of type Stack that implements the behavior of a stack: a pile exposing its top to add/remove\nelements. The second interpretation appears more appropriate in the spirit of object orientation.\nThis concept can be carried to the point where a class interface in an API has no methods at all, but only behaviors\nassociated with it. For instance, the Java language and Lisp (programming language) API include the interface\nSerializable, which is a marker interface that requires that each class that implements it should behave in a\nserialized fashion. This does not require to have any public method, but rather requires that any class that\nimplements it to have a representation that can be saved (serialized) at any time (this is typically true for any class\ncontaining simple data and no link to external resources, like an open connection to a file, a remote system, or an\nexternal device).\nSimilarly the behavior of an object in a concurrent (multi-threaded) environment is not necessarily determined by\nspecific methods, belonging to the interface implemented, but still belongs to the API for that Class of objects, and\nshould be described in the documentation.[2]\nIn this sense, in object-oriented languages, the API defines a set of object behaviors, possibly mediated by a set of\nclass methods.\nIn such languages, the API is still distributed as a library. For example, the Java language libraries include a set of\nAPIs that are provided in the form of the JDK used by the developers to build new Java programs. The JDK includes\nthe documentation of the API in JavaDoc notation.\nThe quality of the documentation associated with an API is often a factor determining its success in terms of ease of\nuse.\nAPI libraries and frameworks\nAn API is usually related to a software library: the API describes and prescribes the expected behavior while the\nlibrary is an actual implementation of this set of rules. A single API can have multiple implementations (or none,\nbeing abstract) in the form of different libraries that share the same programming interface.\nAn API can also be related to a software framework: a framework can be based on several libraries implementing\nseveral APIs, but unlike the normal use of an API, the access to the behavior built into the framework is mediated by\nextending its content with new classes plugged into the framework itself. Moreover the overall program flow of\ncontrol can be out of the control of the caller, and in the hands of the framework via inversion of control or a similar\nmechanisms.[3]\nAPI and protocols\nAn API can also be an implementation of a protocol.\nIn general the difference between an API and a protocol is that the protocol defines a standard way to exchange\nrequests and responses based on a common transport and agreeing on a data/message exchange format, while an API\n(not implementing a protocol) is usually implemented as a library to be used directly: hence there can be no\ntransport involved (no information physically transferred from/to some remote machine), but rather only simple\ninformation exchange via function calls (local to the machine where the elaboration takes place) and data is\nexchanged in formats expressed in a specific language.[4]\nWhen an API implements a protocol it can be based on proxy methods for remote invocations that underneath rely\non the communication protocol. The role of the API can be exactly to hide the detail of the transport protocol. E.g.:\nRMI is an API that implements the JRMP protocol or the IIOP as RMI-IIOP.\nProtocols are usually shared between different technologies (system based on given computer programming \nlanguages in a given operating system) and usually allow the different technologies to exchange information, acting \nas an abstraction/mediation level between the two worlds. While APIs can be specific to a given technology: hence\n---------------------\nGiven the context information and not prior knowledge, answer the query.\nQuery: What is the difference between SOAP-based services and REST-style communications in web APIs?\nAnswer: "}, {"role": "assistant", "content": "SOAP-based services and REST-style communications are two different approaches used in web APIs. SOAP, or Simple Object Access Protocol, is a protocol that allows for the exchange of structured information in web services using XML. On the other hand, REST, or Representational State Transfer, is a style of communication that is more direct. The recent trend in web development has been moving away from SOAP-based services towards REST-style communications."}]}
{"messages": [{"role": "system", "content": "You are an expert Q&A system that is trusted around the world.\nAlways answer the query using the provided context information, and not prior knowledge.\nSome rules to follow:\n1. Never directly reference the given context in your answer.\n2. Avoid statements like 'Based on the context, ...' or 'The context information ...' or anything along those lines."}, {"role": "user", "content": "Context information is below.\n---------------------\npage_label: 4\nfile_path: test\\regression\\regression_test006\\W120623A.pdf\n\nApplication programming interface\n4\nthe APIs of a given language cannot be used in other languages, unless the function calls are wrapped with specific\nadaptation libraries.\nObject API and protocols\nAn object API can prescribe a specific object exchange format, an object exchange protocol can define a way to\ntransfer the same kind of information in a message sent to a remote system.\nWhen a message is exchanged via a protocol between two different platforms using objects on both sides, the object\nin a programming language can be transformed (marshalled and unmarshalled) in an object in a remote and different\nlanguage: so, e.g., a program written in Java invokes a service via SOAP or IIOP written in C# both programs use\nAPIs for remote invocation (each locally to the machine where they are working) to (remotely) exchange\ninformation that they both convert from/to an object in local memory.\nInstead when a similar object is exchanged via an API local to a single machine the object is effectively exchanged\n(or a reference to it) in memory: e.g. via the memory allocated by a single process, or among multiple processes\nusing shared memory or other sharing techologies like tuple spaces.\nAPI sharing and reuse via virtual machine\nSome languages like those running in a virtual machine (e.g. .NET CLI compliant languages in the Common\nLanguage Runtime and JVM compliant languages in the Java Virtual Machine) can share APIs.\nIn this case the virtual machine enables the language interoperation thanks to the common denominator of the virtual\nmachine that abstracts from the specific language using an intermediate bytecode and its language binding.\nHence this approach maximizes the code reuse potential for all the existing libraries and related APIs.\nWeb APIs\nWhen used in the context of web development, an API is typically defined as a set of Hypertext Transfer Protocol\n(HTTP) request messages, along with a definition of the structure of response messages, which is usually in an\nExtensible Markup Language (XML) or JavaScript Object Notation (JSON) format. While \"Web API\" is virtually a\nsynonym for web service, the recent trend (so-called Web 2.0) has been moving away from Simple Object Access\nProtocol (SOAP) based services towards more direct Representational State Transfer (REST) style\ncommunications.[5] Web APIs allow the combination of multiple services into new applications known as\nmashups.[6]\nWeb use to share content\nThe practice of publishing APIs has allowed web communities to create an open architecture for sharing content and\ndata between communities and applications. In this way, content that is created in one place can be dynamically\nposted and updated in multiple locations on the web.\n1.Photos can be shared from sites like Flickr and Photobucket to social network sites like Facebook and MySpace.\n2.Content can be embedded, e.g. embedding a presentation from SlideShare on a LinkedIn profile.\n3.Content can be dynamically posted. Sharing live comments made on Twitter with a Facebook account, for\nexample, is enabled by their APIs.\n4.4.Video content can be embedded on sites which are served by another host.\n5.User information can be shared from web communities to outside applications, delivering new functionality to\nthe web community that shares its user data via an open API. One of the best examples of this is the Facebook\nApplication platform. Another is the Open Social platform.[7]\n\npage_label: 7\nfile_path: test\\regression\\regression_test006\\W120623A.pdf\n\nApplication programming interface\n7\nExternal links\n\u2022What is an API? Your Guide to the Internet (R)evolution (http:/ / www. 3scale. net/ wp-content/ uploads/ 2012/\n06/ What-is-an-API-1. 0. pdf)\n\u2022How to design a good API and why it matters (http:/ / lcsd05. cs. tamu. edu/ slides/ keynote. pdf)\n\u2022How to Write an API (http:/ / www. lior. ca/ publications/ api_design. pdf)\n\u2022LMAX Application Programming Interface (API) technology (http:/ / www. lmax. com/ trading-tech/ api-trading)\n---------------------\nGiven the context information and not prior knowledge, answer the query.\nQuery: How do web APIs enable the creation of mashup applications?\nAnswer: "}, {"role": "assistant", "content": "Web APIs allow the combination of multiple services into new applications, which are known as mashups. This is achieved through a set of Hypertext Transfer Protocol (HTTP) request messages, along with a definition of the structure of response messages, usually in an Extensible Markup Language (XML) or JavaScript Object Notation (JSON) format. The trend has been moving towards more direct Representational State Transfer (REST) style communications."}]}
{"messages": [{"role": "system", "content": "You are an expert Q&A system that is trusted around the world.\nAlways answer the query using the provided context information, and not prior knowledge.\nSome rules to follow:\n1. Never directly reference the given context in your answer.\n2. Avoid statements like 'Based on the context, ...' or 'The context information ...' or anything along those lines."}, {"role": "user", "content": "Context information is below.\n---------------------\npage_label: 4\nfile_path: test\\regression\\regression_test006\\W120623A.pdf\n\nApplication programming interface\n4\nthe APIs of a given language cannot be used in other languages, unless the function calls are wrapped with specific\nadaptation libraries.\nObject API and protocols\nAn object API can prescribe a specific object exchange format, an object exchange protocol can define a way to\ntransfer the same kind of information in a message sent to a remote system.\nWhen a message is exchanged via a protocol between two different platforms using objects on both sides, the object\nin a programming language can be transformed (marshalled and unmarshalled) in an object in a remote and different\nlanguage: so, e.g., a program written in Java invokes a service via SOAP or IIOP written in C# both programs use\nAPIs for remote invocation (each locally to the machine where they are working) to (remotely) exchange\ninformation that they both convert from/to an object in local memory.\nInstead when a similar object is exchanged via an API local to a single machine the object is effectively exchanged\n(or a reference to it) in memory: e.g. via the memory allocated by a single process, or among multiple processes\nusing shared memory or other sharing techologies like tuple spaces.\nAPI sharing and reuse via virtual machine\nSome languages like those running in a virtual machine (e.g. .NET CLI compliant languages in the Common\nLanguage Runtime and JVM compliant languages in the Java Virtual Machine) can share APIs.\nIn this case the virtual machine enables the language interoperation thanks to the common denominator of the virtual\nmachine that abstracts from the specific language using an intermediate bytecode and its language binding.\nHence this approach maximizes the code reuse potential for all the existing libraries and related APIs.\nWeb APIs\nWhen used in the context of web development, an API is typically defined as a set of Hypertext Transfer Protocol\n(HTTP) request messages, along with a definition of the structure of response messages, which is usually in an\nExtensible Markup Language (XML) or JavaScript Object Notation (JSON) format. While \"Web API\" is virtually a\nsynonym for web service, the recent trend (so-called Web 2.0) has been moving away from Simple Object Access\nProtocol (SOAP) based services towards more direct Representational State Transfer (REST) style\ncommunications.[5] Web APIs allow the combination of multiple services into new applications known as\nmashups.[6]\nWeb use to share content\nThe practice of publishing APIs has allowed web communities to create an open architecture for sharing content and\ndata between communities and applications. In this way, content that is created in one place can be dynamically\nposted and updated in multiple locations on the web.\n1.Photos can be shared from sites like Flickr and Photobucket to social network sites like Facebook and MySpace.\n2.Content can be embedded, e.g. embedding a presentation from SlideShare on a LinkedIn profile.\n3.Content can be dynamically posted. Sharing live comments made on Twitter with a Facebook account, for\nexample, is enabled by their APIs.\n4.4.Video content can be embedded on sites which are served by another host.\n5.User information can be shared from web communities to outside applications, delivering new functionality to\nthe web community that shares its user data via an open API. One of the best examples of this is the Facebook\nApplication platform. Another is the Open Social platform.[7]\n\npage_label: 7\nfile_path: test\\regression\\regression_test006\\W120623A.pdf\n\nApplication programming interface\n7\nExternal links\n\u2022What is an API? Your Guide to the Internet (R)evolution (http:/ / www. 3scale. net/ wp-content/ uploads/ 2012/\n06/ What-is-an-API-1. 0. pdf)\n\u2022How to design a good API and why it matters (http:/ / lcsd05. cs. tamu. edu/ slides/ keynote. pdf)\n\u2022How to Write an API (http:/ / www. lior. ca/ publications/ api_design. pdf)\n\u2022LMAX Application Programming Interface (API) technology (http:/ / www. lmax. com/ trading-tech/ api-trading)\n---------------------\nGiven the context information and not prior knowledge, answer the query.\nQuery: Give an example of how content can be shared and dynamically posted using APIs.\nAnswer: "}, {"role": "assistant", "content": "Content can be shared and dynamically posted using APIs in several ways. For instance, photos can be shared from sites like Flickr and Photobucket to social network sites like Facebook and MySpace. Content can also be embedded, such as embedding a presentation from SlideShare on a LinkedIn profile. Additionally, content can be dynamically posted, like sharing live comments made on Twitter with a Facebook account. Video content can also be embedded on sites which are served by another host. Lastly, user information can be shared from web communities to outside applications, delivering new functionality to the web community that shares its user data via an open API. Examples of this include the Facebook Application platform and the Open Social platform."}]}
{"messages": [{"role": "system", "content": "You are an expert Q&A system that is trusted around the world.\nAlways answer the query using the provided context information, and not prior knowledge.\nSome rules to follow:\n1. Never directly reference the given context in your answer.\n2. Avoid statements like 'Based on the context, ...' or 'The context information ...' or anything along those lines."}, {"role": "user", "content": "Context information is below.\n---------------------\npage_label: 4\nfile_path: test\\regression\\regression_test006\\W120623A.pdf\n\nApplication programming interface\n4\nthe APIs of a given language cannot be used in other languages, unless the function calls are wrapped with specific\nadaptation libraries.\nObject API and protocols\nAn object API can prescribe a specific object exchange format, an object exchange protocol can define a way to\ntransfer the same kind of information in a message sent to a remote system.\nWhen a message is exchanged via a protocol between two different platforms using objects on both sides, the object\nin a programming language can be transformed (marshalled and unmarshalled) in an object in a remote and different\nlanguage: so, e.g., a program written in Java invokes a service via SOAP or IIOP written in C# both programs use\nAPIs for remote invocation (each locally to the machine where they are working) to (remotely) exchange\ninformation that they both convert from/to an object in local memory.\nInstead when a similar object is exchanged via an API local to a single machine the object is effectively exchanged\n(or a reference to it) in memory: e.g. via the memory allocated by a single process, or among multiple processes\nusing shared memory or other sharing techologies like tuple spaces.\nAPI sharing and reuse via virtual machine\nSome languages like those running in a virtual machine (e.g. .NET CLI compliant languages in the Common\nLanguage Runtime and JVM compliant languages in the Java Virtual Machine) can share APIs.\nIn this case the virtual machine enables the language interoperation thanks to the common denominator of the virtual\nmachine that abstracts from the specific language using an intermediate bytecode and its language binding.\nHence this approach maximizes the code reuse potential for all the existing libraries and related APIs.\nWeb APIs\nWhen used in the context of web development, an API is typically defined as a set of Hypertext Transfer Protocol\n(HTTP) request messages, along with a definition of the structure of response messages, which is usually in an\nExtensible Markup Language (XML) or JavaScript Object Notation (JSON) format. While \"Web API\" is virtually a\nsynonym for web service, the recent trend (so-called Web 2.0) has been moving away from Simple Object Access\nProtocol (SOAP) based services towards more direct Representational State Transfer (REST) style\ncommunications.[5] Web APIs allow the combination of multiple services into new applications known as\nmashups.[6]\nWeb use to share content\nThe practice of publishing APIs has allowed web communities to create an open architecture for sharing content and\ndata between communities and applications. In this way, content that is created in one place can be dynamically\nposted and updated in multiple locations on the web.\n1.Photos can be shared from sites like Flickr and Photobucket to social network sites like Facebook and MySpace.\n2.Content can be embedded, e.g. embedding a presentation from SlideShare on a LinkedIn profile.\n3.Content can be dynamically posted. Sharing live comments made on Twitter with a Facebook account, for\nexample, is enabled by their APIs.\n4.4.Video content can be embedded on sites which are served by another host.\n5.User information can be shared from web communities to outside applications, delivering new functionality to\nthe web community that shares its user data via an open API. One of the best examples of this is the Facebook\nApplication platform. Another is the Open Social platform.[7]\n\npage_label: 7\nfile_path: test\\regression\\regression_test006\\W120623A.pdf\n\nApplication programming interface\n7\nExternal links\n\u2022What is an API? Your Guide to the Internet (R)evolution (http:/ / www. 3scale. net/ wp-content/ uploads/ 2012/\n06/ What-is-an-API-1. 0. pdf)\n\u2022How to design a good API and why it matters (http:/ / lcsd05. cs. tamu. edu/ slides/ keynote. pdf)\n\u2022How to Write an API (http:/ / www. lior. ca/ publications/ api_design. pdf)\n\u2022LMAX Application Programming Interface (API) technology (http:/ / www. lmax. com/ trading-tech/ api-trading)\n---------------------\nGiven the context information and not prior knowledge, answer the query.\nQuery: How can user information be shared from web communities to outside applications using open APIs?\nAnswer: "}, {"role": "assistant", "content": "User information can be shared from web communities to outside applications by utilizing open APIs. This process delivers new functionality to the web community that shares its user data via an open API. A prime example of this is the Facebook Application platform. Another instance is the Open Social platform. This allows for the dynamic posting and updating of content in multiple locations on the web."}]}
{"messages": [{"role": "system", "content": "You are an expert Q&A system that is trusted around the world.\nAlways answer the query using the provided context information, and not prior knowledge.\nSome rules to follow:\n1. Never directly reference the given context in your answer.\n2. Avoid statements like 'Based on the context, ...' or 'The context information ...' or anything along those lines."}, {"role": "user", "content": "Context information is below.\n---------------------\npage_label: 4\nfile_path: test\\regression\\regression_test006\\W120623A.pdf\n\nApplication programming interface\n4\nthe APIs of a given language cannot be used in other languages, unless the function calls are wrapped with specific\nadaptation libraries.\nObject API and protocols\nAn object API can prescribe a specific object exchange format, an object exchange protocol can define a way to\ntransfer the same kind of information in a message sent to a remote system.\nWhen a message is exchanged via a protocol between two different platforms using objects on both sides, the object\nin a programming language can be transformed (marshalled and unmarshalled) in an object in a remote and different\nlanguage: so, e.g., a program written in Java invokes a service via SOAP or IIOP written in C# both programs use\nAPIs for remote invocation (each locally to the machine where they are working) to (remotely) exchange\ninformation that they both convert from/to an object in local memory.\nInstead when a similar object is exchanged via an API local to a single machine the object is effectively exchanged\n(or a reference to it) in memory: e.g. via the memory allocated by a single process, or among multiple processes\nusing shared memory or other sharing techologies like tuple spaces.\nAPI sharing and reuse via virtual machine\nSome languages like those running in a virtual machine (e.g. .NET CLI compliant languages in the Common\nLanguage Runtime and JVM compliant languages in the Java Virtual Machine) can share APIs.\nIn this case the virtual machine enables the language interoperation thanks to the common denominator of the virtual\nmachine that abstracts from the specific language using an intermediate bytecode and its language binding.\nHence this approach maximizes the code reuse potential for all the existing libraries and related APIs.\nWeb APIs\nWhen used in the context of web development, an API is typically defined as a set of Hypertext Transfer Protocol\n(HTTP) request messages, along with a definition of the structure of response messages, which is usually in an\nExtensible Markup Language (XML) or JavaScript Object Notation (JSON) format. While \"Web API\" is virtually a\nsynonym for web service, the recent trend (so-called Web 2.0) has been moving away from Simple Object Access\nProtocol (SOAP) based services towards more direct Representational State Transfer (REST) style\ncommunications.[5] Web APIs allow the combination of multiple services into new applications known as\nmashups.[6]\nWeb use to share content\nThe practice of publishing APIs has allowed web communities to create an open architecture for sharing content and\ndata between communities and applications. In this way, content that is created in one place can be dynamically\nposted and updated in multiple locations on the web.\n1.Photos can be shared from sites like Flickr and Photobucket to social network sites like Facebook and MySpace.\n2.Content can be embedded, e.g. embedding a presentation from SlideShare on a LinkedIn profile.\n3.Content can be dynamically posted. Sharing live comments made on Twitter with a Facebook account, for\nexample, is enabled by their APIs.\n4.4.Video content can be embedded on sites which are served by another host.\n5.User information can be shared from web communities to outside applications, delivering new functionality to\nthe web community that shares its user data via an open API. One of the best examples of this is the Facebook\nApplication platform. Another is the Open Social platform.[7]\n\npage_label: 5\nfile_path: test\\regression\\regression_test006\\W120623A.pdf\n\nApplication programming interface\n5\nImplementations\nThe POSIX standard defines an API that allows a wide range of common computing functions to be written in a way\nsuch that they may operate on many different systems (Mac OS X, and various Berkeley Software Distributions\n(BSDs) implement this interface); however, making use of this requires re-compiling for each platform. A\ncompatible API, on the other hand, allows compiled object code to function without any changes to the system\nimplementing that API. This is beneficial to both software providers (where they may distribute existing software on\nnew systems without producing and distributing upgrades) and users (where they may install older software on their\nnew systems without purchasing upgrades), although this generally requires that various software libraries\nimplement the necessary APIs as well.\nMicrosoft has shown a strong commitment to a backward compatible API, particularly within their Windows API\n(Win32) library, such that older applications may run on newer versions of Windows using an executable-specific\nsetting called \"Compatibility Mode\".[8]\nApple Inc. has shown less concern, breaking compatibility or implementing an API in a slower \"emulation mode\";\nthis allows greater freedom in development, at the cost of making older software obsolete.\nAmong Unix-like operating systems, there are many related but incompatible operating systems running on a\ncommon hardware platform (particularly Intel 80386-compatible systems). There have been several attempts to\nstandardize the API such that software vendors may distribute one binary application for all these systems; however,\nto date, none of these have met with much success. The Linux Standard Base is attempting to do this for the Linux\nplatform, while many of the BSD Unixes, such as FreeBSD, NetBSD, and OpenBSD, implement various levels of\nAPI compatibility for both backward compatibility (allowing programs written for older versions to run on newer\ndistributions of the system) and cross-platform compatibility (allowing execution of foreign code without\nrecompiling).\nRelease policies\nThe two options for releasing API are:\n1.Protecting information on APIs from the general public. For example, Sony used to make its official PlayStation\n2 API available only to licensed PlayStation developers. This enabled Sony to control who wrote PlayStation 2\ngames. This gives companies quality control privileges and can provide them with potential licensing revenue\nstreams.\n2.Making APIs freely available. For example, Microsoft makes the Microsoft Windows API public, and Apple\nreleases its APIs Carbon and Cocoa, so that software can be written for their platforms.\nA mix of the two behaviors can be used as well.\nAPIs and Copyrights\nIn 2010 Oracle sued Google for having distributed a new implementation of Java embedded in the Android operating\nsystem.[9] The litigation concerns also the fact that Google did not acquire any permission to reproduce the Java API.\nInstead a similar permission was given to the OpenJDK project. However, Hon. William Alsup ruled on May 31,\n2012, that APIs cannot be copyrighted.\nAPI examples\n\u2022ASPI for SCSI device interfacing\n\u2022Carbon and Cocoa for the Macintosh\n\u2022DirectX for Microsoft Windows\n\u2022\u2022EHLLAPI\n---------------------\nGiven the context information and not prior knowledge, answer the query.\nQuery: Provide examples of platforms that utilize open APIs for sharing user data.\nAnswer: "}, {"role": "assistant", "content": "Facebook and Open Social are examples of platforms that utilize open APIs for sharing user data."}]}
{"messages": [{"role": "system", "content": "You are an expert Q&A system that is trusted around the world.\nAlways answer the query using the provided context information, and not prior knowledge.\nSome rules to follow:\n1. Never directly reference the given context in your answer.\n2. Avoid statements like 'Based on the context, ...' or 'The context information ...' or anything along those lines."}, {"role": "user", "content": "Context information is below.\n---------------------\npage_label: 1\nfile_path: test\\regression\\regression_test006\\W120623A.pdf\n\nApplication programming interface\n1\nApplication programming interface\nAn application programming interface (API) is a specification intended to be used as an interface by software\ncomponents to communicate with each other. An API may include specifications for routines, data structures, object\nclasses, and variables. An API specification can take many forms, including an International Standard such as\nPOSIX or vendor documentation such as the Microsoft Windows API, or the libraries of a programming language,\ne.g. Standard Template Library in C++ or Java API.\nAn API differs from an application binary interface (ABI) in that the former is source code based while the latter is a\nbinary interface. For instance POSIX is an API, while the Linux Standard Base is an ABI.[1]\nLanguage used\nAn API can be:\n\u2022\u2022language-dependent, meaning it is only available by using the syntax and elements of a particular language, which\nmakes the API more convenient to use.\n\u2022language-independent, written so that it can be called from several programming languages. This is a desirable\nfeature for a service-oriented API that is not bound to a specific process or system and may be provided as remote\nprocedure calls or web services. For example, a website that allows users to review local restaurants is able to\nlayer their reviews over maps taken from Google Maps, because Google Maps has an API that facilitates this\nfunctionality. Google Maps' API controls what information a third-party site can use and how they can use it.\nThe term API may be used to refer to a complete interface, a single function, or even a set of APIs provided by an\norganization. Thus, the scope of meaning is usually determined by the context of usage.\nDetailed explanation\nAn API may describe the ways in which a particular task is performed. In procedural languages like C language the\naction is usually mediated by a function call. Hence the API usually includes a description of all the\nfunctions/routines it provides. For instance: the math.h include file for the C language contains the definition of\nthe function prototypes of the mathematical functions available in the C language library for mathematical\nprocessing (usually called libm). This file describes how to use the functions included in the given library: the\nfunction prototype is a signature that describes the number and types of the parameters to be passed to the functions\nand the type of the return value. The behavior of the functions is usually described in more details in a human\nreadable format in printed books or in electronic formats like the man pages: e.g. on Unix systems the command\nman 3 sqrt will present the signature of the function sqrt in the form:\nSYNOPSIS\n            #include <math.h>\n            double sqrt(double X);\n            float  sqrtf(float X);\nDESCRIPTION\n       DESCRIPTION\n       sqrt computes the positive square root of the argument. ...\nRETURNS\n       On success, the square root is returned. If X is real and \npositive...\nThat means that the function returns the square root of a positive floating point number (single or double \nprecision) as another floating point number. Hence the API in this case can be interpreted as the collection of the\n\npage_label: 4\nfile_path: test\\regression\\regression_test006\\W120623A.pdf\n\nApplication programming interface\n4\nthe APIs of a given language cannot be used in other languages, unless the function calls are wrapped with specific\nadaptation libraries.\nObject API and protocols\nAn object API can prescribe a specific object exchange format, an object exchange protocol can define a way to\ntransfer the same kind of information in a message sent to a remote system.\nWhen a message is exchanged via a protocol between two different platforms using objects on both sides, the object\nin a programming language can be transformed (marshalled and unmarshalled) in an object in a remote and different\nlanguage: so, e.g., a program written in Java invokes a service via SOAP or IIOP written in C# both programs use\nAPIs for remote invocation (each locally to the machine where they are working) to (remotely) exchange\ninformation that they both convert from/to an object in local memory.\nInstead when a similar object is exchanged via an API local to a single machine the object is effectively exchanged\n(or a reference to it) in memory: e.g. via the memory allocated by a single process, or among multiple processes\nusing shared memory or other sharing techologies like tuple spaces.\nAPI sharing and reuse via virtual machine\nSome languages like those running in a virtual machine (e.g. .NET CLI compliant languages in the Common\nLanguage Runtime and JVM compliant languages in the Java Virtual Machine) can share APIs.\nIn this case the virtual machine enables the language interoperation thanks to the common denominator of the virtual\nmachine that abstracts from the specific language using an intermediate bytecode and its language binding.\nHence this approach maximizes the code reuse potential for all the existing libraries and related APIs.\nWeb APIs\nWhen used in the context of web development, an API is typically defined as a set of Hypertext Transfer Protocol\n(HTTP) request messages, along with a definition of the structure of response messages, which is usually in an\nExtensible Markup Language (XML) or JavaScript Object Notation (JSON) format. While \"Web API\" is virtually a\nsynonym for web service, the recent trend (so-called Web 2.0) has been moving away from Simple Object Access\nProtocol (SOAP) based services towards more direct Representational State Transfer (REST) style\ncommunications.[5] Web APIs allow the combination of multiple services into new applications known as\nmashups.[6]\nWeb use to share content\nThe practice of publishing APIs has allowed web communities to create an open architecture for sharing content and\ndata between communities and applications. In this way, content that is created in one place can be dynamically\nposted and updated in multiple locations on the web.\n1.Photos can be shared from sites like Flickr and Photobucket to social network sites like Facebook and MySpace.\n2.Content can be embedded, e.g. embedding a presentation from SlideShare on a LinkedIn profile.\n3.Content can be dynamically posted. Sharing live comments made on Twitter with a Facebook account, for\nexample, is enabled by their APIs.\n4.4.Video content can be embedded on sites which are served by another host.\n5.User information can be shared from web communities to outside applications, delivering new functionality to\nthe web community that shares its user data via an open API. One of the best examples of this is the Facebook\nApplication platform. Another is the Open Social platform.[7]\n---------------------\nGiven the context information and not prior knowledge, answer the query.\nQuery: What is the purpose of an API in computer programming?\nAnswer: "}, {"role": "assistant", "content": "An API, or Application Programming Interface, is a specification meant to be used as an interface by software components to communicate with each other. It may include specifications for routines, data structures, object classes, and variables. APIs can be language-dependent or language-independent, and they can be used in various forms, such as an International Standard like POSIX, vendor documentation like the Microsoft Windows API, or the libraries of a programming language. They can facilitate functionality, control information usage, and allow for the sharing and updating of content and data between communities and applications."}]}
{"messages": [{"role": "system", "content": "You are an expert Q&A system that is trusted around the world.\nAlways answer the query using the provided context information, and not prior knowledge.\nSome rules to follow:\n1. Never directly reference the given context in your answer.\n2. Avoid statements like 'Based on the context, ...' or 'The context information ...' or anything along those lines."}, {"role": "user", "content": "Context information is below.\n---------------------\npage_label: 5\nfile_path: test\\regression\\regression_test006\\W120623A.pdf\n\nApplication programming interface\n5\nImplementations\nThe POSIX standard defines an API that allows a wide range of common computing functions to be written in a way\nsuch that they may operate on many different systems (Mac OS X, and various Berkeley Software Distributions\n(BSDs) implement this interface); however, making use of this requires re-compiling for each platform. A\ncompatible API, on the other hand, allows compiled object code to function without any changes to the system\nimplementing that API. This is beneficial to both software providers (where they may distribute existing software on\nnew systems without producing and distributing upgrades) and users (where they may install older software on their\nnew systems without purchasing upgrades), although this generally requires that various software libraries\nimplement the necessary APIs as well.\nMicrosoft has shown a strong commitment to a backward compatible API, particularly within their Windows API\n(Win32) library, such that older applications may run on newer versions of Windows using an executable-specific\nsetting called \"Compatibility Mode\".[8]\nApple Inc. has shown less concern, breaking compatibility or implementing an API in a slower \"emulation mode\";\nthis allows greater freedom in development, at the cost of making older software obsolete.\nAmong Unix-like operating systems, there are many related but incompatible operating systems running on a\ncommon hardware platform (particularly Intel 80386-compatible systems). There have been several attempts to\nstandardize the API such that software vendors may distribute one binary application for all these systems; however,\nto date, none of these have met with much success. The Linux Standard Base is attempting to do this for the Linux\nplatform, while many of the BSD Unixes, such as FreeBSD, NetBSD, and OpenBSD, implement various levels of\nAPI compatibility for both backward compatibility (allowing programs written for older versions to run on newer\ndistributions of the system) and cross-platform compatibility (allowing execution of foreign code without\nrecompiling).\nRelease policies\nThe two options for releasing API are:\n1.Protecting information on APIs from the general public. For example, Sony used to make its official PlayStation\n2 API available only to licensed PlayStation developers. This enabled Sony to control who wrote PlayStation 2\ngames. This gives companies quality control privileges and can provide them with potential licensing revenue\nstreams.\n2.Making APIs freely available. For example, Microsoft makes the Microsoft Windows API public, and Apple\nreleases its APIs Carbon and Cocoa, so that software can be written for their platforms.\nA mix of the two behaviors can be used as well.\nAPIs and Copyrights\nIn 2010 Oracle sued Google for having distributed a new implementation of Java embedded in the Android operating\nsystem.[9] The litigation concerns also the fact that Google did not acquire any permission to reproduce the Java API.\nInstead a similar permission was given to the OpenJDK project. However, Hon. William Alsup ruled on May 31,\n2012, that APIs cannot be copyrighted.\nAPI examples\n\u2022ASPI for SCSI device interfacing\n\u2022Carbon and Cocoa for the Macintosh\n\u2022DirectX for Microsoft Windows\n\u2022\u2022EHLLAPI\n\npage_label: 1\nfile_path: test\\regression\\regression_test006\\W120623A.pdf\n\nApplication programming interface\n1\nApplication programming interface\nAn application programming interface (API) is a specification intended to be used as an interface by software\ncomponents to communicate with each other. An API may include specifications for routines, data structures, object\nclasses, and variables. An API specification can take many forms, including an International Standard such as\nPOSIX or vendor documentation such as the Microsoft Windows API, or the libraries of a programming language,\ne.g. Standard Template Library in C++ or Java API.\nAn API differs from an application binary interface (ABI) in that the former is source code based while the latter is a\nbinary interface. For instance POSIX is an API, while the Linux Standard Base is an ABI.[1]\nLanguage used\nAn API can be:\n\u2022\u2022language-dependent, meaning it is only available by using the syntax and elements of a particular language, which\nmakes the API more convenient to use.\n\u2022language-independent, written so that it can be called from several programming languages. This is a desirable\nfeature for a service-oriented API that is not bound to a specific process or system and may be provided as remote\nprocedure calls or web services. For example, a website that allows users to review local restaurants is able to\nlayer their reviews over maps taken from Google Maps, because Google Maps has an API that facilitates this\nfunctionality. Google Maps' API controls what information a third-party site can use and how they can use it.\nThe term API may be used to refer to a complete interface, a single function, or even a set of APIs provided by an\norganization. Thus, the scope of meaning is usually determined by the context of usage.\nDetailed explanation\nAn API may describe the ways in which a particular task is performed. In procedural languages like C language the\naction is usually mediated by a function call. Hence the API usually includes a description of all the\nfunctions/routines it provides. For instance: the math.h include file for the C language contains the definition of\nthe function prototypes of the mathematical functions available in the C language library for mathematical\nprocessing (usually called libm). This file describes how to use the functions included in the given library: the\nfunction prototype is a signature that describes the number and types of the parameters to be passed to the functions\nand the type of the return value. The behavior of the functions is usually described in more details in a human\nreadable format in printed books or in electronic formats like the man pages: e.g. on Unix systems the command\nman 3 sqrt will present the signature of the function sqrt in the form:\nSYNOPSIS\n            #include <math.h>\n            double sqrt(double X);\n            float  sqrtf(float X);\nDESCRIPTION\n       DESCRIPTION\n       sqrt computes the positive square root of the argument. ...\nRETURNS\n       On success, the square root is returned. If X is real and \npositive...\nThat means that the function returns the square root of a positive floating point number (single or double \nprecision) as another floating point number. Hence the API in this case can be interpreted as the collection of the\n---------------------\nGiven the context information and not prior knowledge, answer the query.\nQuery: How does a compatible API differ from the POSIX standard API?\nAnswer: "}, {"role": "assistant", "content": "A compatible API allows compiled object code to function without any changes to the system implementing that API. This is in contrast to the POSIX standard API, which requires re-compiling for each platform it operates on, even though it allows a wide range of common computing functions to be written in a way that they may operate on many different systems."}]}
{"messages": [{"role": "system", "content": "You are an expert Q&A system that is trusted around the world.\nAlways answer the query using the provided context information, and not prior knowledge.\nSome rules to follow:\n1. Never directly reference the given context in your answer.\n2. Avoid statements like 'Based on the context, ...' or 'The context information ...' or anything along those lines."}, {"role": "user", "content": "Context information is below.\n---------------------\npage_label: 5\nfile_path: test\\regression\\regression_test006\\W120623A.pdf\n\nApplication programming interface\n5\nImplementations\nThe POSIX standard defines an API that allows a wide range of common computing functions to be written in a way\nsuch that they may operate on many different systems (Mac OS X, and various Berkeley Software Distributions\n(BSDs) implement this interface); however, making use of this requires re-compiling for each platform. A\ncompatible API, on the other hand, allows compiled object code to function without any changes to the system\nimplementing that API. This is beneficial to both software providers (where they may distribute existing software on\nnew systems without producing and distributing upgrades) and users (where they may install older software on their\nnew systems without purchasing upgrades), although this generally requires that various software libraries\nimplement the necessary APIs as well.\nMicrosoft has shown a strong commitment to a backward compatible API, particularly within their Windows API\n(Win32) library, such that older applications may run on newer versions of Windows using an executable-specific\nsetting called \"Compatibility Mode\".[8]\nApple Inc. has shown less concern, breaking compatibility or implementing an API in a slower \"emulation mode\";\nthis allows greater freedom in development, at the cost of making older software obsolete.\nAmong Unix-like operating systems, there are many related but incompatible operating systems running on a\ncommon hardware platform (particularly Intel 80386-compatible systems). There have been several attempts to\nstandardize the API such that software vendors may distribute one binary application for all these systems; however,\nto date, none of these have met with much success. The Linux Standard Base is attempting to do this for the Linux\nplatform, while many of the BSD Unixes, such as FreeBSD, NetBSD, and OpenBSD, implement various levels of\nAPI compatibility for both backward compatibility (allowing programs written for older versions to run on newer\ndistributions of the system) and cross-platform compatibility (allowing execution of foreign code without\nrecompiling).\nRelease policies\nThe two options for releasing API are:\n1.Protecting information on APIs from the general public. For example, Sony used to make its official PlayStation\n2 API available only to licensed PlayStation developers. This enabled Sony to control who wrote PlayStation 2\ngames. This gives companies quality control privileges and can provide them with potential licensing revenue\nstreams.\n2.Making APIs freely available. For example, Microsoft makes the Microsoft Windows API public, and Apple\nreleases its APIs Carbon and Cocoa, so that software can be written for their platforms.\nA mix of the two behaviors can be used as well.\nAPIs and Copyrights\nIn 2010 Oracle sued Google for having distributed a new implementation of Java embedded in the Android operating\nsystem.[9] The litigation concerns also the fact that Google did not acquire any permission to reproduce the Java API.\nInstead a similar permission was given to the OpenJDK project. However, Hon. William Alsup ruled on May 31,\n2012, that APIs cannot be copyrighted.\nAPI examples\n\u2022ASPI for SCSI device interfacing\n\u2022Carbon and Cocoa for the Macintosh\n\u2022DirectX for Microsoft Windows\n\u2022\u2022EHLLAPI\n\npage_label: 6\nfile_path: test\\regression\\regression_test006\\W120623A.pdf\n\nApplication programming interface\n6\n\u2022\u2022Java APIs\n\u2022ODBC for Microsoft Windows\n\u2022OpenAL cross-platform sound API\n\u2022OpenCL cross-platform API for general-purpose computing for CPUs & GPUs\n\u2022OpenGL cross-platform graphics API\n\u2022OpenMP API that supports multi-platform shared memory multiprocessing programming in C, C++ and Fortran\non many architectures, including Unix and Microsoft Windows platforms.\n\u2022Simple DirectMedia Layer (SDL)\n\u2022Talend integrates its data management with BPM from Bonita Open Solution\nLanguage bindings and interface generators\nAPIs that are intended to be used by more than one high-level programming language often provide, or are\naugmented with, facilities to automatically map the API to features (syntactic or semantic) that are more natural in\nthose languages. This is known as language binding, and is itself an API. The aim is to encapsulate most of the\nrequired functionality of the API, leaving a \"thin\" layer appropriate to each language.\nBelow are listed some interface generator tools which bind languages to APIs at compile time.\n\u2022SWIG open-source interfaces bindings generator from many languages to many languages (Typically\nCompiled->Scripted)\n\u2022F2PY:[10] Fortran to Python interface generator.\nReferences\n[1]Stoughton, Nick (April 2005). \"Update on Standards\" (https:/ / db. usenix. org/ publications/ login/ 2005-04/ openpdfs/ standards2004. pdf)\n(PDF). USENIX. . Retrieved 2009-06-04.\n[2]Bloch, Joshua (2008). \"Effective Java (2nd edition)\" (http:/ / java. sun. com/ docs/ books/ effective/ ). Addison-Wesley. pp.\u00a0259\u2013312.\nISBN\u00a0978-0-321-35668-0. .\n[3]Fowler, Martin. \"Inversion Of Control\" (http:/ / martinfowler. com/ bliki/ InversionOfControl. html). .\n[4]\"API vs Protocol\" (http:/ / c2. com/ cgi/ wiki?ApiVsProtocol). .\n[5]Benslimane, Djamal; Schahram Dustdar, and Amit Sheth (2008). \"Services Mashups: The New Generation of Web Applications\" (http:/ /\ndsonline. computer. org/ portal/ site/ dsonline/ menuitem. 9ed3d9924aeb0dcd82ccc6716bbe36ec/ index. jsp?& pName=dso_level1&\npath=dsonline/ 2008/ 09& file=w5gei. xml& xsl=article. xsl). IEEE Internet Computing, vol. 12, no. 5. Institute of Electrical and Electronics\nEngineers. pp.\u00a013\u201315. .\n[6]Niccolai, James (2008-04-23), \"So What Is an Enterprise Mashup, Anyway?\" (http:/ / www. pcworld. com/ businesscenter/ article/ 145039/\nso_what_is_an_enterprise_mashup_anyway. html), PC World,\n[7][7]\"Dynamic Community content via APIs\". October 26, 2009.\n[8]Microsoft (October 2001). \"Run Older Programs On Windows XP\" (http:/ / www. microsoft. com/ windowsxp/ using/ helpandsupport/\nlearnmore/ appcompat. mspx). Microsoft. p.\u00a04. .\n[9]\"Oracle and the End of Programming As We Know It\" (http:/ / www. drdobbs. com/ jvm/ 232901227). DrDobbs. 2012-05-01. . Retrieved\n2012-05-09.\n[10]\"F2PY.org\" (http:/ / www. f2py. org/ ). F2PY.org. . Retrieved 2011-12-18.\n---------------------\nGiven the context information and not prior knowledge, answer the query.\nQuery: How does Microsoft ensure backward compatibility in their Windows API?\nAnswer: "}, {"role": "assistant", "content": "Microsoft ensures backward compatibility in their Windows API, particularly within their Windows API (Win32) library, by using an executable-specific setting called \"Compatibility Mode\". This allows older applications to run on newer versions of Windows."}]}
{"messages": [{"role": "system", "content": "You are an expert Q&A system that is trusted around the world.\nAlways answer the query using the provided context information, and not prior knowledge.\nSome rules to follow:\n1. Never directly reference the given context in your answer.\n2. Avoid statements like 'Based on the context, ...' or 'The context information ...' or anything along those lines."}, {"role": "user", "content": "Context information is below.\n---------------------\npage_label: 5\nfile_path: test\\regression\\regression_test006\\W120623A.pdf\n\nApplication programming interface\n5\nImplementations\nThe POSIX standard defines an API that allows a wide range of common computing functions to be written in a way\nsuch that they may operate on many different systems (Mac OS X, and various Berkeley Software Distributions\n(BSDs) implement this interface); however, making use of this requires re-compiling for each platform. A\ncompatible API, on the other hand, allows compiled object code to function without any changes to the system\nimplementing that API. This is beneficial to both software providers (where they may distribute existing software on\nnew systems without producing and distributing upgrades) and users (where they may install older software on their\nnew systems without purchasing upgrades), although this generally requires that various software libraries\nimplement the necessary APIs as well.\nMicrosoft has shown a strong commitment to a backward compatible API, particularly within their Windows API\n(Win32) library, such that older applications may run on newer versions of Windows using an executable-specific\nsetting called \"Compatibility Mode\".[8]\nApple Inc. has shown less concern, breaking compatibility or implementing an API in a slower \"emulation mode\";\nthis allows greater freedom in development, at the cost of making older software obsolete.\nAmong Unix-like operating systems, there are many related but incompatible operating systems running on a\ncommon hardware platform (particularly Intel 80386-compatible systems). There have been several attempts to\nstandardize the API such that software vendors may distribute one binary application for all these systems; however,\nto date, none of these have met with much success. The Linux Standard Base is attempting to do this for the Linux\nplatform, while many of the BSD Unixes, such as FreeBSD, NetBSD, and OpenBSD, implement various levels of\nAPI compatibility for both backward compatibility (allowing programs written for older versions to run on newer\ndistributions of the system) and cross-platform compatibility (allowing execution of foreign code without\nrecompiling).\nRelease policies\nThe two options for releasing API are:\n1.Protecting information on APIs from the general public. For example, Sony used to make its official PlayStation\n2 API available only to licensed PlayStation developers. This enabled Sony to control who wrote PlayStation 2\ngames. This gives companies quality control privileges and can provide them with potential licensing revenue\nstreams.\n2.Making APIs freely available. For example, Microsoft makes the Microsoft Windows API public, and Apple\nreleases its APIs Carbon and Cocoa, so that software can be written for their platforms.\nA mix of the two behaviors can be used as well.\nAPIs and Copyrights\nIn 2010 Oracle sued Google for having distributed a new implementation of Java embedded in the Android operating\nsystem.[9] The litigation concerns also the fact that Google did not acquire any permission to reproduce the Java API.\nInstead a similar permission was given to the OpenJDK project. However, Hon. William Alsup ruled on May 31,\n2012, that APIs cannot be copyrighted.\nAPI examples\n\u2022ASPI for SCSI device interfacing\n\u2022Carbon and Cocoa for the Macintosh\n\u2022DirectX for Microsoft Windows\n\u2022\u2022EHLLAPI\n\npage_label: 6\nfile_path: test\\regression\\regression_test006\\W120623A.pdf\n\nApplication programming interface\n6\n\u2022\u2022Java APIs\n\u2022ODBC for Microsoft Windows\n\u2022OpenAL cross-platform sound API\n\u2022OpenCL cross-platform API for general-purpose computing for CPUs & GPUs\n\u2022OpenGL cross-platform graphics API\n\u2022OpenMP API that supports multi-platform shared memory multiprocessing programming in C, C++ and Fortran\non many architectures, including Unix and Microsoft Windows platforms.\n\u2022Simple DirectMedia Layer (SDL)\n\u2022Talend integrates its data management with BPM from Bonita Open Solution\nLanguage bindings and interface generators\nAPIs that are intended to be used by more than one high-level programming language often provide, or are\naugmented with, facilities to automatically map the API to features (syntactic or semantic) that are more natural in\nthose languages. This is known as language binding, and is itself an API. The aim is to encapsulate most of the\nrequired functionality of the API, leaving a \"thin\" layer appropriate to each language.\nBelow are listed some interface generator tools which bind languages to APIs at compile time.\n\u2022SWIG open-source interfaces bindings generator from many languages to many languages (Typically\nCompiled->Scripted)\n\u2022F2PY:[10] Fortran to Python interface generator.\nReferences\n[1]Stoughton, Nick (April 2005). \"Update on Standards\" (https:/ / db. usenix. org/ publications/ login/ 2005-04/ openpdfs/ standards2004. pdf)\n(PDF). USENIX. . Retrieved 2009-06-04.\n[2]Bloch, Joshua (2008). \"Effective Java (2nd edition)\" (http:/ / java. sun. com/ docs/ books/ effective/ ). Addison-Wesley. pp.\u00a0259\u2013312.\nISBN\u00a0978-0-321-35668-0. .\n[3]Fowler, Martin. \"Inversion Of Control\" (http:/ / martinfowler. com/ bliki/ InversionOfControl. html). .\n[4]\"API vs Protocol\" (http:/ / c2. com/ cgi/ wiki?ApiVsProtocol). .\n[5]Benslimane, Djamal; Schahram Dustdar, and Amit Sheth (2008). \"Services Mashups: The New Generation of Web Applications\" (http:/ /\ndsonline. computer. org/ portal/ site/ dsonline/ menuitem. 9ed3d9924aeb0dcd82ccc6716bbe36ec/ index. jsp?& pName=dso_level1&\npath=dsonline/ 2008/ 09& file=w5gei. xml& xsl=article. xsl). IEEE Internet Computing, vol. 12, no. 5. Institute of Electrical and Electronics\nEngineers. pp.\u00a013\u201315. .\n[6]Niccolai, James (2008-04-23), \"So What Is an Enterprise Mashup, Anyway?\" (http:/ / www. pcworld. com/ businesscenter/ article/ 145039/\nso_what_is_an_enterprise_mashup_anyway. html), PC World,\n[7][7]\"Dynamic Community content via APIs\". October 26, 2009.\n[8]Microsoft (October 2001). \"Run Older Programs On Windows XP\" (http:/ / www. microsoft. com/ windowsxp/ using/ helpandsupport/\nlearnmore/ appcompat. mspx). Microsoft. p.\u00a04. .\n[9]\"Oracle and the End of Programming As We Know It\" (http:/ / www. drdobbs. com/ jvm/ 232901227). DrDobbs. 2012-05-01. . Retrieved\n2012-05-09.\n[10]\"F2PY.org\" (http:/ / www. f2py. org/ ). F2PY.org. . Retrieved 2011-12-18.\n---------------------\nGiven the context information and not prior knowledge, answer the query.\nQuery: How does Apple handle compatibility and API implementation in their systems?\nAnswer: "}, {"role": "assistant", "content": "Apple has been known to break compatibility or implement an API in a slower \"emulation mode\". This approach allows for greater freedom in development, but it can also make older software obsolete. They also release their APIs, such as Carbon and Cocoa, to the public so that software can be written for their platforms."}]}
{"messages": [{"role": "system", "content": "You are an expert Q&A system that is trusted around the world.\nAlways answer the query using the provided context information, and not prior knowledge.\nSome rules to follow:\n1. Never directly reference the given context in your answer.\n2. Avoid statements like 'Based on the context, ...' or 'The context information ...' or anything along those lines."}, {"role": "user", "content": "Context information is below.\n---------------------\npage_label: 5\nfile_path: test\\regression\\regression_test006\\W120623A.pdf\n\nApplication programming interface\n5\nImplementations\nThe POSIX standard defines an API that allows a wide range of common computing functions to be written in a way\nsuch that they may operate on many different systems (Mac OS X, and various Berkeley Software Distributions\n(BSDs) implement this interface); however, making use of this requires re-compiling for each platform. A\ncompatible API, on the other hand, allows compiled object code to function without any changes to the system\nimplementing that API. This is beneficial to both software providers (where they may distribute existing software on\nnew systems without producing and distributing upgrades) and users (where they may install older software on their\nnew systems without purchasing upgrades), although this generally requires that various software libraries\nimplement the necessary APIs as well.\nMicrosoft has shown a strong commitment to a backward compatible API, particularly within their Windows API\n(Win32) library, such that older applications may run on newer versions of Windows using an executable-specific\nsetting called \"Compatibility Mode\".[8]\nApple Inc. has shown less concern, breaking compatibility or implementing an API in a slower \"emulation mode\";\nthis allows greater freedom in development, at the cost of making older software obsolete.\nAmong Unix-like operating systems, there are many related but incompatible operating systems running on a\ncommon hardware platform (particularly Intel 80386-compatible systems). There have been several attempts to\nstandardize the API such that software vendors may distribute one binary application for all these systems; however,\nto date, none of these have met with much success. The Linux Standard Base is attempting to do this for the Linux\nplatform, while many of the BSD Unixes, such as FreeBSD, NetBSD, and OpenBSD, implement various levels of\nAPI compatibility for both backward compatibility (allowing programs written for older versions to run on newer\ndistributions of the system) and cross-platform compatibility (allowing execution of foreign code without\nrecompiling).\nRelease policies\nThe two options for releasing API are:\n1.Protecting information on APIs from the general public. For example, Sony used to make its official PlayStation\n2 API available only to licensed PlayStation developers. This enabled Sony to control who wrote PlayStation 2\ngames. This gives companies quality control privileges and can provide them with potential licensing revenue\nstreams.\n2.Making APIs freely available. For example, Microsoft makes the Microsoft Windows API public, and Apple\nreleases its APIs Carbon and Cocoa, so that software can be written for their platforms.\nA mix of the two behaviors can be used as well.\nAPIs and Copyrights\nIn 2010 Oracle sued Google for having distributed a new implementation of Java embedded in the Android operating\nsystem.[9] The litigation concerns also the fact that Google did not acquire any permission to reproduce the Java API.\nInstead a similar permission was given to the OpenJDK project. However, Hon. William Alsup ruled on May 31,\n2012, that APIs cannot be copyrighted.\nAPI examples\n\u2022ASPI for SCSI device interfacing\n\u2022Carbon and Cocoa for the Macintosh\n\u2022DirectX for Microsoft Windows\n\u2022\u2022EHLLAPI\n\npage_label: 6\nfile_path: test\\regression\\regression_test006\\W120623A.pdf\n\nApplication programming interface\n6\n\u2022\u2022Java APIs\n\u2022ODBC for Microsoft Windows\n\u2022OpenAL cross-platform sound API\n\u2022OpenCL cross-platform API for general-purpose computing for CPUs & GPUs\n\u2022OpenGL cross-platform graphics API\n\u2022OpenMP API that supports multi-platform shared memory multiprocessing programming in C, C++ and Fortran\non many architectures, including Unix and Microsoft Windows platforms.\n\u2022Simple DirectMedia Layer (SDL)\n\u2022Talend integrates its data management with BPM from Bonita Open Solution\nLanguage bindings and interface generators\nAPIs that are intended to be used by more than one high-level programming language often provide, or are\naugmented with, facilities to automatically map the API to features (syntactic or semantic) that are more natural in\nthose languages. This is known as language binding, and is itself an API. The aim is to encapsulate most of the\nrequired functionality of the API, leaving a \"thin\" layer appropriate to each language.\nBelow are listed some interface generator tools which bind languages to APIs at compile time.\n\u2022SWIG open-source interfaces bindings generator from many languages to many languages (Typically\nCompiled->Scripted)\n\u2022F2PY:[10] Fortran to Python interface generator.\nReferences\n[1]Stoughton, Nick (April 2005). \"Update on Standards\" (https:/ / db. usenix. org/ publications/ login/ 2005-04/ openpdfs/ standards2004. pdf)\n(PDF). USENIX. . Retrieved 2009-06-04.\n[2]Bloch, Joshua (2008). \"Effective Java (2nd edition)\" (http:/ / java. sun. com/ docs/ books/ effective/ ). Addison-Wesley. pp.\u00a0259\u2013312.\nISBN\u00a0978-0-321-35668-0. .\n[3]Fowler, Martin. \"Inversion Of Control\" (http:/ / martinfowler. com/ bliki/ InversionOfControl. html). .\n[4]\"API vs Protocol\" (http:/ / c2. com/ cgi/ wiki?ApiVsProtocol). .\n[5]Benslimane, Djamal; Schahram Dustdar, and Amit Sheth (2008). \"Services Mashups: The New Generation of Web Applications\" (http:/ /\ndsonline. computer. org/ portal/ site/ dsonline/ menuitem. 9ed3d9924aeb0dcd82ccc6716bbe36ec/ index. jsp?& pName=dso_level1&\npath=dsonline/ 2008/ 09& file=w5gei. xml& xsl=article. xsl). IEEE Internet Computing, vol. 12, no. 5. Institute of Electrical and Electronics\nEngineers. pp.\u00a013\u201315. .\n[6]Niccolai, James (2008-04-23), \"So What Is an Enterprise Mashup, Anyway?\" (http:/ / www. pcworld. com/ businesscenter/ article/ 145039/\nso_what_is_an_enterprise_mashup_anyway. html), PC World,\n[7][7]\"Dynamic Community content via APIs\". October 26, 2009.\n[8]Microsoft (October 2001). \"Run Older Programs On Windows XP\" (http:/ / www. microsoft. com/ windowsxp/ using/ helpandsupport/\nlearnmore/ appcompat. mspx). Microsoft. p.\u00a04. .\n[9]\"Oracle and the End of Programming As We Know It\" (http:/ / www. drdobbs. com/ jvm/ 232901227). DrDobbs. 2012-05-01. . Retrieved\n2012-05-09.\n[10]\"F2PY.org\" (http:/ / www. f2py. org/ ). F2PY.org. . Retrieved 2011-12-18.\n---------------------\nGiven the context information and not prior knowledge, answer the query.\nQuery: What challenges exist in standardizing APIs for Unix-like operating systems?\nAnswer: "}, {"role": "assistant", "content": "Standardizing APIs for Unix-like operating systems presents several challenges. There are many related but incompatible operating systems running on a common hardware platform, particularly Intel 80386-compatible systems. While there have been attempts to standardize the API so that software vendors can distribute one binary application for all these systems, none of these attempts have been particularly successful. The Linux Standard Base is trying to do this for the Linux platform, and BSD Unixes like FreeBSD, NetBSD, and OpenBSD implement various levels of API compatibility for both backward compatibility and cross-platform compatibility. However, achieving a fully standardized API across all these systems remains a challenge."}]}
{"messages": [{"role": "system", "content": "You are an expert Q&A system that is trusted around the world.\nAlways answer the query using the provided context information, and not prior knowledge.\nSome rules to follow:\n1. Never directly reference the given context in your answer.\n2. Avoid statements like 'Based on the context, ...' or 'The context information ...' or anything along those lines."}, {"role": "user", "content": "Context information is below.\n---------------------\npage_label: 5\nfile_path: test\\regression\\regression_test006\\W120623A.pdf\n\nApplication programming interface\n5\nImplementations\nThe POSIX standard defines an API that allows a wide range of common computing functions to be written in a way\nsuch that they may operate on many different systems (Mac OS X, and various Berkeley Software Distributions\n(BSDs) implement this interface); however, making use of this requires re-compiling for each platform. A\ncompatible API, on the other hand, allows compiled object code to function without any changes to the system\nimplementing that API. This is beneficial to both software providers (where they may distribute existing software on\nnew systems without producing and distributing upgrades) and users (where they may install older software on their\nnew systems without purchasing upgrades), although this generally requires that various software libraries\nimplement the necessary APIs as well.\nMicrosoft has shown a strong commitment to a backward compatible API, particularly within their Windows API\n(Win32) library, such that older applications may run on newer versions of Windows using an executable-specific\nsetting called \"Compatibility Mode\".[8]\nApple Inc. has shown less concern, breaking compatibility or implementing an API in a slower \"emulation mode\";\nthis allows greater freedom in development, at the cost of making older software obsolete.\nAmong Unix-like operating systems, there are many related but incompatible operating systems running on a\ncommon hardware platform (particularly Intel 80386-compatible systems). There have been several attempts to\nstandardize the API such that software vendors may distribute one binary application for all these systems; however,\nto date, none of these have met with much success. The Linux Standard Base is attempting to do this for the Linux\nplatform, while many of the BSD Unixes, such as FreeBSD, NetBSD, and OpenBSD, implement various levels of\nAPI compatibility for both backward compatibility (allowing programs written for older versions to run on newer\ndistributions of the system) and cross-platform compatibility (allowing execution of foreign code without\nrecompiling).\nRelease policies\nThe two options for releasing API are:\n1.Protecting information on APIs from the general public. For example, Sony used to make its official PlayStation\n2 API available only to licensed PlayStation developers. This enabled Sony to control who wrote PlayStation 2\ngames. This gives companies quality control privileges and can provide them with potential licensing revenue\nstreams.\n2.Making APIs freely available. For example, Microsoft makes the Microsoft Windows API public, and Apple\nreleases its APIs Carbon and Cocoa, so that software can be written for their platforms.\nA mix of the two behaviors can be used as well.\nAPIs and Copyrights\nIn 2010 Oracle sued Google for having distributed a new implementation of Java embedded in the Android operating\nsystem.[9] The litigation concerns also the fact that Google did not acquire any permission to reproduce the Java API.\nInstead a similar permission was given to the OpenJDK project. However, Hon. William Alsup ruled on May 31,\n2012, that APIs cannot be copyrighted.\nAPI examples\n\u2022ASPI for SCSI device interfacing\n\u2022Carbon and Cocoa for the Macintosh\n\u2022DirectX for Microsoft Windows\n\u2022\u2022EHLLAPI\n\npage_label: 6\nfile_path: test\\regression\\regression_test006\\W120623A.pdf\n\nApplication programming interface\n6\n\u2022\u2022Java APIs\n\u2022ODBC for Microsoft Windows\n\u2022OpenAL cross-platform sound API\n\u2022OpenCL cross-platform API for general-purpose computing for CPUs & GPUs\n\u2022OpenGL cross-platform graphics API\n\u2022OpenMP API that supports multi-platform shared memory multiprocessing programming in C, C++ and Fortran\non many architectures, including Unix and Microsoft Windows platforms.\n\u2022Simple DirectMedia Layer (SDL)\n\u2022Talend integrates its data management with BPM from Bonita Open Solution\nLanguage bindings and interface generators\nAPIs that are intended to be used by more than one high-level programming language often provide, or are\naugmented with, facilities to automatically map the API to features (syntactic or semantic) that are more natural in\nthose languages. This is known as language binding, and is itself an API. The aim is to encapsulate most of the\nrequired functionality of the API, leaving a \"thin\" layer appropriate to each language.\nBelow are listed some interface generator tools which bind languages to APIs at compile time.\n\u2022SWIG open-source interfaces bindings generator from many languages to many languages (Typically\nCompiled->Scripted)\n\u2022F2PY:[10] Fortran to Python interface generator.\nReferences\n[1]Stoughton, Nick (April 2005). \"Update on Standards\" (https:/ / db. usenix. org/ publications/ login/ 2005-04/ openpdfs/ standards2004. pdf)\n(PDF). USENIX. . Retrieved 2009-06-04.\n[2]Bloch, Joshua (2008). \"Effective Java (2nd edition)\" (http:/ / java. sun. com/ docs/ books/ effective/ ). Addison-Wesley. pp.\u00a0259\u2013312.\nISBN\u00a0978-0-321-35668-0. .\n[3]Fowler, Martin. \"Inversion Of Control\" (http:/ / martinfowler. com/ bliki/ InversionOfControl. html). .\n[4]\"API vs Protocol\" (http:/ / c2. com/ cgi/ wiki?ApiVsProtocol). .\n[5]Benslimane, Djamal; Schahram Dustdar, and Amit Sheth (2008). \"Services Mashups: The New Generation of Web Applications\" (http:/ /\ndsonline. computer. org/ portal/ site/ dsonline/ menuitem. 9ed3d9924aeb0dcd82ccc6716bbe36ec/ index. jsp?& pName=dso_level1&\npath=dsonline/ 2008/ 09& file=w5gei. xml& xsl=article. xsl). IEEE Internet Computing, vol. 12, no. 5. Institute of Electrical and Electronics\nEngineers. pp.\u00a013\u201315. .\n[6]Niccolai, James (2008-04-23), \"So What Is an Enterprise Mashup, Anyway?\" (http:/ / www. pcworld. com/ businesscenter/ article/ 145039/\nso_what_is_an_enterprise_mashup_anyway. html), PC World,\n[7][7]\"Dynamic Community content via APIs\". October 26, 2009.\n[8]Microsoft (October 2001). \"Run Older Programs On Windows XP\" (http:/ / www. microsoft. com/ windowsxp/ using/ helpandsupport/\nlearnmore/ appcompat. mspx). Microsoft. p.\u00a04. .\n[9]\"Oracle and the End of Programming As We Know It\" (http:/ / www. drdobbs. com/ jvm/ 232901227). DrDobbs. 2012-05-01. . Retrieved\n2012-05-09.\n[10]\"F2PY.org\" (http:/ / www. f2py. org/ ). F2PY.org. . Retrieved 2011-12-18.\n---------------------\nGiven the context information and not prior knowledge, answer the query.\nQuery: What is the Linux Standard Base and what is its goal?\nAnswer: "}, {"role": "assistant", "content": "The Linux Standard Base is an initiative related to Unix-like operating systems. Its goal is to standardize the Application Programming Interface (API) across these systems. This would allow software vendors to distribute a single binary application that could operate on all these systems. This standardization would enhance both backward compatibility, enabling programs written for older versions to run on newer distributions, and cross-platform compatibility, allowing the execution of foreign code without the need for recompiling."}]}
{"messages": [{"role": "system", "content": "You are an expert Q&A system that is trusted around the world.\nAlways answer the query using the provided context information, and not prior knowledge.\nSome rules to follow:\n1. Never directly reference the given context in your answer.\n2. Avoid statements like 'Based on the context, ...' or 'The context information ...' or anything along those lines."}, {"role": "user", "content": "Context information is below.\n---------------------\npage_label: 5\nfile_path: test\\regression\\regression_test006\\W120623A.pdf\n\nApplication programming interface\n5\nImplementations\nThe POSIX standard defines an API that allows a wide range of common computing functions to be written in a way\nsuch that they may operate on many different systems (Mac OS X, and various Berkeley Software Distributions\n(BSDs) implement this interface); however, making use of this requires re-compiling for each platform. A\ncompatible API, on the other hand, allows compiled object code to function without any changes to the system\nimplementing that API. This is beneficial to both software providers (where they may distribute existing software on\nnew systems without producing and distributing upgrades) and users (where they may install older software on their\nnew systems without purchasing upgrades), although this generally requires that various software libraries\nimplement the necessary APIs as well.\nMicrosoft has shown a strong commitment to a backward compatible API, particularly within their Windows API\n(Win32) library, such that older applications may run on newer versions of Windows using an executable-specific\nsetting called \"Compatibility Mode\".[8]\nApple Inc. has shown less concern, breaking compatibility or implementing an API in a slower \"emulation mode\";\nthis allows greater freedom in development, at the cost of making older software obsolete.\nAmong Unix-like operating systems, there are many related but incompatible operating systems running on a\ncommon hardware platform (particularly Intel 80386-compatible systems). There have been several attempts to\nstandardize the API such that software vendors may distribute one binary application for all these systems; however,\nto date, none of these have met with much success. The Linux Standard Base is attempting to do this for the Linux\nplatform, while many of the BSD Unixes, such as FreeBSD, NetBSD, and OpenBSD, implement various levels of\nAPI compatibility for both backward compatibility (allowing programs written for older versions to run on newer\ndistributions of the system) and cross-platform compatibility (allowing execution of foreign code without\nrecompiling).\nRelease policies\nThe two options for releasing API are:\n1.Protecting information on APIs from the general public. For example, Sony used to make its official PlayStation\n2 API available only to licensed PlayStation developers. This enabled Sony to control who wrote PlayStation 2\ngames. This gives companies quality control privileges and can provide them with potential licensing revenue\nstreams.\n2.Making APIs freely available. For example, Microsoft makes the Microsoft Windows API public, and Apple\nreleases its APIs Carbon and Cocoa, so that software can be written for their platforms.\nA mix of the two behaviors can be used as well.\nAPIs and Copyrights\nIn 2010 Oracle sued Google for having distributed a new implementation of Java embedded in the Android operating\nsystem.[9] The litigation concerns also the fact that Google did not acquire any permission to reproduce the Java API.\nInstead a similar permission was given to the OpenJDK project. However, Hon. William Alsup ruled on May 31,\n2012, that APIs cannot be copyrighted.\nAPI examples\n\u2022ASPI for SCSI device interfacing\n\u2022Carbon and Cocoa for the Macintosh\n\u2022DirectX for Microsoft Windows\n\u2022\u2022EHLLAPI\n\npage_label: 4\nfile_path: test\\regression\\regression_test006\\W120623A.pdf\n\nApplication programming interface\n4\nthe APIs of a given language cannot be used in other languages, unless the function calls are wrapped with specific\nadaptation libraries.\nObject API and protocols\nAn object API can prescribe a specific object exchange format, an object exchange protocol can define a way to\ntransfer the same kind of information in a message sent to a remote system.\nWhen a message is exchanged via a protocol between two different platforms using objects on both sides, the object\nin a programming language can be transformed (marshalled and unmarshalled) in an object in a remote and different\nlanguage: so, e.g., a program written in Java invokes a service via SOAP or IIOP written in C# both programs use\nAPIs for remote invocation (each locally to the machine where they are working) to (remotely) exchange\ninformation that they both convert from/to an object in local memory.\nInstead when a similar object is exchanged via an API local to a single machine the object is effectively exchanged\n(or a reference to it) in memory: e.g. via the memory allocated by a single process, or among multiple processes\nusing shared memory or other sharing techologies like tuple spaces.\nAPI sharing and reuse via virtual machine\nSome languages like those running in a virtual machine (e.g. .NET CLI compliant languages in the Common\nLanguage Runtime and JVM compliant languages in the Java Virtual Machine) can share APIs.\nIn this case the virtual machine enables the language interoperation thanks to the common denominator of the virtual\nmachine that abstracts from the specific language using an intermediate bytecode and its language binding.\nHence this approach maximizes the code reuse potential for all the existing libraries and related APIs.\nWeb APIs\nWhen used in the context of web development, an API is typically defined as a set of Hypertext Transfer Protocol\n(HTTP) request messages, along with a definition of the structure of response messages, which is usually in an\nExtensible Markup Language (XML) or JavaScript Object Notation (JSON) format. While \"Web API\" is virtually a\nsynonym for web service, the recent trend (so-called Web 2.0) has been moving away from Simple Object Access\nProtocol (SOAP) based services towards more direct Representational State Transfer (REST) style\ncommunications.[5] Web APIs allow the combination of multiple services into new applications known as\nmashups.[6]\nWeb use to share content\nThe practice of publishing APIs has allowed web communities to create an open architecture for sharing content and\ndata between communities and applications. In this way, content that is created in one place can be dynamically\nposted and updated in multiple locations on the web.\n1.Photos can be shared from sites like Flickr and Photobucket to social network sites like Facebook and MySpace.\n2.Content can be embedded, e.g. embedding a presentation from SlideShare on a LinkedIn profile.\n3.Content can be dynamically posted. Sharing live comments made on Twitter with a Facebook account, for\nexample, is enabled by their APIs.\n4.4.Video content can be embedded on sites which are served by another host.\n5.User information can be shared from web communities to outside applications, delivering new functionality to\nthe web community that shares its user data via an open API. One of the best examples of this is the Facebook\nApplication platform. Another is the Open Social platform.[7]\n---------------------\nGiven the context information and not prior knowledge, answer the query.\nQuery: What are the two options for releasing an API and what are the advantages of each?\nAnswer: "}, {"role": "assistant", "content": "The two options for releasing an API are protecting information on APIs from the general public and making APIs freely available. \n\nProtecting information on APIs from the general public allows companies to control who can write applications for their platforms. This gives companies quality control privileges and can provide them with potential licensing revenue streams. An example of this is Sony, which used to make its official PlayStation 2 API available only to licensed PlayStation developers.\n\nOn the other hand, making APIs freely available allows software to be written for their platforms. This can lead to a wider range of applications and uses for the platform. Examples of this include Microsoft making the Microsoft Windows API public, and Apple releasing its APIs Carbon and Cocoa. \n\nA mix of the two behaviors can also be used."}]}
{"messages": [{"role": "system", "content": "You are an expert Q&A system that is trusted around the world.\nAlways answer the query using the provided context information, and not prior knowledge.\nSome rules to follow:\n1. Never directly reference the given context in your answer.\n2. Avoid statements like 'Based on the context, ...' or 'The context information ...' or anything along those lines."}, {"role": "user", "content": "Context information is below.\n---------------------\npage_label: 5\nfile_path: test\\regression\\regression_test006\\W120623A.pdf\n\nApplication programming interface\n5\nImplementations\nThe POSIX standard defines an API that allows a wide range of common computing functions to be written in a way\nsuch that they may operate on many different systems (Mac OS X, and various Berkeley Software Distributions\n(BSDs) implement this interface); however, making use of this requires re-compiling for each platform. A\ncompatible API, on the other hand, allows compiled object code to function without any changes to the system\nimplementing that API. This is beneficial to both software providers (where they may distribute existing software on\nnew systems without producing and distributing upgrades) and users (where they may install older software on their\nnew systems without purchasing upgrades), although this generally requires that various software libraries\nimplement the necessary APIs as well.\nMicrosoft has shown a strong commitment to a backward compatible API, particularly within their Windows API\n(Win32) library, such that older applications may run on newer versions of Windows using an executable-specific\nsetting called \"Compatibility Mode\".[8]\nApple Inc. has shown less concern, breaking compatibility or implementing an API in a slower \"emulation mode\";\nthis allows greater freedom in development, at the cost of making older software obsolete.\nAmong Unix-like operating systems, there are many related but incompatible operating systems running on a\ncommon hardware platform (particularly Intel 80386-compatible systems). There have been several attempts to\nstandardize the API such that software vendors may distribute one binary application for all these systems; however,\nto date, none of these have met with much success. The Linux Standard Base is attempting to do this for the Linux\nplatform, while many of the BSD Unixes, such as FreeBSD, NetBSD, and OpenBSD, implement various levels of\nAPI compatibility for both backward compatibility (allowing programs written for older versions to run on newer\ndistributions of the system) and cross-platform compatibility (allowing execution of foreign code without\nrecompiling).\nRelease policies\nThe two options for releasing API are:\n1.Protecting information on APIs from the general public. For example, Sony used to make its official PlayStation\n2 API available only to licensed PlayStation developers. This enabled Sony to control who wrote PlayStation 2\ngames. This gives companies quality control privileges and can provide them with potential licensing revenue\nstreams.\n2.Making APIs freely available. For example, Microsoft makes the Microsoft Windows API public, and Apple\nreleases its APIs Carbon and Cocoa, so that software can be written for their platforms.\nA mix of the two behaviors can be used as well.\nAPIs and Copyrights\nIn 2010 Oracle sued Google for having distributed a new implementation of Java embedded in the Android operating\nsystem.[9] The litigation concerns also the fact that Google did not acquire any permission to reproduce the Java API.\nInstead a similar permission was given to the OpenJDK project. However, Hon. William Alsup ruled on May 31,\n2012, that APIs cannot be copyrighted.\nAPI examples\n\u2022ASPI for SCSI device interfacing\n\u2022Carbon and Cocoa for the Macintosh\n\u2022DirectX for Microsoft Windows\n\u2022\u2022EHLLAPI\n\npage_label: 6\nfile_path: test\\regression\\regression_test006\\W120623A.pdf\n\nApplication programming interface\n6\n\u2022\u2022Java APIs\n\u2022ODBC for Microsoft Windows\n\u2022OpenAL cross-platform sound API\n\u2022OpenCL cross-platform API for general-purpose computing for CPUs & GPUs\n\u2022OpenGL cross-platform graphics API\n\u2022OpenMP API that supports multi-platform shared memory multiprocessing programming in C, C++ and Fortran\non many architectures, including Unix and Microsoft Windows platforms.\n\u2022Simple DirectMedia Layer (SDL)\n\u2022Talend integrates its data management with BPM from Bonita Open Solution\nLanguage bindings and interface generators\nAPIs that are intended to be used by more than one high-level programming language often provide, or are\naugmented with, facilities to automatically map the API to features (syntactic or semantic) that are more natural in\nthose languages. This is known as language binding, and is itself an API. The aim is to encapsulate most of the\nrequired functionality of the API, leaving a \"thin\" layer appropriate to each language.\nBelow are listed some interface generator tools which bind languages to APIs at compile time.\n\u2022SWIG open-source interfaces bindings generator from many languages to many languages (Typically\nCompiled->Scripted)\n\u2022F2PY:[10] Fortran to Python interface generator.\nReferences\n[1]Stoughton, Nick (April 2005). \"Update on Standards\" (https:/ / db. usenix. org/ publications/ login/ 2005-04/ openpdfs/ standards2004. pdf)\n(PDF). USENIX. . Retrieved 2009-06-04.\n[2]Bloch, Joshua (2008). \"Effective Java (2nd edition)\" (http:/ / java. sun. com/ docs/ books/ effective/ ). Addison-Wesley. pp.\u00a0259\u2013312.\nISBN\u00a0978-0-321-35668-0. .\n[3]Fowler, Martin. \"Inversion Of Control\" (http:/ / martinfowler. com/ bliki/ InversionOfControl. html). .\n[4]\"API vs Protocol\" (http:/ / c2. com/ cgi/ wiki?ApiVsProtocol). .\n[5]Benslimane, Djamal; Schahram Dustdar, and Amit Sheth (2008). \"Services Mashups: The New Generation of Web Applications\" (http:/ /\ndsonline. computer. org/ portal/ site/ dsonline/ menuitem. 9ed3d9924aeb0dcd82ccc6716bbe36ec/ index. jsp?& pName=dso_level1&\npath=dsonline/ 2008/ 09& file=w5gei. xml& xsl=article. xsl). IEEE Internet Computing, vol. 12, no. 5. Institute of Electrical and Electronics\nEngineers. pp.\u00a013\u201315. .\n[6]Niccolai, James (2008-04-23), \"So What Is an Enterprise Mashup, Anyway?\" (http:/ / www. pcworld. com/ businesscenter/ article/ 145039/\nso_what_is_an_enterprise_mashup_anyway. html), PC World,\n[7][7]\"Dynamic Community content via APIs\". October 26, 2009.\n[8]Microsoft (October 2001). \"Run Older Programs On Windows XP\" (http:/ / www. microsoft. com/ windowsxp/ using/ helpandsupport/\nlearnmore/ appcompat. mspx). Microsoft. p.\u00a04. .\n[9]\"Oracle and the End of Programming As We Know It\" (http:/ / www. drdobbs. com/ jvm/ 232901227). DrDobbs. 2012-05-01. . Retrieved\n2012-05-09.\n[10]\"F2PY.org\" (http:/ / www. f2py. org/ ). F2PY.org. . Retrieved 2011-12-18.\n---------------------\nGiven the context information and not prior knowledge, answer the query.\nQuery: What legal issue arose between Oracle and Google regarding the Java API?\nAnswer: "}, {"role": "assistant", "content": "Oracle sued Google in 2010 for distributing a new implementation of Java embedded in the Android operating system without acquiring any permission to reproduce the Java API."}]}
{"messages": [{"role": "system", "content": "You are an expert Q&A system that is trusted around the world.\nAlways answer the query using the provided context information, and not prior knowledge.\nSome rules to follow:\n1. Never directly reference the given context in your answer.\n2. Avoid statements like 'Based on the context, ...' or 'The context information ...' or anything along those lines."}, {"role": "user", "content": "Context information is below.\n---------------------\npage_label: 5\nfile_path: test\\regression\\regression_test006\\W120623A.pdf\n\nApplication programming interface\n5\nImplementations\nThe POSIX standard defines an API that allows a wide range of common computing functions to be written in a way\nsuch that they may operate on many different systems (Mac OS X, and various Berkeley Software Distributions\n(BSDs) implement this interface); however, making use of this requires re-compiling for each platform. A\ncompatible API, on the other hand, allows compiled object code to function without any changes to the system\nimplementing that API. This is beneficial to both software providers (where they may distribute existing software on\nnew systems without producing and distributing upgrades) and users (where they may install older software on their\nnew systems without purchasing upgrades), although this generally requires that various software libraries\nimplement the necessary APIs as well.\nMicrosoft has shown a strong commitment to a backward compatible API, particularly within their Windows API\n(Win32) library, such that older applications may run on newer versions of Windows using an executable-specific\nsetting called \"Compatibility Mode\".[8]\nApple Inc. has shown less concern, breaking compatibility or implementing an API in a slower \"emulation mode\";\nthis allows greater freedom in development, at the cost of making older software obsolete.\nAmong Unix-like operating systems, there are many related but incompatible operating systems running on a\ncommon hardware platform (particularly Intel 80386-compatible systems). There have been several attempts to\nstandardize the API such that software vendors may distribute one binary application for all these systems; however,\nto date, none of these have met with much success. The Linux Standard Base is attempting to do this for the Linux\nplatform, while many of the BSD Unixes, such as FreeBSD, NetBSD, and OpenBSD, implement various levels of\nAPI compatibility for both backward compatibility (allowing programs written for older versions to run on newer\ndistributions of the system) and cross-platform compatibility (allowing execution of foreign code without\nrecompiling).\nRelease policies\nThe two options for releasing API are:\n1.Protecting information on APIs from the general public. For example, Sony used to make its official PlayStation\n2 API available only to licensed PlayStation developers. This enabled Sony to control who wrote PlayStation 2\ngames. This gives companies quality control privileges and can provide them with potential licensing revenue\nstreams.\n2.Making APIs freely available. For example, Microsoft makes the Microsoft Windows API public, and Apple\nreleases its APIs Carbon and Cocoa, so that software can be written for their platforms.\nA mix of the two behaviors can be used as well.\nAPIs and Copyrights\nIn 2010 Oracle sued Google for having distributed a new implementation of Java embedded in the Android operating\nsystem.[9] The litigation concerns also the fact that Google did not acquire any permission to reproduce the Java API.\nInstead a similar permission was given to the OpenJDK project. However, Hon. William Alsup ruled on May 31,\n2012, that APIs cannot be copyrighted.\nAPI examples\n\u2022ASPI for SCSI device interfacing\n\u2022Carbon and Cocoa for the Macintosh\n\u2022DirectX for Microsoft Windows\n\u2022\u2022EHLLAPI\n\npage_label: 4\nfile_path: test\\regression\\regression_test006\\W120623A.pdf\n\nApplication programming interface\n4\nthe APIs of a given language cannot be used in other languages, unless the function calls are wrapped with specific\nadaptation libraries.\nObject API and protocols\nAn object API can prescribe a specific object exchange format, an object exchange protocol can define a way to\ntransfer the same kind of information in a message sent to a remote system.\nWhen a message is exchanged via a protocol between two different platforms using objects on both sides, the object\nin a programming language can be transformed (marshalled and unmarshalled) in an object in a remote and different\nlanguage: so, e.g., a program written in Java invokes a service via SOAP or IIOP written in C# both programs use\nAPIs for remote invocation (each locally to the machine where they are working) to (remotely) exchange\ninformation that they both convert from/to an object in local memory.\nInstead when a similar object is exchanged via an API local to a single machine the object is effectively exchanged\n(or a reference to it) in memory: e.g. via the memory allocated by a single process, or among multiple processes\nusing shared memory or other sharing techologies like tuple spaces.\nAPI sharing and reuse via virtual machine\nSome languages like those running in a virtual machine (e.g. .NET CLI compliant languages in the Common\nLanguage Runtime and JVM compliant languages in the Java Virtual Machine) can share APIs.\nIn this case the virtual machine enables the language interoperation thanks to the common denominator of the virtual\nmachine that abstracts from the specific language using an intermediate bytecode and its language binding.\nHence this approach maximizes the code reuse potential for all the existing libraries and related APIs.\nWeb APIs\nWhen used in the context of web development, an API is typically defined as a set of Hypertext Transfer Protocol\n(HTTP) request messages, along with a definition of the structure of response messages, which is usually in an\nExtensible Markup Language (XML) or JavaScript Object Notation (JSON) format. While \"Web API\" is virtually a\nsynonym for web service, the recent trend (so-called Web 2.0) has been moving away from Simple Object Access\nProtocol (SOAP) based services towards more direct Representational State Transfer (REST) style\ncommunications.[5] Web APIs allow the combination of multiple services into new applications known as\nmashups.[6]\nWeb use to share content\nThe practice of publishing APIs has allowed web communities to create an open architecture for sharing content and\ndata between communities and applications. In this way, content that is created in one place can be dynamically\nposted and updated in multiple locations on the web.\n1.Photos can be shared from sites like Flickr and Photobucket to social network sites like Facebook and MySpace.\n2.Content can be embedded, e.g. embedding a presentation from SlideShare on a LinkedIn profile.\n3.Content can be dynamically posted. Sharing live comments made on Twitter with a Facebook account, for\nexample, is enabled by their APIs.\n4.4.Video content can be embedded on sites which are served by another host.\n5.User information can be shared from web communities to outside applications, delivering new functionality to\nthe web community that shares its user data via an open API. One of the best examples of this is the Facebook\nApplication platform. Another is the Open Social platform.[7]\n---------------------\nGiven the context information and not prior knowledge, answer the query.\nQuery: What is the ruling on the copyrightability of APIs?\nAnswer: "}, {"role": "assistant", "content": "In a lawsuit between Oracle and Google, Hon. William Alsup ruled on May 31, 2012, that APIs cannot be copyrighted."}]}
{"messages": [{"role": "system", "content": "You are an expert Q&A system that is trusted around the world.\nAlways answer the query using the provided context information, and not prior knowledge.\nSome rules to follow:\n1. Never directly reference the given context in your answer.\n2. Avoid statements like 'Based on the context, ...' or 'The context information ...' or anything along those lines."}, {"role": "user", "content": "Context information is below.\n---------------------\npage_label: 4\nfile_path: test\\regression\\regression_test006\\W120623A.pdf\n\nApplication programming interface\n4\nthe APIs of a given language cannot be used in other languages, unless the function calls are wrapped with specific\nadaptation libraries.\nObject API and protocols\nAn object API can prescribe a specific object exchange format, an object exchange protocol can define a way to\ntransfer the same kind of information in a message sent to a remote system.\nWhen a message is exchanged via a protocol between two different platforms using objects on both sides, the object\nin a programming language can be transformed (marshalled and unmarshalled) in an object in a remote and different\nlanguage: so, e.g., a program written in Java invokes a service via SOAP or IIOP written in C# both programs use\nAPIs for remote invocation (each locally to the machine where they are working) to (remotely) exchange\ninformation that they both convert from/to an object in local memory.\nInstead when a similar object is exchanged via an API local to a single machine the object is effectively exchanged\n(or a reference to it) in memory: e.g. via the memory allocated by a single process, or among multiple processes\nusing shared memory or other sharing techologies like tuple spaces.\nAPI sharing and reuse via virtual machine\nSome languages like those running in a virtual machine (e.g. .NET CLI compliant languages in the Common\nLanguage Runtime and JVM compliant languages in the Java Virtual Machine) can share APIs.\nIn this case the virtual machine enables the language interoperation thanks to the common denominator of the virtual\nmachine that abstracts from the specific language using an intermediate bytecode and its language binding.\nHence this approach maximizes the code reuse potential for all the existing libraries and related APIs.\nWeb APIs\nWhen used in the context of web development, an API is typically defined as a set of Hypertext Transfer Protocol\n(HTTP) request messages, along with a definition of the structure of response messages, which is usually in an\nExtensible Markup Language (XML) or JavaScript Object Notation (JSON) format. While \"Web API\" is virtually a\nsynonym for web service, the recent trend (so-called Web 2.0) has been moving away from Simple Object Access\nProtocol (SOAP) based services towards more direct Representational State Transfer (REST) style\ncommunications.[5] Web APIs allow the combination of multiple services into new applications known as\nmashups.[6]\nWeb use to share content\nThe practice of publishing APIs has allowed web communities to create an open architecture for sharing content and\ndata between communities and applications. In this way, content that is created in one place can be dynamically\nposted and updated in multiple locations on the web.\n1.Photos can be shared from sites like Flickr and Photobucket to social network sites like Facebook and MySpace.\n2.Content can be embedded, e.g. embedding a presentation from SlideShare on a LinkedIn profile.\n3.Content can be dynamically posted. Sharing live comments made on Twitter with a Facebook account, for\nexample, is enabled by their APIs.\n4.4.Video content can be embedded on sites which are served by another host.\n5.User information can be shared from web communities to outside applications, delivering new functionality to\nthe web community that shares its user data via an open API. One of the best examples of this is the Facebook\nApplication platform. Another is the Open Social platform.[7]\n\npage_label: 5\nfile_path: test\\regression\\regression_test006\\W120623A.pdf\n\nApplication programming interface\n5\nImplementations\nThe POSIX standard defines an API that allows a wide range of common computing functions to be written in a way\nsuch that they may operate on many different systems (Mac OS X, and various Berkeley Software Distributions\n(BSDs) implement this interface); however, making use of this requires re-compiling for each platform. A\ncompatible API, on the other hand, allows compiled object code to function without any changes to the system\nimplementing that API. This is beneficial to both software providers (where they may distribute existing software on\nnew systems without producing and distributing upgrades) and users (where they may install older software on their\nnew systems without purchasing upgrades), although this generally requires that various software libraries\nimplement the necessary APIs as well.\nMicrosoft has shown a strong commitment to a backward compatible API, particularly within their Windows API\n(Win32) library, such that older applications may run on newer versions of Windows using an executable-specific\nsetting called \"Compatibility Mode\".[8]\nApple Inc. has shown less concern, breaking compatibility or implementing an API in a slower \"emulation mode\";\nthis allows greater freedom in development, at the cost of making older software obsolete.\nAmong Unix-like operating systems, there are many related but incompatible operating systems running on a\ncommon hardware platform (particularly Intel 80386-compatible systems). There have been several attempts to\nstandardize the API such that software vendors may distribute one binary application for all these systems; however,\nto date, none of these have met with much success. The Linux Standard Base is attempting to do this for the Linux\nplatform, while many of the BSD Unixes, such as FreeBSD, NetBSD, and OpenBSD, implement various levels of\nAPI compatibility for both backward compatibility (allowing programs written for older versions to run on newer\ndistributions of the system) and cross-platform compatibility (allowing execution of foreign code without\nrecompiling).\nRelease policies\nThe two options for releasing API are:\n1.Protecting information on APIs from the general public. For example, Sony used to make its official PlayStation\n2 API available only to licensed PlayStation developers. This enabled Sony to control who wrote PlayStation 2\ngames. This gives companies quality control privileges and can provide them with potential licensing revenue\nstreams.\n2.Making APIs freely available. For example, Microsoft makes the Microsoft Windows API public, and Apple\nreleases its APIs Carbon and Cocoa, so that software can be written for their platforms.\nA mix of the two behaviors can be used as well.\nAPIs and Copyrights\nIn 2010 Oracle sued Google for having distributed a new implementation of Java embedded in the Android operating\nsystem.[9] The litigation concerns also the fact that Google did not acquire any permission to reproduce the Java API.\nInstead a similar permission was given to the OpenJDK project. However, Hon. William Alsup ruled on May 31,\n2012, that APIs cannot be copyrighted.\nAPI examples\n\u2022ASPI for SCSI device interfacing\n\u2022Carbon and Cocoa for the Macintosh\n\u2022DirectX for Microsoft Windows\n\u2022\u2022EHLLAPI\n---------------------\nGiven the context information and not prior knowledge, answer the query.\nQuery: Can you provide examples of different APIs mentioned in the document?\nAnswer: "}, {"role": "assistant", "content": "Yes, the document mentions several examples of APIs. These include ASPI for SCSI device interfacing, Carbon and Cocoa for the Macintosh, DirectX for Microsoft Windows, and EHLLAPI."}]}
{"messages": [{"role": "system", "content": "You are an expert Q&A system that is trusted around the world.\nAlways answer the query using the provided context information, and not prior knowledge.\nSome rules to follow:\n1. Never directly reference the given context in your answer.\n2. Avoid statements like 'Based on the context, ...' or 'The context information ...' or anything along those lines."}, {"role": "user", "content": "Context information is below.\n---------------------\npage_label: 7\nfile_path: test\\regression\\regression_test006\\W120623A.pdf\n\nApplication programming interface\n7\nExternal links\n\u2022What is an API? Your Guide to the Internet (R)evolution (http:/ / www. 3scale. net/ wp-content/ uploads/ 2012/\n06/ What-is-an-API-1. 0. pdf)\n\u2022How to design a good API and why it matters (http:/ / lcsd05. cs. tamu. edu/ slides/ keynote. pdf)\n\u2022How to Write an API (http:/ / www. lior. ca/ publications/ api_design. pdf)\n\u2022LMAX Application Programming Interface (API) technology (http:/ / www. lmax. com/ trading-tech/ api-trading)\n\npage_label: 6\nfile_path: test\\regression\\regression_test006\\W120623A.pdf\n\nApplication programming interface\n6\n\u2022\u2022Java APIs\n\u2022ODBC for Microsoft Windows\n\u2022OpenAL cross-platform sound API\n\u2022OpenCL cross-platform API for general-purpose computing for CPUs & GPUs\n\u2022OpenGL cross-platform graphics API\n\u2022OpenMP API that supports multi-platform shared memory multiprocessing programming in C, C++ and Fortran\non many architectures, including Unix and Microsoft Windows platforms.\n\u2022Simple DirectMedia Layer (SDL)\n\u2022Talend integrates its data management with BPM from Bonita Open Solution\nLanguage bindings and interface generators\nAPIs that are intended to be used by more than one high-level programming language often provide, or are\naugmented with, facilities to automatically map the API to features (syntactic or semantic) that are more natural in\nthose languages. This is known as language binding, and is itself an API. The aim is to encapsulate most of the\nrequired functionality of the API, leaving a \"thin\" layer appropriate to each language.\nBelow are listed some interface generator tools which bind languages to APIs at compile time.\n\u2022SWIG open-source interfaces bindings generator from many languages to many languages (Typically\nCompiled->Scripted)\n\u2022F2PY:[10] Fortran to Python interface generator.\nReferences\n[1]Stoughton, Nick (April 2005). \"Update on Standards\" (https:/ / db. usenix. org/ publications/ login/ 2005-04/ openpdfs/ standards2004. pdf)\n(PDF). USENIX. . Retrieved 2009-06-04.\n[2]Bloch, Joshua (2008). \"Effective Java (2nd edition)\" (http:/ / java. sun. com/ docs/ books/ effective/ ). Addison-Wesley. pp.\u00a0259\u2013312.\nISBN\u00a0978-0-321-35668-0. .\n[3]Fowler, Martin. \"Inversion Of Control\" (http:/ / martinfowler. com/ bliki/ InversionOfControl. html). .\n[4]\"API vs Protocol\" (http:/ / c2. com/ cgi/ wiki?ApiVsProtocol). .\n[5]Benslimane, Djamal; Schahram Dustdar, and Amit Sheth (2008). \"Services Mashups: The New Generation of Web Applications\" (http:/ /\ndsonline. computer. org/ portal/ site/ dsonline/ menuitem. 9ed3d9924aeb0dcd82ccc6716bbe36ec/ index. jsp?& pName=dso_level1&\npath=dsonline/ 2008/ 09& file=w5gei. xml& xsl=article. xsl). IEEE Internet Computing, vol. 12, no. 5. Institute of Electrical and Electronics\nEngineers. pp.\u00a013\u201315. .\n[6]Niccolai, James (2008-04-23), \"So What Is an Enterprise Mashup, Anyway?\" (http:/ / www. pcworld. com/ businesscenter/ article/ 145039/\nso_what_is_an_enterprise_mashup_anyway. html), PC World,\n[7][7]\"Dynamic Community content via APIs\". October 26, 2009.\n[8]Microsoft (October 2001). \"Run Older Programs On Windows XP\" (http:/ / www. microsoft. com/ windowsxp/ using/ helpandsupport/\nlearnmore/ appcompat. mspx). Microsoft. p.\u00a04. .\n[9]\"Oracle and the End of Programming As We Know It\" (http:/ / www. drdobbs. com/ jvm/ 232901227). DrDobbs. 2012-05-01. . Retrieved\n2012-05-09.\n[10]\"F2PY.org\" (http:/ / www. f2py. org/ ). F2PY.org. . Retrieved 2011-12-18.\n---------------------\nGiven the context information and not prior knowledge, answer the query.\nQuery: What is the file type of the document?\nAnswer: "}, {"role": "assistant", "content": "The document is a PDF file."}]}
{"messages": [{"role": "system", "content": "You are an expert Q&A system that is trusted around the world.\nAlways answer the query using the provided context information, and not prior knowledge.\nSome rules to follow:\n1. Never directly reference the given context in your answer.\n2. Avoid statements like 'Based on the context, ...' or 'The context information ...' or anything along those lines."}, {"role": "user", "content": "Context information is below.\n---------------------\npage_label: 8\nfile_path: test\\regression\\regression_test006\\W120623A.pdf\n\nArticle Sources and Contributors\n8\nArticle Sources and Contributors\nApplication programming interface \u00a0Source: http://en.wikipedia.org/w/index.php?oldid=498937988 \u00a0Contributors: 213.121.101.xxx, 24.108.233.xxx, 24.93.53.xxx, 4483APK, 64.105.112.xxx,\n90, Aa1bb2cc3dd4ee5, AaronL, Aarsalankhalid, AbdulKhaaliq2, Adah, Addshore, Ae-a, Aeons, Aeternus, Ahunt, Ahzahraee, Airplaneman, Alan d, Alex43223, Altaf.attari86, Altenmann,\nAmanuse, Ancheta Wis, Andre Engels, Andremi, Andres, Andrey86, Andy16666, Anteru, Apoltix, Arindra r, Arjayay, Arthur Davies Sikopo, Aruton, Ashamerie, Asydwaters, Atheken, Atreys,\nAude, Auntof6, Avk15gt, Awg1010, Bamyers99, Bdesham, Beano, Bearcat, Betterusername, Bevo, Bhat sudha, Bikingviking, Blackcats, Bobo192, Boing! said Zebedee, Bookiewookie, Borgx,\nBoyprose, Brianski, Bryan Derksen, BryanG, Bryanmonroe, CYD, Calton, CanisRufus, Capricorn42, Chadsmith729, Chameleon, Chealer, Chicago god, Chiefcoolbreeze, Chituokol1,\nClaudiaHetman, CloudNine, Colonoh, Consult.kirthi, Conversion script, Coolbloke94, Courcelles, Cybercobra, Cynical, DShantz, Damian Yerrick, Daniduc, Danja, Darklight, Davejohnsan,\nDavemck, David Gerard, Davron, Dawidl, DeeKay64, Deepugn, Dennislees, Derek farn, Detnos, Diego Moya, Diomidis Spinellis, Dipskinny, Discospinster, Dmarquard, Download, Dqpeck, Dr\nMarcus Hill, Dreadstar, Drewmeyers, Dschach, Dsnelling, Dylan620, EVula, Ebessman, Ed Poor, Edcolins, Edwardkerlin, Efa, Egmontaz, Ehn, Elf, Ellmist, Eloquence, Enochlau, Enric Naval,\nEpbr123, Eric Agbozo, Espoo, Excirial, Farrwill, Fieldday-sunday, Fitch, Frap, Freakimus, Frecklefoot, FrummerThanThou, Funvill, F\u00e6, GRAHAMUK, Gak, GeoffPurchase, Giftlite, Graham87,\nGreensburger, Griznant, HUB, Hadal, Harryboyles, Hashar, HenkeB, Heraclius, Hfastedge, Hmains, Humu, Husond, InShaneee, Infinitycomeo, Itai, Ivan007, Ixfd64, Izno, JHunterJ, JLaTondre,\nJWSchmidt, Jakuzem, JamesMLane, Jbolden1517, Jengod, Jerryobject, Jesse V. Jidanni, Jitse Niesen, Jleedev, Jmclaury, JoeB34, John of Reading, John.n-irl, JohnBlackburne, JulesH, Julien,\nJulienj, K12u, Kbolino, Kernel Saunters, Kichik, Kickin' Da Speaker, Kim Bruning, King of Hearts (old account 2), KnowledgeOfSelf, Kocio, Kurdo777, Landon1980, Lavers, Lee Daniel\nCrocker, Lekshmann, Leoholbel, Liempt, Limbo socrates, Liorma, LizardJr8, Lockeownzj00, Looc4s, Lord Chamberlain, the Renowned, Loren.wilton, Loshsu, Lotje, Lupin, M5, Mac, Mange01,\nManop, Martyn Lovell, Marudubshinki, Materialscientist, Mattknox, Mav, Mbeychok, Meldraft, Mflore4d, Michael Hardy, Michael Hodgson, Michaelas10, Miguel, Mihai cartoaje, Miketwardos,\nMinghong, Minirogue, Miohtama, MoreThanMike, Morg, Mountain,\n\npage_label: 8\nfile_path: test\\regression\\regression_test006\\W120623A.pdf\n\nKim Bruning, King of Hearts (old account 2), KnowledgeOfSelf, Kocio, Kurdo777, Landon1980, Lavers, Lee Daniel\nCrocker, Lekshmann, Leoholbel, Liempt, Limbo socrates, Liorma, LizardJr8, Lockeownzj00, Looc4s, Lord Chamberlain, the Renowned, Loren.wilton, Loshsu, Lotje, Lupin, M5, Mac, Mange01,\nManop, Martyn Lovell, Marudubshinki, Materialscientist, Mattknox, Mav, Mbeychok, Meldraft, Mflore4d, Michael Hardy, Michael Hodgson, Michaelas10, Miguel, Mihai cartoaje, Miketwardos,\nMinghong, Minirogue, Miohtama, MoreThanMike, Morg, Mountain, Mpbaumg, MrOllie, Mrh30, Mshivaram.ie22, Mwarf, Myc2001, Nanshu, Neelix, NewEnglandYankee, Nopetro,\nNotinasnaid, Nsda, Obradovic Goran, Ocean Shores, Ohspite, Old Guard, OlegMarchuk, Oulrij, Oxymoron83, Pascal.Tesson, PaymentVision, Peak, Pearll's sun, Pengo, Pepe.agell, Percede,\nPgimeno, Philip Trueman, Phuzion, Piano non troppo, Plamka, Poweroid, Prari, Pwforaker, Queenmomcat, Quinet, Quux, Qwertyus, Qx2020, Qxz, R'n'B, RJHall, Rackspacecloud, Raise\nexception, Randomalious, RedWolf, Redlentil, Reemrevnivek, Renatko, Rich Farmbrough, RichMorin, Riluve, Rktur, Robert K S, Robneild, Rocastelo, Ronocdh, RoyBoy, Rs rams, Rudyray,\nRwwww, SERIEZ, SQGibbon, ST47, Sakhal, Salvatore Ingala, Sam Korn, Scohil, Scott Ritchie, Seth Nimbosa, Sfmontyo, Shlomif, SimonTrew, SirSandGoblin, Sj, Skeejay, Skysmith, Slady,\nSlurrymaster, SocialRadiusOly, Sodium, Soumyasch, Spencer, Spikey, SqueakBox, Stephenchou0722, SteveBaker, Steven J. Anderson, Suruena, Syvanen, Szajd, T-borg, Ta bu shi da yu,\nTantrumizer, TastyPoutine, Tedickey, Teryx, Teutonic Tamer, The Anome, The Thing That Should Not Be, TheSoundAndTheFury, TheresaWilson, Thiotimoline, Thisisborin9, Tide rolls,\nTijuana Brass, Tony1, Torchiest, Transpar3nt, TrentonLipscomb, Troymccluresf, Tseay11,\n---------------------\nGiven the context information and not prior knowledge, answer the query.\nQuery: When was the document last accessed?\nAnswer: "}, {"role": "assistant", "content": "The context does not provide information on when the document was last accessed."}]}
{"messages": [{"role": "user", "content": "You are an expert Q&A system that strictly operates in two modes when refining existing answers:\n1. **Rewrite** an original answer using the new context.\n2. **Repeat** the original answer if the new context isn't useful.\nNever reference the original answer or context directly in your answer.\nWhen in doubt, just repeat the original answer.New Context: Sj, Skeejay, Skysmith, Slady,\nSlurrymaster, SocialRadiusOly, Sodium, Soumyasch, Spencer, Spikey, SqueakBox, Stephenchou0722, SteveBaker, Steven J. Anderson, Suruena, Syvanen, Szajd, T-borg, Ta bu shi da yu,\nTantrumizer, TastyPoutine, Tedickey, Teryx, Teutonic Tamer, The Anome, The Thing That Should Not Be, TheSoundAndTheFury, TheresaWilson, Thiotimoline, Thisisborin9, Tide rolls,\nTijuana Brass, Tony1, Torchiest, Transpar3nt, TrentonLipscomb, Troymccluresf, Tseay11, Uriyan, Utype, Uzume, Varworld, Vikramtheone, Visvadinu, Vkorpor, Voidxor, WTRiker,\nWaltBusterkeys, Wapcaplet, Wavelength, Whatsnxt, Whitehorse212, WikHead, Willy-os, Wjejskenewr, Wysprgr2005, Xqt, Yaris678, YordanGeorgiev, Yurik, Zachlipton, Zeno Gantner, Zhinz,\nZimZalaBim, Zodon, \uacc4\uc815\uba85\ubb58\ub85c\ud558\uc9c0, 771 anonymous edits\nLicense\nCreative Commons Attribution-Share Alike 3.0 Unported\n//creativecommons.org/licenses/by-sa/3.0/\nQuery: When was the document last accessed?\nOriginal Answer: The context does not provide information on when the document was last accessed.\nNew Answer: "}, {"role": "assistant", "content": "The context does not provide information on when the document was last accessed."}]}
{"messages": [{"role": "system", "content": "You are an expert Q&A system that is trusted around the world.\nAlways answer the query using the provided context information, and not prior knowledge.\nSome rules to follow:\n1. Never directly reference the given context in your answer.\n2. Avoid statements like 'Based on the context, ...' or 'The context information ...' or anything along those lines."}, {"role": "user", "content": "Context information is below.\n---------------------\npage_label: 7\nfile_path: test\\regression\\regression_test006\\W120623A.pdf\n\nApplication programming interface\n7\nExternal links\n\u2022What is an API? Your Guide to the Internet (R)evolution (http:/ / www. 3scale. net/ wp-content/ uploads/ 2012/\n06/ What-is-an-API-1. 0. pdf)\n\u2022How to design a good API and why it matters (http:/ / lcsd05. cs. tamu. edu/ slides/ keynote. pdf)\n\u2022How to Write an API (http:/ / www. lior. ca/ publications/ api_design. pdf)\n\u2022LMAX Application Programming Interface (API) technology (http:/ / www. lmax. com/ trading-tech/ api-trading)\n\npage_label: 4\nfile_path: test\\regression\\regression_test006\\W120623A.pdf\n\nApplication programming interface\n4\nthe APIs of a given language cannot be used in other languages, unless the function calls are wrapped with specific\nadaptation libraries.\nObject API and protocols\nAn object API can prescribe a specific object exchange format, an object exchange protocol can define a way to\ntransfer the same kind of information in a message sent to a remote system.\nWhen a message is exchanged via a protocol between two different platforms using objects on both sides, the object\nin a programming language can be transformed (marshalled and unmarshalled) in an object in a remote and different\nlanguage: so, e.g., a program written in Java invokes a service via SOAP or IIOP written in C# both programs use\nAPIs for remote invocation (each locally to the machine where they are working) to (remotely) exchange\ninformation that they both convert from/to an object in local memory.\nInstead when a similar object is exchanged via an API local to a single machine the object is effectively exchanged\n(or a reference to it) in memory: e.g. via the memory allocated by a single process, or among multiple processes\nusing shared memory or other sharing techologies like tuple spaces.\nAPI sharing and reuse via virtual machine\nSome languages like those running in a virtual machine (e.g. .NET CLI compliant languages in the Common\nLanguage Runtime and JVM compliant languages in the Java Virtual Machine) can share APIs.\nIn this case the virtual machine enables the language interoperation thanks to the common denominator of the virtual\nmachine that abstracts from the specific language using an intermediate bytecode and its language binding.\nHence this approach maximizes the code reuse potential for all the existing libraries and related APIs.\nWeb APIs\nWhen used in the context of web development, an API is typically defined as a set of Hypertext Transfer Protocol\n(HTTP) request messages, along with a definition of the structure of response messages, which is usually in an\nExtensible Markup Language (XML) or JavaScript Object Notation (JSON) format. While \"Web API\" is virtually a\nsynonym for web service, the recent trend (so-called Web 2.0) has been moving away from Simple Object Access\nProtocol (SOAP) based services towards more direct Representational State Transfer (REST) style\ncommunications.[5] Web APIs allow the combination of multiple services into new applications known as\nmashups.[6]\nWeb use to share content\nThe practice of publishing APIs has allowed web communities to create an open architecture for sharing content and\ndata between communities and applications. In this way, content that is created in one place can be dynamically\nposted and updated in multiple locations on the web.\n1.Photos can be shared from sites like Flickr and Photobucket to social network sites like Facebook and MySpace.\n2.Content can be embedded, e.g. embedding a presentation from SlideShare on a LinkedIn profile.\n3.Content can be dynamically posted. Sharing live comments made on Twitter with a Facebook account, for\nexample, is enabled by their APIs.\n4.4.Video content can be embedded on sites which are served by another host.\n5.User information can be shared from web communities to outside applications, delivering new functionality to\nthe web community that shares its user data via an open API. One of the best examples of this is the Facebook\nApplication platform. Another is the Open Social platform.[7]\n---------------------\nGiven the context information and not prior knowledge, answer the query.\nQuery: Provide an external link to a guide on designing a good API.\nAnswer: "}, {"role": "assistant", "content": "You can find a guide on designing a good API at this link: http://lcsd05.cs.tamu.edu/slides/keynote.pdf"}]}
{"messages": [{"role": "system", "content": "You are an expert Q&A system that is trusted around the world.\nAlways answer the query using the provided context information, and not prior knowledge.\nSome rules to follow:\n1. Never directly reference the given context in your answer.\n2. Avoid statements like 'Based on the context, ...' or 'The context information ...' or anything along those lines."}, {"role": "user", "content": "Context information is below.\n---------------------\npage_label: 7\nfile_path: test\\regression\\regression_test006\\W120623A.pdf\n\nApplication programming interface\n7\nExternal links\n\u2022What is an API? Your Guide to the Internet (R)evolution (http:/ / www. 3scale. net/ wp-content/ uploads/ 2012/\n06/ What-is-an-API-1. 0. pdf)\n\u2022How to design a good API and why it matters (http:/ / lcsd05. cs. tamu. edu/ slides/ keynote. pdf)\n\u2022How to Write an API (http:/ / www. lior. ca/ publications/ api_design. pdf)\n\u2022LMAX Application Programming Interface (API) technology (http:/ / www. lmax. com/ trading-tech/ api-trading)\n\npage_label: 8\nfile_path: test\\regression\\regression_test006\\W120623A.pdf\n\nArticle Sources and Contributors\n8\nArticle Sources and Contributors\nApplication programming interface \u00a0Source: http://en.wikipedia.org/w/index.php?oldid=498937988 \u00a0Contributors: 213.121.101.xxx, 24.108.233.xxx, 24.93.53.xxx, 4483APK, 64.105.112.xxx,\n90, Aa1bb2cc3dd4ee5, AaronL, Aarsalankhalid, AbdulKhaaliq2, Adah, Addshore, Ae-a, Aeons, Aeternus, Ahunt, Ahzahraee, Airplaneman, Alan d, Alex43223, Altaf.attari86, Altenmann,\nAmanuse, Ancheta Wis, Andre Engels, Andremi, Andres, Andrey86, Andy16666, Anteru, Apoltix, Arindra r, Arjayay, Arthur Davies Sikopo, Aruton, Ashamerie, Asydwaters, Atheken, Atreys,\nAude, Auntof6, Avk15gt, Awg1010, Bamyers99, Bdesham, Beano, Bearcat, Betterusername, Bevo, Bhat sudha, Bikingviking, Blackcats, Bobo192, Boing! said Zebedee, Bookiewookie, Borgx,\nBoyprose, Brianski, Bryan Derksen, BryanG, Bryanmonroe, CYD, Calton, CanisRufus, Capricorn42, Chadsmith729, Chameleon, Chealer, Chicago god, Chiefcoolbreeze, Chituokol1,\nClaudiaHetman, CloudNine, Colonoh, Consult.kirthi, Conversion script, Coolbloke94, Courcelles, Cybercobra, Cynical, DShantz, Damian Yerrick, Daniduc, Danja, Darklight, Davejohnsan,\nDavemck, David Gerard, Davron, Dawidl, DeeKay64, Deepugn, Dennislees, Derek farn, Detnos, Diego Moya, Diomidis Spinellis, Dipskinny, Discospinster, Dmarquard, Download, Dqpeck, Dr\nMarcus Hill, Dreadstar, Drewmeyers, Dschach, Dsnelling, Dylan620, EVula, Ebessman, Ed Poor, Edcolins, Edwardkerlin, Efa, Egmontaz, Ehn, Elf, Ellmist, Eloquence, Enochlau, Enric Naval,\nEpbr123, Eric Agbozo, Espoo, Excirial, Farrwill, Fieldday-sunday, Fitch, Frap, Freakimus, Frecklefoot, FrummerThanThou, Funvill, F\u00e6, GRAHAMUK, Gak, GeoffPurchase, Giftlite, Graham87,\nGreensburger, Griznant, HUB, Hadal, Harryboyles, Hashar, HenkeB, Heraclius, Hfastedge, Hmains, Humu, Husond, InShaneee, Infinitycomeo, Itai, Ivan007, Ixfd64, Izno, JHunterJ, JLaTondre,\nJWSchmidt, Jakuzem, JamesMLane, Jbolden1517, Jengod, Jerryobject, Jesse V. Jidanni, Jitse Niesen, Jleedev, Jmclaury, JoeB34, John of Reading, John.n-irl, JohnBlackburne, JulesH, Julien,\nJulienj, K12u, Kbolino, Kernel Saunters, Kichik, Kickin' Da Speaker, Kim Bruning, King of Hearts (old account 2), KnowledgeOfSelf, Kocio, Kurdo777, Landon1980, Lavers, Lee Daniel\nCrocker, Lekshmann, Leoholbel, Liempt, Limbo socrates, Liorma, LizardJr8, Lockeownzj00, Looc4s, Lord Chamberlain, the Renowned, Loren.wilton, Loshsu, Lotje, Lupin, M5, Mac, Mange01,\nManop, Martyn Lovell, Marudubshinki, Materialscientist, Mattknox, Mav, Mbeychok, Meldraft, Mflore4d, Michael Hardy, Michael Hodgson, Michaelas10, Miguel, Mihai cartoaje, Miketwardos,\nMinghong, Minirogue, Miohtama, MoreThanMike, Morg, Mountain,\n---------------------\nGiven the context information and not prior knowledge, answer the query.\nQuery: What is the file size of the document?\nAnswer: "}, {"role": "assistant", "content": "The context information does not provide details about the file size of the document."}]}
{"messages": [{"role": "system", "content": "You are an expert Q&A system that is trusted around the world.\nAlways answer the query using the provided context information, and not prior knowledge.\nSome rules to follow:\n1. Never directly reference the given context in your answer.\n2. Avoid statements like 'Based on the context, ...' or 'The context information ...' or anything along those lines."}, {"role": "user", "content": "Context information is below.\n---------------------\npage_label: 8\nfile_path: test\\regression\\regression_test006\\W120623A.pdf\n\nKim Bruning, King of Hearts (old account 2), KnowledgeOfSelf, Kocio, Kurdo777, Landon1980, Lavers, Lee Daniel\nCrocker, Lekshmann, Leoholbel, Liempt, Limbo socrates, Liorma, LizardJr8, Lockeownzj00, Looc4s, Lord Chamberlain, the Renowned, Loren.wilton, Loshsu, Lotje, Lupin, M5, Mac, Mange01,\nManop, Martyn Lovell, Marudubshinki, Materialscientist, Mattknox, Mav, Mbeychok, Meldraft, Mflore4d, Michael Hardy, Michael Hodgson, Michaelas10, Miguel, Mihai cartoaje, Miketwardos,\nMinghong, Minirogue, Miohtama, MoreThanMike, Morg, Mountain, Mpbaumg, MrOllie, Mrh30, Mshivaram.ie22, Mwarf, Myc2001, Nanshu, Neelix, NewEnglandYankee, Nopetro,\nNotinasnaid, Nsda, Obradovic Goran, Ocean Shores, Ohspite, Old Guard, OlegMarchuk, Oulrij, Oxymoron83, Pascal.Tesson, PaymentVision, Peak, Pearll's sun, Pengo, Pepe.agell, Percede,\nPgimeno, Philip Trueman, Phuzion, Piano non troppo, Plamka, Poweroid, Prari, Pwforaker, Queenmomcat, Quinet, Quux, Qwertyus, Qx2020, Qxz, R'n'B, RJHall, Rackspacecloud, Raise\nexception, Randomalious, RedWolf, Redlentil, Reemrevnivek, Renatko, Rich Farmbrough, RichMorin, Riluve, Rktur, Robert K S, Robneild, Rocastelo, Ronocdh, RoyBoy, Rs rams, Rudyray,\nRwwww, SERIEZ, SQGibbon, ST47, Sakhal, Salvatore Ingala, Sam Korn, Scohil, Scott Ritchie, Seth Nimbosa, Sfmontyo, Shlomif, SimonTrew, SirSandGoblin, Sj, Skeejay, Skysmith, Slady,\nSlurrymaster, SocialRadiusOly, Sodium, Soumyasch, Spencer, Spikey, SqueakBox, Stephenchou0722, SteveBaker, Steven J. Anderson, Suruena, Syvanen, Szajd, T-borg, Ta bu shi da yu,\nTantrumizer, TastyPoutine, Tedickey, Teryx, Teutonic Tamer, The Anome, The Thing That Should Not Be, TheSoundAndTheFury, TheresaWilson, Thiotimoline, Thisisborin9, Tide rolls,\nTijuana Brass, Tony1, Torchiest, Transpar3nt, TrentonLipscomb, Troymccluresf, Tseay11, Uriyan, Utype, Uzume, Varworld, Vikramtheone, Visvadinu, Vkorpor, Voidxor, WTRiker,\nWaltBusterkeys, Wapcaplet, Wavelength, Whatsnxt, Whitehorse212, WikHead, Willy-os, Wjejskenewr, Wysprgr2005, Xqt, Yaris678, YordanGeorgiev, Yurik, Zachlipton, Zeno Gantner, Zhinz,\nZimZalaBim, Zodon, \uacc4\uc815\uba85\ubb58\ub85c\ud558\uc9c0, 771 anonymous edits\nLicense\nCreative Commons Attribution-Share Alike 3.0 Unported\n//creativecommons.org/licenses/by-sa/3.0/\n\npage_label: 8\nfile_path: test\\regression\\regression_test006\\W120623A.pdf\n\nArticle Sources and Contributors\n8\nArticle Sources and Contributors\nApplication programming interface \u00a0Source: http://en.wikipedia.org/w/index.php?oldid=498937988 \u00a0Contributors: 213.121.101.xxx, 24.108.233.xxx, 24.93.53.xxx, 4483APK, 64.105.112.xxx,\n90, Aa1bb2cc3dd4ee5, AaronL, Aarsalankhalid, AbdulKhaaliq2, Adah, Addshore, Ae-a, Aeons, Aeternus, Ahunt, Ahzahraee, Airplaneman, Alan d, Alex43223, Altaf.attari86, Altenmann,\nAmanuse, Ancheta Wis, Andre Engels, Andremi, Andres, Andrey86, Andy16666, Anteru, Apoltix, Arindra r, Arjayay, Arthur Davies Sikopo, Aruton, Ashamerie, Asydwaters, Atheken, Atreys,\nAude, Auntof6, Avk15gt, Awg1010, Bamyers99, Bdesham, Beano, Bearcat, Betterusername, Bevo, Bhat sudha, Bikingviking, Blackcats, Bobo192, Boing! said Zebedee, Bookiewookie, Borgx,\nBoyprose, Brianski, Bryan Derksen, BryanG, Bryanmonroe, CYD, Calton, CanisRufus, Capricorn42, Chadsmith729, Chameleon, Chealer, Chicago god, Chiefcoolbreeze, Chituokol1,\nClaudiaHetman, CloudNine, Colonoh, Consult.kirthi, Conversion script, Coolbloke94, Courcelles, Cybercobra, Cynical, DShantz, Damian Yerrick, Daniduc, Danja, Darklight, Davejohnsan,\nDavemck, David Gerard, Davron, Dawidl, DeeKay64, Deepugn, Dennislees, Derek farn, Detnos, Diego Moya, Diomidis Spinellis, Dipskinny, Discospinster, Dmarquard, Download, Dqpeck, Dr\nMarcus Hill, Dreadstar, Drewmeyers, Dschach, Dsnelling, Dylan620, EVula, Ebessman, Ed Poor, Edcolins, Edwardkerlin, Efa, Egmontaz, Ehn, Elf, Ellmist, Eloquence, Enochlau, Enric Naval,\nEpbr123, Eric Agbozo, Espoo, Excirial, Farrwill, Fieldday-sunday, Fitch, Frap, Freakimus, Frecklefoot, FrummerThanThou, Funvill, F\u00e6, GRAHAMUK, Gak, GeoffPurchase, Giftlite, Graham87,\nGreensburger, Griznant, HUB, Hadal, Harryboyles, Hashar, HenkeB, Heraclius, Hfastedge, Hmains, Humu, Husond, InShaneee, Infinitycomeo, Itai, Ivan007, Ixfd64, Izno, JHunterJ, JLaTondre,\nJWSchmidt, Jakuzem, JamesMLane, Jbolden1517, Jengod, Jerryobject, Jesse V. Jidanni, Jitse Niesen, Jleedev, Jmclaury, JoeB34, John of Reading, John.n-irl, JohnBlackburne, JulesH, Julien,\nJulienj, K12u, Kbolino, Kernel Saunters, Kichik, Kickin' Da Speaker, Kim Bruning, King of Hearts (old account 2), KnowledgeOfSelf, Kocio, Kurdo777, Landon1980, Lavers, Lee\n---------------------\nGiven the context information and not prior knowledge, answer the query.\nQuery: What is the creation date of the document?\nAnswer: "}, {"role": "assistant", "content": "The context information does not provide a creation date for the document."}]}
{"messages": [{"role": "user", "content": "You are an expert Q&A system that strictly operates in two modes when refining existing answers:\n1. **Rewrite** an original answer using the new context.\n2. **Repeat** the original answer if the new context isn't useful.\nNever reference the original answer or context directly in your answer.\nWhen in doubt, just repeat the original answer.New Context: Husond, InShaneee, Infinitycomeo, Itai, Ivan007, Ixfd64, Izno, JHunterJ, JLaTondre,\nJWSchmidt, Jakuzem, JamesMLane, Jbolden1517, Jengod, Jerryobject, Jesse V. Jidanni, Jitse Niesen, Jleedev, Jmclaury, JoeB34, John of Reading, John.n-irl, JohnBlackburne, JulesH, Julien,\nJulienj, K12u, Kbolino, Kernel Saunters, Kichik, Kickin' Da Speaker, Kim Bruning, King of Hearts (old account 2), KnowledgeOfSelf, Kocio, Kurdo777, Landon1980, Lavers, Lee Daniel\nCrocker, Lekshmann, Leoholbel, Liempt, Limbo socrates, Liorma, LizardJr8, Lockeownzj00, Looc4s, Lord Chamberlain, the Renowned, Loren.wilton, Loshsu, Lotje, Lupin, M5, Mac, Mange01,\nManop, Martyn Lovell, Marudubshinki, Materialscientist, Mattknox, Mav, Mbeychok, Meldraft, Mflore4d, Michael Hardy, Michael Hodgson, Michaelas10, Miguel, Mihai cartoaje, Miketwardos,\nMinghong, Minirogue, Miohtama, MoreThanMike, Morg, Mountain,\nQuery: What is the creation date of the document?\nOriginal Answer: The context information does not provide a creation date for the document.\nNew Answer: "}, {"role": "assistant", "content": "The context information does not provide a creation date for the document."}]}
{"messages": [{"role": "system", "content": "You are an expert Q&A system that is trusted around the world.\nAlways answer the query using the provided context information, and not prior knowledge.\nSome rules to follow:\n1. Never directly reference the given context in your answer.\n2. Avoid statements like 'Based on the context, ...' or 'The context information ...' or anything along those lines."}, {"role": "user", "content": "Context information is below.\n---------------------\npage_label: 7\nfile_path: test\\regression\\regression_test006\\W120623A.pdf\n\nApplication programming interface\n7\nExternal links\n\u2022What is an API? Your Guide to the Internet (R)evolution (http:/ / www. 3scale. net/ wp-content/ uploads/ 2012/\n06/ What-is-an-API-1. 0. pdf)\n\u2022How to design a good API and why it matters (http:/ / lcsd05. cs. tamu. edu/ slides/ keynote. pdf)\n\u2022How to Write an API (http:/ / www. lior. ca/ publications/ api_design. pdf)\n\u2022LMAX Application Programming Interface (API) technology (http:/ / www. lmax. com/ trading-tech/ api-trading)\n\npage_label: 4\nfile_path: test\\regression\\regression_test006\\W120623A.pdf\n\nApplication programming interface\n4\nthe APIs of a given language cannot be used in other languages, unless the function calls are wrapped with specific\nadaptation libraries.\nObject API and protocols\nAn object API can prescribe a specific object exchange format, an object exchange protocol can define a way to\ntransfer the same kind of information in a message sent to a remote system.\nWhen a message is exchanged via a protocol between two different platforms using objects on both sides, the object\nin a programming language can be transformed (marshalled and unmarshalled) in an object in a remote and different\nlanguage: so, e.g., a program written in Java invokes a service via SOAP or IIOP written in C# both programs use\nAPIs for remote invocation (each locally to the machine where they are working) to (remotely) exchange\ninformation that they both convert from/to an object in local memory.\nInstead when a similar object is exchanged via an API local to a single machine the object is effectively exchanged\n(or a reference to it) in memory: e.g. via the memory allocated by a single process, or among multiple processes\nusing shared memory or other sharing techologies like tuple spaces.\nAPI sharing and reuse via virtual machine\nSome languages like those running in a virtual machine (e.g. .NET CLI compliant languages in the Common\nLanguage Runtime and JVM compliant languages in the Java Virtual Machine) can share APIs.\nIn this case the virtual machine enables the language interoperation thanks to the common denominator of the virtual\nmachine that abstracts from the specific language using an intermediate bytecode and its language binding.\nHence this approach maximizes the code reuse potential for all the existing libraries and related APIs.\nWeb APIs\nWhen used in the context of web development, an API is typically defined as a set of Hypertext Transfer Protocol\n(HTTP) request messages, along with a definition of the structure of response messages, which is usually in an\nExtensible Markup Language (XML) or JavaScript Object Notation (JSON) format. While \"Web API\" is virtually a\nsynonym for web service, the recent trend (so-called Web 2.0) has been moving away from Simple Object Access\nProtocol (SOAP) based services towards more direct Representational State Transfer (REST) style\ncommunications.[5] Web APIs allow the combination of multiple services into new applications known as\nmashups.[6]\nWeb use to share content\nThe practice of publishing APIs has allowed web communities to create an open architecture for sharing content and\ndata between communities and applications. In this way, content that is created in one place can be dynamically\nposted and updated in multiple locations on the web.\n1.Photos can be shared from sites like Flickr and Photobucket to social network sites like Facebook and MySpace.\n2.Content can be embedded, e.g. embedding a presentation from SlideShare on a LinkedIn profile.\n3.Content can be dynamically posted. Sharing live comments made on Twitter with a Facebook account, for\nexample, is enabled by their APIs.\n4.4.Video content can be embedded on sites which are served by another host.\n5.User information can be shared from web communities to outside applications, delivering new functionality to\nthe web community that shares its user data via an open API. One of the best examples of this is the Facebook\nApplication platform. Another is the Open Social platform.[7]\n---------------------\nGiven the context information and not prior knowledge, answer the query.\nQuery: Provide an external link to a resource on writing an API.\nAnswer: "}, {"role": "assistant", "content": "One resource on writing an API can be found at this link: http://www.lior.ca/publications/api_design.pdf."}]}
{"messages": [{"role": "system", "content": "You are an expert Q&A system that is trusted around the world.\nAlways answer the query using the provided context information, and not prior knowledge.\nSome rules to follow:\n1. Never directly reference the given context in your answer.\n2. Avoid statements like 'Based on the context, ...' or 'The context information ...' or anything along those lines."}, {"role": "user", "content": "Context information is below.\n---------------------\npage_label: 8\nfile_path: test\\regression\\regression_test006\\W120623A.pdf\n\nKim Bruning, King of Hearts (old account 2), KnowledgeOfSelf, Kocio, Kurdo777, Landon1980, Lavers, Lee Daniel\nCrocker, Lekshmann, Leoholbel, Liempt, Limbo socrates, Liorma, LizardJr8, Lockeownzj00, Looc4s, Lord Chamberlain, the Renowned, Loren.wilton, Loshsu, Lotje, Lupin, M5, Mac, Mange01,\nManop, Martyn Lovell, Marudubshinki, Materialscientist, Mattknox, Mav, Mbeychok, Meldraft, Mflore4d, Michael Hardy, Michael Hodgson, Michaelas10, Miguel, Mihai cartoaje, Miketwardos,\nMinghong, Minirogue, Miohtama, MoreThanMike, Morg, Mountain, Mpbaumg, MrOllie, Mrh30, Mshivaram.ie22, Mwarf, Myc2001, Nanshu, Neelix, NewEnglandYankee, Nopetro,\nNotinasnaid, Nsda, Obradovic Goran, Ocean Shores, Ohspite, Old Guard, OlegMarchuk, Oulrij, Oxymoron83, Pascal.Tesson, PaymentVision, Peak, Pearll's sun, Pengo, Pepe.agell, Percede,\nPgimeno, Philip Trueman, Phuzion, Piano non troppo, Plamka, Poweroid, Prari, Pwforaker, Queenmomcat, Quinet, Quux, Qwertyus, Qx2020, Qxz, R'n'B, RJHall, Rackspacecloud, Raise\nexception, Randomalious, RedWolf, Redlentil, Reemrevnivek, Renatko, Rich Farmbrough, RichMorin, Riluve, Rktur, Robert K S, Robneild, Rocastelo, Ronocdh, RoyBoy, Rs rams, Rudyray,\nRwwww, SERIEZ, SQGibbon, ST47, Sakhal, Salvatore Ingala, Sam Korn, Scohil, Scott Ritchie, Seth Nimbosa, Sfmontyo, Shlomif, SimonTrew, SirSandGoblin, Sj, Skeejay, Skysmith, Slady,\nSlurrymaster, SocialRadiusOly, Sodium, Soumyasch, Spencer, Spikey, SqueakBox, Stephenchou0722, SteveBaker, Steven J. Anderson, Suruena, Syvanen, Szajd, T-borg, Ta bu shi da yu,\nTantrumizer, TastyPoutine, Tedickey, Teryx, Teutonic Tamer, The Anome, The Thing That Should Not Be, TheSoundAndTheFury, TheresaWilson, Thiotimoline, Thisisborin9, Tide rolls,\nTijuana Brass, Tony1, Torchiest, Transpar3nt, TrentonLipscomb, Troymccluresf, Tseay11, Uriyan, Utype, Uzume, Varworld, Vikramtheone, Visvadinu, Vkorpor, Voidxor, WTRiker,\nWaltBusterkeys, Wapcaplet, Wavelength, Whatsnxt, Whitehorse212, WikHead, Willy-os, Wjejskenewr, Wysprgr2005, Xqt, Yaris678, YordanGeorgiev, Yurik, Zachlipton, Zeno Gantner, Zhinz,\nZimZalaBim, Zodon, \uacc4\uc815\uba85\ubb58\ub85c\ud558\uc9c0, 771 anonymous edits\nLicense\nCreative Commons Attribution-Share Alike 3.0 Unported\n//creativecommons.org/licenses/by-sa/3.0/\n\npage_label: 8\nfile_path: test\\regression\\regression_test006\\W120623A.pdf\n\nArticle Sources and Contributors\n8\nArticle Sources and Contributors\nApplication programming interface \u00a0Source: http://en.wikipedia.org/w/index.php?oldid=498937988 \u00a0Contributors: 213.121.101.xxx, 24.108.233.xxx, 24.93.53.xxx, 4483APK, 64.105.112.xxx,\n90, Aa1bb2cc3dd4ee5, AaronL, Aarsalankhalid, AbdulKhaaliq2, Adah, Addshore, Ae-a, Aeons, Aeternus, Ahunt, Ahzahraee, Airplaneman, Alan d, Alex43223, Altaf.attari86, Altenmann,\nAmanuse, Ancheta Wis, Andre Engels, Andremi, Andres, Andrey86, Andy16666, Anteru, Apoltix, Arindra r, Arjayay, Arthur Davies Sikopo, Aruton, Ashamerie, Asydwaters, Atheken, Atreys,\nAude, Auntof6, Avk15gt, Awg1010, Bamyers99, Bdesham, Beano, Bearcat, Betterusername, Bevo, Bhat sudha, Bikingviking, Blackcats, Bobo192, Boing! said Zebedee, Bookiewookie, Borgx,\nBoyprose, Brianski, Bryan Derksen, BryanG, Bryanmonroe, CYD, Calton, CanisRufus, Capricorn42, Chadsmith729, Chameleon, Chealer, Chicago god, Chiefcoolbreeze, Chituokol1,\nClaudiaHetman, CloudNine, Colonoh, Consult.kirthi, Conversion script, Coolbloke94, Courcelles, Cybercobra, Cynical, DShantz, Damian Yerrick, Daniduc, Danja, Darklight, Davejohnsan,\nDavemck, David Gerard, Davron, Dawidl, DeeKay64, Deepugn, Dennislees, Derek farn, Detnos, Diego Moya, Diomidis Spinellis, Dipskinny, Discospinster, Dmarquard, Download, Dqpeck, Dr\nMarcus Hill, Dreadstar, Drewmeyers, Dschach, Dsnelling, Dylan620, EVula, Ebessman, Ed Poor, Edcolins, Edwardkerlin, Efa, Egmontaz, Ehn, Elf, Ellmist, Eloquence, Enochlau, Enric Naval,\nEpbr123, Eric Agbozo, Espoo, Excirial, Farrwill, Fieldday-sunday, Fitch, Frap, Freakimus, Frecklefoot, FrummerThanThou, Funvill, F\u00e6, GRAHAMUK, Gak, GeoffPurchase, Giftlite, Graham87,\nGreensburger, Griznant, HUB, Hadal, Harryboyles, Hashar, HenkeB, Heraclius, Hfastedge, Hmains, Humu, Husond, InShaneee, Infinitycomeo, Itai, Ivan007, Ixfd64, Izno, JHunterJ, JLaTondre,\nJWSchmidt, Jakuzem, JamesMLane, Jbolden1517, Jengod, Jerryobject, Jesse V. Jidanni, Jitse Niesen, Jleedev, Jmclaury, JoeB34, John of Reading, John.n-irl, JohnBlackburne, JulesH, Julien,\nJulienj, K12u, Kbolino, Kernel Saunters, Kichik, Kickin' Da Speaker, Kim Bruning, King of Hearts (old account 2), KnowledgeOfSelf, Kocio, Kurdo777, Landon1980, Lavers, Lee\n---------------------\nGiven the context information and not prior knowledge, answer the query.\nQuery: What is the file name of the document?\nAnswer: "}, {"role": "assistant", "content": "The file name of the document is W120623A.pdf."}]}
{"messages": [{"role": "user", "content": "You are an expert Q&A system that strictly operates in two modes when refining existing answers:\n1. **Rewrite** an original answer using the new context.\n2. **Repeat** the original answer if the new context isn't useful.\nNever reference the original answer or context directly in your answer.\nWhen in doubt, just repeat the original answer.New Context: Husond, InShaneee, Infinitycomeo, Itai, Ivan007, Ixfd64, Izno, JHunterJ, JLaTondre,\nJWSchmidt, Jakuzem, JamesMLane, Jbolden1517, Jengod, Jerryobject, Jesse V. Jidanni, Jitse Niesen, Jleedev, Jmclaury, JoeB34, John of Reading, John.n-irl, JohnBlackburne, JulesH, Julien,\nJulienj, K12u, Kbolino, Kernel Saunters, Kichik, Kickin' Da Speaker, Kim Bruning, King of Hearts (old account 2), KnowledgeOfSelf, Kocio, Kurdo777, Landon1980, Lavers, Lee Daniel\nCrocker, Lekshmann, Leoholbel, Liempt, Limbo socrates, Liorma, LizardJr8, Lockeownzj00, Looc4s, Lord Chamberlain, the Renowned, Loren.wilton, Loshsu, Lotje, Lupin, M5, Mac, Mange01,\nManop, Martyn Lovell, Marudubshinki, Materialscientist, Mattknox, Mav, Mbeychok, Meldraft, Mflore4d, Michael Hardy, Michael Hodgson, Michaelas10, Miguel, Mihai cartoaje, Miketwardos,\nMinghong, Minirogue, Miohtama, MoreThanMike, Morg, Mountain,\nQuery: What is the file name of the document?\nOriginal Answer: The file name of the document is W120623A.pdf.\nNew Answer: "}, {"role": "assistant", "content": "The file name of the document is W120623A.pdf."}]}
{"messages": [{"role": "system", "content": "You are an expert Q&A system that is trusted around the world.\nAlways answer the query using the provided context information, and not prior knowledge.\nSome rules to follow:\n1. Never directly reference the given context in your answer.\n2. Avoid statements like 'Based on the context, ...' or 'The context information ...' or anything along those lines."}, {"role": "user", "content": "Context information is below.\n---------------------\npage_label: 7\nfile_path: test\\regression\\regression_test006\\W120623A.pdf\n\nApplication programming interface\n7\nExternal links\n\u2022What is an API? Your Guide to the Internet (R)evolution (http:/ / www. 3scale. net/ wp-content/ uploads/ 2012/\n06/ What-is-an-API-1. 0. pdf)\n\u2022How to design a good API and why it matters (http:/ / lcsd05. cs. tamu. edu/ slides/ keynote. pdf)\n\u2022How to Write an API (http:/ / www. lior. ca/ publications/ api_design. pdf)\n\u2022LMAX Application Programming Interface (API) technology (http:/ / www. lmax. com/ trading-tech/ api-trading)\n\npage_label: 4\nfile_path: test\\regression\\regression_test006\\W120623A.pdf\n\nApplication programming interface\n4\nthe APIs of a given language cannot be used in other languages, unless the function calls are wrapped with specific\nadaptation libraries.\nObject API and protocols\nAn object API can prescribe a specific object exchange format, an object exchange protocol can define a way to\ntransfer the same kind of information in a message sent to a remote system.\nWhen a message is exchanged via a protocol between two different platforms using objects on both sides, the object\nin a programming language can be transformed (marshalled and unmarshalled) in an object in a remote and different\nlanguage: so, e.g., a program written in Java invokes a service via SOAP or IIOP written in C# both programs use\nAPIs for remote invocation (each locally to the machine where they are working) to (remotely) exchange\ninformation that they both convert from/to an object in local memory.\nInstead when a similar object is exchanged via an API local to a single machine the object is effectively exchanged\n(or a reference to it) in memory: e.g. via the memory allocated by a single process, or among multiple processes\nusing shared memory or other sharing techologies like tuple spaces.\nAPI sharing and reuse via virtual machine\nSome languages like those running in a virtual machine (e.g. .NET CLI compliant languages in the Common\nLanguage Runtime and JVM compliant languages in the Java Virtual Machine) can share APIs.\nIn this case the virtual machine enables the language interoperation thanks to the common denominator of the virtual\nmachine that abstracts from the specific language using an intermediate bytecode and its language binding.\nHence this approach maximizes the code reuse potential for all the existing libraries and related APIs.\nWeb APIs\nWhen used in the context of web development, an API is typically defined as a set of Hypertext Transfer Protocol\n(HTTP) request messages, along with a definition of the structure of response messages, which is usually in an\nExtensible Markup Language (XML) or JavaScript Object Notation (JSON) format. While \"Web API\" is virtually a\nsynonym for web service, the recent trend (so-called Web 2.0) has been moving away from Simple Object Access\nProtocol (SOAP) based services towards more direct Representational State Transfer (REST) style\ncommunications.[5] Web APIs allow the combination of multiple services into new applications known as\nmashups.[6]\nWeb use to share content\nThe practice of publishing APIs has allowed web communities to create an open architecture for sharing content and\ndata between communities and applications. In this way, content that is created in one place can be dynamically\nposted and updated in multiple locations on the web.\n1.Photos can be shared from sites like Flickr and Photobucket to social network sites like Facebook and MySpace.\n2.Content can be embedded, e.g. embedding a presentation from SlideShare on a LinkedIn profile.\n3.Content can be dynamically posted. Sharing live comments made on Twitter with a Facebook account, for\nexample, is enabled by their APIs.\n4.4.Video content can be embedded on sites which are served by another host.\n5.User information can be shared from web communities to outside applications, delivering new functionality to\nthe web community that shares its user data via an open API. One of the best examples of this is the Facebook\nApplication platform. Another is the Open Social platform.[7]\n---------------------\nGiven the context information and not prior knowledge, answer the query.\nQuery: Provide an external link to a resource on API trading.\nAnswer: "}, {"role": "assistant", "content": "The external link to a resource on API trading is http://www.lmax.com/trading-tech/api-trading."}]}
{"messages": [{"role": "system", "content": "You are an expert Q&A system that is trusted around the world.\nAlways answer the query using the provided context information, and not prior knowledge.\nSome rules to follow:\n1. Never directly reference the given context in your answer.\n2. Avoid statements like 'Based on the context, ...' or 'The context information ...' or anything along those lines."}, {"role": "user", "content": "Context information is below.\n---------------------\npage_label: 8\nfile_path: test\\regression\\regression_test006\\W120623A.pdf\n\nKim Bruning, King of Hearts (old account 2), KnowledgeOfSelf, Kocio, Kurdo777, Landon1980, Lavers, Lee Daniel\nCrocker, Lekshmann, Leoholbel, Liempt, Limbo socrates, Liorma, LizardJr8, Lockeownzj00, Looc4s, Lord Chamberlain, the Renowned, Loren.wilton, Loshsu, Lotje, Lupin, M5, Mac, Mange01,\nManop, Martyn Lovell, Marudubshinki, Materialscientist, Mattknox, Mav, Mbeychok, Meldraft, Mflore4d, Michael Hardy, Michael Hodgson, Michaelas10, Miguel, Mihai cartoaje, Miketwardos,\nMinghong, Minirogue, Miohtama, MoreThanMike, Morg, Mountain, Mpbaumg, MrOllie, Mrh30, Mshivaram.ie22, Mwarf, Myc2001, Nanshu, Neelix, NewEnglandYankee, Nopetro,\nNotinasnaid, Nsda, Obradovic Goran, Ocean Shores, Ohspite, Old Guard, OlegMarchuk, Oulrij, Oxymoron83, Pascal.Tesson, PaymentVision, Peak, Pearll's sun, Pengo, Pepe.agell, Percede,\nPgimeno, Philip Trueman, Phuzion, Piano non troppo, Plamka, Poweroid, Prari, Pwforaker, Queenmomcat, Quinet, Quux, Qwertyus, Qx2020, Qxz, R'n'B, RJHall, Rackspacecloud, Raise\nexception, Randomalious, RedWolf, Redlentil, Reemrevnivek, Renatko, Rich Farmbrough, RichMorin, Riluve, Rktur, Robert K S, Robneild, Rocastelo, Ronocdh, RoyBoy, Rs rams, Rudyray,\nRwwww, SERIEZ, SQGibbon, ST47, Sakhal, Salvatore Ingala, Sam Korn, Scohil, Scott Ritchie, Seth Nimbosa, Sfmontyo, Shlomif, SimonTrew, SirSandGoblin, Sj, Skeejay, Skysmith, Slady,\nSlurrymaster, SocialRadiusOly, Sodium, Soumyasch, Spencer, Spikey, SqueakBox, Stephenchou0722, SteveBaker, Steven J. Anderson, Suruena, Syvanen, Szajd, T-borg, Ta bu shi da yu,\nTantrumizer, TastyPoutine, Tedickey, Teryx, Teutonic Tamer, The Anome, The Thing That Should Not Be, TheSoundAndTheFury, TheresaWilson, Thiotimoline, Thisisborin9, Tide rolls,\nTijuana Brass, Tony1, Torchiest, Transpar3nt, TrentonLipscomb, Troymccluresf, Tseay11, Uriyan, Utype, Uzume, Varworld, Vikramtheone, Visvadinu, Vkorpor, Voidxor, WTRiker,\nWaltBusterkeys, Wapcaplet, Wavelength, Whatsnxt, Whitehorse212, WikHead, Willy-os, Wjejskenewr, Wysprgr2005, Xqt, Yaris678, YordanGeorgiev, Yurik, Zachlipton, Zeno Gantner, Zhinz,\nZimZalaBim, Zodon, \uacc4\uc815\uba85\ubb58\ub85c\ud558\uc9c0, 771 anonymous edits\nLicense\nCreative Commons Attribution-Share Alike 3.0 Unported\n//creativecommons.org/licenses/by-sa/3.0/\n\npage_label: 8\nfile_path: test\\regression\\regression_test006\\W120623A.pdf\n\nArticle Sources and Contributors\n8\nArticle Sources and Contributors\nApplication programming interface \u00a0Source: http://en.wikipedia.org/w/index.php?oldid=498937988 \u00a0Contributors: 213.121.101.xxx, 24.108.233.xxx, 24.93.53.xxx, 4483APK, 64.105.112.xxx,\n90, Aa1bb2cc3dd4ee5, AaronL, Aarsalankhalid, AbdulKhaaliq2, Adah, Addshore, Ae-a, Aeons, Aeternus, Ahunt, Ahzahraee, Airplaneman, Alan d, Alex43223, Altaf.attari86, Altenmann,\nAmanuse, Ancheta Wis, Andre Engels, Andremi, Andres, Andrey86, Andy16666, Anteru, Apoltix, Arindra r, Arjayay, Arthur Davies Sikopo, Aruton, Ashamerie, Asydwaters, Atheken, Atreys,\nAude, Auntof6, Avk15gt, Awg1010, Bamyers99, Bdesham, Beano, Bearcat, Betterusername, Bevo, Bhat sudha, Bikingviking, Blackcats, Bobo192, Boing! said Zebedee, Bookiewookie, Borgx,\nBoyprose, Brianski, Bryan Derksen, BryanG, Bryanmonroe, CYD, Calton, CanisRufus, Capricorn42, Chadsmith729, Chameleon, Chealer, Chicago god, Chiefcoolbreeze, Chituokol1,\nClaudiaHetman, CloudNine, Colonoh, Consult.kirthi, Conversion script, Coolbloke94, Courcelles, Cybercobra, Cynical, DShantz, Damian Yerrick, Daniduc, Danja, Darklight, Davejohnsan,\nDavemck, David Gerard, Davron, Dawidl, DeeKay64, Deepugn, Dennislees, Derek farn, Detnos, Diego Moya, Diomidis Spinellis, Dipskinny, Discospinster, Dmarquard, Download, Dqpeck, Dr\nMarcus Hill, Dreadstar, Drewmeyers, Dschach, Dsnelling, Dylan620, EVula, Ebessman, Ed Poor, Edcolins, Edwardkerlin, Efa, Egmontaz, Ehn, Elf, Ellmist, Eloquence, Enochlau, Enric Naval,\nEpbr123, Eric Agbozo, Espoo, Excirial, Farrwill, Fieldday-sunday, Fitch, Frap, Freakimus, Frecklefoot, FrummerThanThou, Funvill, F\u00e6, GRAHAMUK, Gak, GeoffPurchase, Giftlite, Graham87,\nGreensburger, Griznant, HUB, Hadal, Harryboyles, Hashar, HenkeB, Heraclius, Hfastedge, Hmains, Humu, Husond, InShaneee, Infinitycomeo, Itai, Ivan007, Ixfd64, Izno, JHunterJ, JLaTondre,\nJWSchmidt, Jakuzem, JamesMLane, Jbolden1517, Jengod, Jerryobject, Jesse V. Jidanni, Jitse Niesen, Jleedev, Jmclaury, JoeB34, John of Reading, John.n-irl, JohnBlackburne, JulesH, Julien,\nJulienj, K12u, Kbolino, Kernel Saunters, Kichik, Kickin' Da Speaker, Kim Bruning, King of Hearts (old account 2), KnowledgeOfSelf, Kocio, Kurdo777, Landon1980, Lavers, Lee\n---------------------\nGiven the context information and not prior knowledge, answer the query.\nQuery: What is the page label of the document?\nAnswer: "}, {"role": "assistant", "content": "The page label of the document is 8."}]}
{"messages": [{"role": "user", "content": "You are an expert Q&A system that strictly operates in two modes when refining existing answers:\n1. **Rewrite** an original answer using the new context.\n2. **Repeat** the original answer if the new context isn't useful.\nNever reference the original answer or context directly in your answer.\nWhen in doubt, just repeat the original answer.New Context: Husond, InShaneee, Infinitycomeo, Itai, Ivan007, Ixfd64, Izno, JHunterJ, JLaTondre,\nJWSchmidt, Jakuzem, JamesMLane, Jbolden1517, Jengod, Jerryobject, Jesse V. Jidanni, Jitse Niesen, Jleedev, Jmclaury, JoeB34, John of Reading, John.n-irl, JohnBlackburne, JulesH, Julien,\nJulienj, K12u, Kbolino, Kernel Saunters, Kichik, Kickin' Da Speaker, Kim Bruning, King of Hearts (old account 2), KnowledgeOfSelf, Kocio, Kurdo777, Landon1980, Lavers, Lee Daniel\nCrocker, Lekshmann, Leoholbel, Liempt, Limbo socrates, Liorma, LizardJr8, Lockeownzj00, Looc4s, Lord Chamberlain, the Renowned, Loren.wilton, Loshsu, Lotje, Lupin, M5, Mac, Mange01,\nManop, Martyn Lovell, Marudubshinki, Materialscientist, Mattknox, Mav, Mbeychok, Meldraft, Mflore4d, Michael Hardy, Michael Hodgson, Michaelas10, Miguel, Mihai cartoaje, Miketwardos,\nMinghong, Minirogue, Miohtama, MoreThanMike, Morg, Mountain,\nQuery: What is the page label of the document?\nOriginal Answer: The page label of the document is 8.\nNew Answer: "}, {"role": "assistant", "content": "The page label of the document is 8."}]}
{"messages": [{"role": "system", "content": "You are an expert Q&A system that is trusted around the world.\nAlways answer the query using the provided context information, and not prior knowledge.\nSome rules to follow:\n1. Never directly reference the given context in your answer.\n2. Avoid statements like 'Based on the context, ...' or 'The context information ...' or anything along those lines."}, {"role": "user", "content": "Context information is below.\n---------------------\npage_label: 8\nfile_path: test\\regression\\regression_test006\\W120623A.pdf\n\nArticle Sources and Contributors\n8\nArticle Sources and Contributors\nApplication programming interface \u00a0Source: http://en.wikipedia.org/w/index.php?oldid=498937988 \u00a0Contributors: 213.121.101.xxx, 24.108.233.xxx, 24.93.53.xxx, 4483APK, 64.105.112.xxx,\n90, Aa1bb2cc3dd4ee5, AaronL, Aarsalankhalid, AbdulKhaaliq2, Adah, Addshore, Ae-a, Aeons, Aeternus, Ahunt, Ahzahraee, Airplaneman, Alan d, Alex43223, Altaf.attari86, Altenmann,\nAmanuse, Ancheta Wis, Andre Engels, Andremi, Andres, Andrey86, Andy16666, Anteru, Apoltix, Arindra r, Arjayay, Arthur Davies Sikopo, Aruton, Ashamerie, Asydwaters, Atheken, Atreys,\nAude, Auntof6, Avk15gt, Awg1010, Bamyers99, Bdesham, Beano, Bearcat, Betterusername, Bevo, Bhat sudha, Bikingviking, Blackcats, Bobo192, Boing! said Zebedee, Bookiewookie, Borgx,\nBoyprose, Brianski, Bryan Derksen, BryanG, Bryanmonroe, CYD, Calton, CanisRufus, Capricorn42, Chadsmith729, Chameleon, Chealer, Chicago god, Chiefcoolbreeze, Chituokol1,\nClaudiaHetman, CloudNine, Colonoh, Consult.kirthi, Conversion script, Coolbloke94, Courcelles, Cybercobra, Cynical, DShantz, Damian Yerrick, Daniduc, Danja, Darklight, Davejohnsan,\nDavemck, David Gerard, Davron, Dawidl, DeeKay64, Deepugn, Dennislees, Derek farn, Detnos, Diego Moya, Diomidis Spinellis, Dipskinny, Discospinster, Dmarquard, Download, Dqpeck, Dr\nMarcus Hill, Dreadstar, Drewmeyers, Dschach, Dsnelling, Dylan620, EVula, Ebessman, Ed Poor, Edcolins, Edwardkerlin, Efa, Egmontaz, Ehn, Elf, Ellmist, Eloquence, Enochlau, Enric Naval,\nEpbr123, Eric Agbozo, Espoo, Excirial, Farrwill, Fieldday-sunday, Fitch, Frap, Freakimus, Frecklefoot, FrummerThanThou, Funvill, F\u00e6, GRAHAMUK, Gak, GeoffPurchase, Giftlite, Graham87,\nGreensburger, Griznant, HUB, Hadal, Harryboyles, Hashar, HenkeB, Heraclius, Hfastedge, Hmains, Humu, Husond, InShaneee, Infinitycomeo, Itai, Ivan007, Ixfd64, Izno, JHunterJ, JLaTondre,\nJWSchmidt, Jakuzem, JamesMLane, Jbolden1517, Jengod, Jerryobject, Jesse V. Jidanni, Jitse Niesen, Jleedev, Jmclaury, JoeB34, John of Reading, John.n-irl, JohnBlackburne, JulesH, Julien,\nJulienj, K12u, Kbolino, Kernel Saunters, Kichik, Kickin' Da Speaker, Kim Bruning, King of Hearts (old account 2), KnowledgeOfSelf, Kocio, Kurdo777, Landon1980, Lavers, Lee Daniel\nCrocker, Lekshmann, Leoholbel, Liempt, Limbo socrates, Liorma, LizardJr8, Lockeownzj00, Looc4s, Lord Chamberlain, the Renowned, Loren.wilton, Loshsu, Lotje, Lupin, M5, Mac, Mange01,\nManop, Martyn Lovell, Marudubshinki, Materialscientist, Mattknox, Mav, Mbeychok, Meldraft, Mflore4d, Michael Hardy, Michael Hodgson, Michaelas10, Miguel, Mihai cartoaje, Miketwardos,\nMinghong, Minirogue, Miohtama, MoreThanMike, Morg, Mountain,\n\npage_label: 8\nfile_path: test\\regression\\regression_test006\\W120623A.pdf\n\nKim Bruning, King of Hearts (old account 2), KnowledgeOfSelf, Kocio, Kurdo777, Landon1980, Lavers, Lee Daniel\nCrocker, Lekshmann, Leoholbel, Liempt, Limbo socrates, Liorma, LizardJr8, Lockeownzj00, Looc4s, Lord Chamberlain, the Renowned, Loren.wilton, Loshsu, Lotje, Lupin, M5, Mac, Mange01,\nManop, Martyn Lovell, Marudubshinki, Materialscientist, Mattknox, Mav, Mbeychok, Meldraft, Mflore4d, Michael Hardy, Michael Hodgson, Michaelas10, Miguel, Mihai cartoaje, Miketwardos,\nMinghong, Minirogue, Miohtama, MoreThanMike, Morg, Mountain, Mpbaumg, MrOllie, Mrh30, Mshivaram.ie22, Mwarf, Myc2001, Nanshu, Neelix, NewEnglandYankee, Nopetro,\nNotinasnaid, Nsda, Obradovic Goran, Ocean Shores, Ohspite, Old Guard, OlegMarchuk, Oulrij, Oxymoron83, Pascal.Tesson, PaymentVision, Peak, Pearll's sun, Pengo, Pepe.agell, Percede,\nPgimeno, Philip Trueman, Phuzion, Piano non troppo, Plamka, Poweroid, Prari, Pwforaker, Queenmomcat, Quinet, Quux, Qwertyus, Qx2020, Qxz, R'n'B, RJHall, Rackspacecloud, Raise\nexception, Randomalious, RedWolf, Redlentil, Reemrevnivek, Renatko, Rich Farmbrough, RichMorin, Riluve, Rktur, Robert K S, Robneild, Rocastelo, Ronocdh, RoyBoy, Rs rams, Rudyray,\nRwwww, SERIEZ, SQGibbon, ST47, Sakhal, Salvatore Ingala, Sam Korn, Scohil, Scott Ritchie, Seth Nimbosa, Sfmontyo, Shlomif, SimonTrew, SirSandGoblin, Sj, Skeejay, Skysmith, Slady,\nSlurrymaster, SocialRadiusOly, Sodium, Soumyasch, Spencer, Spikey, SqueakBox, Stephenchou0722, SteveBaker, Steven J. Anderson, Suruena, Syvanen, Szajd, T-borg, Ta bu shi da yu,\nTantrumizer, TastyPoutine, Tedickey, Teryx, Teutonic Tamer, The Anome, The Thing That Should Not Be, TheSoundAndTheFury, TheresaWilson, Thiotimoline, Thisisborin9, Tide rolls,\nTijuana Brass, Tony1, Torchiest, Transpar3nt, TrentonLipscomb, Troymccluresf, Tseay11,\n---------------------\nGiven the context information and not prior knowledge, answer the query.\nQuery: When was the document last modified?\nAnswer: "}, {"role": "assistant", "content": "The context does not provide information on when the document was last modified."}]}
{"messages": [{"role": "user", "content": "You are an expert Q&A system that strictly operates in two modes when refining existing answers:\n1. **Rewrite** an original answer using the new context.\n2. **Repeat** the original answer if the new context isn't useful.\nNever reference the original answer or context directly in your answer.\nWhen in doubt, just repeat the original answer.New Context: Sj, Skeejay, Skysmith, Slady,\nSlurrymaster, SocialRadiusOly, Sodium, Soumyasch, Spencer, Spikey, SqueakBox, Stephenchou0722, SteveBaker, Steven J. Anderson, Suruena, Syvanen, Szajd, T-borg, Ta bu shi da yu,\nTantrumizer, TastyPoutine, Tedickey, Teryx, Teutonic Tamer, The Anome, The Thing That Should Not Be, TheSoundAndTheFury, TheresaWilson, Thiotimoline, Thisisborin9, Tide rolls,\nTijuana Brass, Tony1, Torchiest, Transpar3nt, TrentonLipscomb, Troymccluresf, Tseay11, Uriyan, Utype, Uzume, Varworld, Vikramtheone, Visvadinu, Vkorpor, Voidxor, WTRiker,\nWaltBusterkeys, Wapcaplet, Wavelength, Whatsnxt, Whitehorse212, WikHead, Willy-os, Wjejskenewr, Wysprgr2005, Xqt, Yaris678, YordanGeorgiev, Yurik, Zachlipton, Zeno Gantner, Zhinz,\nZimZalaBim, Zodon, \uacc4\uc815\uba85\ubb58\ub85c\ud558\uc9c0, 771 anonymous edits\nLicense\nCreative Commons Attribution-Share Alike 3.0 Unported\n//creativecommons.org/licenses/by-sa/3.0/\nQuery: When was the document last modified?\nOriginal Answer: The context does not provide information on when the document was last modified.\nNew Answer: "}, {"role": "assistant", "content": "The context does not provide information on when the document was last modified."}]}
{"messages": [{"role": "system", "content": "You are an expert Q&A system that is trusted around the world.\nAlways answer the query using the provided context information, and not prior knowledge.\nSome rules to follow:\n1. Never directly reference the given context in your answer.\n2. Avoid statements like 'Based on the context, ...' or 'The context information ...' or anything along those lines."}, {"role": "user", "content": "Context information is below.\n---------------------\npage_label: 7\nfile_path: test\\regression\\regression_test006\\W120623A.pdf\n\nApplication programming interface\n7\nExternal links\n\u2022What is an API? Your Guide to the Internet (R)evolution (http:/ / www. 3scale. net/ wp-content/ uploads/ 2012/\n06/ What-is-an-API-1. 0. pdf)\n\u2022How to design a good API and why it matters (http:/ / lcsd05. cs. tamu. edu/ slides/ keynote. pdf)\n\u2022How to Write an API (http:/ / www. lior. ca/ publications/ api_design. pdf)\n\u2022LMAX Application Programming Interface (API) technology (http:/ / www. lmax. com/ trading-tech/ api-trading)\n\npage_label: 8\nfile_path: test\\regression\\regression_test006\\W120623A.pdf\n\nArticle Sources and Contributors\n8\nArticle Sources and Contributors\nApplication programming interface \u00a0Source: http://en.wikipedia.org/w/index.php?oldid=498937988 \u00a0Contributors: 213.121.101.xxx, 24.108.233.xxx, 24.93.53.xxx, 4483APK, 64.105.112.xxx,\n90, Aa1bb2cc3dd4ee5, AaronL, Aarsalankhalid, AbdulKhaaliq2, Adah, Addshore, Ae-a, Aeons, Aeternus, Ahunt, Ahzahraee, Airplaneman, Alan d, Alex43223, Altaf.attari86, Altenmann,\nAmanuse, Ancheta Wis, Andre Engels, Andremi, Andres, Andrey86, Andy16666, Anteru, Apoltix, Arindra r, Arjayay, Arthur Davies Sikopo, Aruton, Ashamerie, Asydwaters, Atheken, Atreys,\nAude, Auntof6, Avk15gt, Awg1010, Bamyers99, Bdesham, Beano, Bearcat, Betterusername, Bevo, Bhat sudha, Bikingviking, Blackcats, Bobo192, Boing! said Zebedee, Bookiewookie, Borgx,\nBoyprose, Brianski, Bryan Derksen, BryanG, Bryanmonroe, CYD, Calton, CanisRufus, Capricorn42, Chadsmith729, Chameleon, Chealer, Chicago god, Chiefcoolbreeze, Chituokol1,\nClaudiaHetman, CloudNine, Colonoh, Consult.kirthi, Conversion script, Coolbloke94, Courcelles, Cybercobra, Cynical, DShantz, Damian Yerrick, Daniduc, Danja, Darklight, Davejohnsan,\nDavemck, David Gerard, Davron, Dawidl, DeeKay64, Deepugn, Dennislees, Derek farn, Detnos, Diego Moya, Diomidis Spinellis, Dipskinny, Discospinster, Dmarquard, Download, Dqpeck, Dr\nMarcus Hill, Dreadstar, Drewmeyers, Dschach, Dsnelling, Dylan620, EVula, Ebessman, Ed Poor, Edcolins, Edwardkerlin, Efa, Egmontaz, Ehn, Elf, Ellmist, Eloquence, Enochlau, Enric Naval,\nEpbr123, Eric Agbozo, Espoo, Excirial, Farrwill, Fieldday-sunday, Fitch, Frap, Freakimus, Frecklefoot, FrummerThanThou, Funvill, F\u00e6, GRAHAMUK, Gak, GeoffPurchase, Giftlite, Graham87,\nGreensburger, Griznant, HUB, Hadal, Harryboyles, Hashar, HenkeB, Heraclius, Hfastedge, Hmains, Humu, Husond, InShaneee, Infinitycomeo, Itai, Ivan007, Ixfd64, Izno, JHunterJ, JLaTondre,\nJWSchmidt, Jakuzem, JamesMLane, Jbolden1517, Jengod, Jerryobject, Jesse V. Jidanni, Jitse Niesen, Jleedev, Jmclaury, JoeB34, John of Reading, John.n-irl, JohnBlackburne, JulesH, Julien,\nJulienj, K12u, Kbolino, Kernel Saunters, Kichik, Kickin' Da Speaker, Kim Bruning, King of Hearts (old account 2), KnowledgeOfSelf, Kocio, Kurdo777, Landon1980, Lavers, Lee Daniel\nCrocker, Lekshmann, Leoholbel, Liempt, Limbo socrates, Liorma, LizardJr8, Lockeownzj00, Looc4s, Lord Chamberlain, the Renowned, Loren.wilton, Loshsu, Lotje, Lupin, M5, Mac, Mange01,\nManop, Martyn Lovell, Marudubshinki, Materialscientist, Mattknox, Mav, Mbeychok, Meldraft, Mflore4d, Michael Hardy, Michael Hodgson, Michaelas10, Miguel, Mihai cartoaje, Miketwardos,\nMinghong, Minirogue, Miohtama, MoreThanMike, Morg, Mountain,\n---------------------\nGiven the context information and not prior knowledge, answer the query.\nQuery: What is the file type of the document mentioned in the context information?\nAnswer: "}, {"role": "assistant", "content": "The file type of the document mentioned in the context information is PDF."}]}
{"messages": [{"role": "system", "content": "You are an expert Q&A system that is trusted around the world.\nAlways answer the query using the provided context information, and not prior knowledge.\nSome rules to follow:\n1. Never directly reference the given context in your answer.\n2. Avoid statements like 'Based on the context, ...' or 'The context information ...' or anything along those lines."}, {"role": "user", "content": "Context information is below.\n---------------------\npage_label: 8\nfile_path: test\\regression\\regression_test006\\W120623A.pdf\n\nArticle Sources and Contributors\n8\nArticle Sources and Contributors\nApplication programming interface \u00a0Source: http://en.wikipedia.org/w/index.php?oldid=498937988 \u00a0Contributors: 213.121.101.xxx, 24.108.233.xxx, 24.93.53.xxx, 4483APK, 64.105.112.xxx,\n90, Aa1bb2cc3dd4ee5, AaronL, Aarsalankhalid, AbdulKhaaliq2, Adah, Addshore, Ae-a, Aeons, Aeternus, Ahunt, Ahzahraee, Airplaneman, Alan d, Alex43223, Altaf.attari86, Altenmann,\nAmanuse, Ancheta Wis, Andre Engels, Andremi, Andres, Andrey86, Andy16666, Anteru, Apoltix, Arindra r, Arjayay, Arthur Davies Sikopo, Aruton, Ashamerie, Asydwaters, Atheken, Atreys,\nAude, Auntof6, Avk15gt, Awg1010, Bamyers99, Bdesham, Beano, Bearcat, Betterusername, Bevo, Bhat sudha, Bikingviking, Blackcats, Bobo192, Boing! said Zebedee, Bookiewookie, Borgx,\nBoyprose, Brianski, Bryan Derksen, BryanG, Bryanmonroe, CYD, Calton, CanisRufus, Capricorn42, Chadsmith729, Chameleon, Chealer, Chicago god, Chiefcoolbreeze, Chituokol1,\nClaudiaHetman, CloudNine, Colonoh, Consult.kirthi, Conversion script, Coolbloke94, Courcelles, Cybercobra, Cynical, DShantz, Damian Yerrick, Daniduc, Danja, Darklight, Davejohnsan,\nDavemck, David Gerard, Davron, Dawidl, DeeKay64, Deepugn, Dennislees, Derek farn, Detnos, Diego Moya, Diomidis Spinellis, Dipskinny, Discospinster, Dmarquard, Download, Dqpeck, Dr\nMarcus Hill, Dreadstar, Drewmeyers, Dschach, Dsnelling, Dylan620, EVula, Ebessman, Ed Poor, Edcolins, Edwardkerlin, Efa, Egmontaz, Ehn, Elf, Ellmist, Eloquence, Enochlau, Enric Naval,\nEpbr123, Eric Agbozo, Espoo, Excirial, Farrwill, Fieldday-sunday, Fitch, Frap, Freakimus, Frecklefoot, FrummerThanThou, Funvill, F\u00e6, GRAHAMUK, Gak, GeoffPurchase, Giftlite, Graham87,\nGreensburger, Griznant, HUB, Hadal, Harryboyles, Hashar, HenkeB, Heraclius, Hfastedge, Hmains, Humu, Husond, InShaneee, Infinitycomeo, Itai, Ivan007, Ixfd64, Izno, JHunterJ, JLaTondre,\nJWSchmidt, Jakuzem, JamesMLane, Jbolden1517, Jengod, Jerryobject, Jesse V. Jidanni, Jitse Niesen, Jleedev, Jmclaury, JoeB34, John of Reading, John.n-irl, JohnBlackburne, JulesH, Julien,\nJulienj, K12u, Kbolino, Kernel Saunters, Kichik, Kickin' Da Speaker, Kim Bruning, King of Hearts (old account 2), KnowledgeOfSelf, Kocio, Kurdo777, Landon1980, Lavers, Lee Daniel\nCrocker, Lekshmann, Leoholbel, Liempt, Limbo socrates, Liorma, LizardJr8, Lockeownzj00, Looc4s, Lord Chamberlain, the Renowned, Loren.wilton, Loshsu, Lotje, Lupin, M5, Mac, Mange01,\nManop, Martyn Lovell, Marudubshinki, Materialscientist, Mattknox, Mav, Mbeychok, Meldraft, Mflore4d, Michael Hardy, Michael Hodgson, Michaelas10, Miguel, Mihai cartoaje, Miketwardos,\nMinghong, Minirogue, Miohtama, MoreThanMike, Morg, Mountain,\n\npage_label: 8\nfile_path: test\\regression\\regression_test006\\W120623A.pdf\n\nKim Bruning, King of Hearts (old account 2), KnowledgeOfSelf, Kocio, Kurdo777, Landon1980, Lavers, Lee Daniel\nCrocker, Lekshmann, Leoholbel, Liempt, Limbo socrates, Liorma, LizardJr8, Lockeownzj00, Looc4s, Lord Chamberlain, the Renowned, Loren.wilton, Loshsu, Lotje, Lupin, M5, Mac, Mange01,\nManop, Martyn Lovell, Marudubshinki, Materialscientist, Mattknox, Mav, Mbeychok, Meldraft, Mflore4d, Michael Hardy, Michael Hodgson, Michaelas10, Miguel, Mihai cartoaje, Miketwardos,\nMinghong, Minirogue, Miohtama, MoreThanMike, Morg, Mountain, Mpbaumg, MrOllie, Mrh30, Mshivaram.ie22, Mwarf, Myc2001, Nanshu, Neelix, NewEnglandYankee, Nopetro,\nNotinasnaid, Nsda, Obradovic Goran, Ocean Shores, Ohspite, Old Guard, OlegMarchuk, Oulrij, Oxymoron83, Pascal.Tesson, PaymentVision, Peak, Pearll's sun, Pengo, Pepe.agell, Percede,\nPgimeno, Philip Trueman, Phuzion, Piano non troppo, Plamka, Poweroid, Prari, Pwforaker, Queenmomcat, Quinet, Quux, Qwertyus, Qx2020, Qxz, R'n'B, RJHall, Rackspacecloud, Raise\nexception, Randomalious, RedWolf, Redlentil, Reemrevnivek, Renatko, Rich Farmbrough, RichMorin, Riluve, Rktur, Robert K S, Robneild, Rocastelo, Ronocdh, RoyBoy, Rs rams, Rudyray,\nRwwww, SERIEZ, SQGibbon, ST47, Sakhal, Salvatore Ingala, Sam Korn, Scohil, Scott Ritchie, Seth Nimbosa, Sfmontyo, Shlomif, SimonTrew, SirSandGoblin, Sj, Skeejay, Skysmith, Slady,\nSlurrymaster, SocialRadiusOly, Sodium, Soumyasch, Spencer, Spikey, SqueakBox, Stephenchou0722, SteveBaker, Steven J. Anderson, Suruena, Syvanen, Szajd, T-borg, Ta bu shi da yu,\nTantrumizer, TastyPoutine, Tedickey, Teryx, Teutonic Tamer, The Anome, The Thing That Should Not Be, TheSoundAndTheFury, TheresaWilson, Thiotimoline, Thisisborin9, Tide rolls,\nTijuana Brass, Tony1, Torchiest, Transpar3nt, TrentonLipscomb, Troymccluresf, Tseay11,\n---------------------\nGiven the context information and not prior knowledge, answer the query.\nQuery: When was the document last accessed?\nAnswer: "}, {"role": "assistant", "content": "The context does not provide information on when the document was last accessed."}]}
{"messages": [{"role": "user", "content": "You are an expert Q&A system that strictly operates in two modes when refining existing answers:\n1. **Rewrite** an original answer using the new context.\n2. **Repeat** the original answer if the new context isn't useful.\nNever reference the original answer or context directly in your answer.\nWhen in doubt, just repeat the original answer.New Context: Sj, Skeejay, Skysmith, Slady,\nSlurrymaster, SocialRadiusOly, Sodium, Soumyasch, Spencer, Spikey, SqueakBox, Stephenchou0722, SteveBaker, Steven J. Anderson, Suruena, Syvanen, Szajd, T-borg, Ta bu shi da yu,\nTantrumizer, TastyPoutine, Tedickey, Teryx, Teutonic Tamer, The Anome, The Thing That Should Not Be, TheSoundAndTheFury, TheresaWilson, Thiotimoline, Thisisborin9, Tide rolls,\nTijuana Brass, Tony1, Torchiest, Transpar3nt, TrentonLipscomb, Troymccluresf, Tseay11, Uriyan, Utype, Uzume, Varworld, Vikramtheone, Visvadinu, Vkorpor, Voidxor, WTRiker,\nWaltBusterkeys, Wapcaplet, Wavelength, Whatsnxt, Whitehorse212, WikHead, Willy-os, Wjejskenewr, Wysprgr2005, Xqt, Yaris678, YordanGeorgiev, Yurik, Zachlipton, Zeno Gantner, Zhinz,\nZimZalaBim, Zodon, \uacc4\uc815\uba85\ubb58\ub85c\ud558\uc9c0, 771 anonymous edits\nLicense\nCreative Commons Attribution-Share Alike 3.0 Unported\n//creativecommons.org/licenses/by-sa/3.0/\nQuery: When was the document last accessed?\nOriginal Answer: The context does not provide information on when the document was last accessed.\nNew Answer: "}, {"role": "assistant", "content": "The context does not provide information on when the document was last accessed."}]}
{"messages": [{"role": "system", "content": "You are an expert Q&A system that is trusted around the world.\nAlways answer the query using the provided context information, and not prior knowledge.\nSome rules to follow:\n1. Never directly reference the given context in your answer.\n2. Avoid statements like 'Based on the context, ...' or 'The context information ...' or anything along those lines."}, {"role": "user", "content": "Context information is below.\n---------------------\npage_label: 8\nfile_path: test\\regression\\regression_test006\\W120623A.pdf\n\nArticle Sources and Contributors\n8\nArticle Sources and Contributors\nApplication programming interface \u00a0Source: http://en.wikipedia.org/w/index.php?oldid=498937988 \u00a0Contributors: 213.121.101.xxx, 24.108.233.xxx, 24.93.53.xxx, 4483APK, 64.105.112.xxx,\n90, Aa1bb2cc3dd4ee5, AaronL, Aarsalankhalid, AbdulKhaaliq2, Adah, Addshore, Ae-a, Aeons, Aeternus, Ahunt, Ahzahraee, Airplaneman, Alan d, Alex43223, Altaf.attari86, Altenmann,\nAmanuse, Ancheta Wis, Andre Engels, Andremi, Andres, Andrey86, Andy16666, Anteru, Apoltix, Arindra r, Arjayay, Arthur Davies Sikopo, Aruton, Ashamerie, Asydwaters, Atheken, Atreys,\nAude, Auntof6, Avk15gt, Awg1010, Bamyers99, Bdesham, Beano, Bearcat, Betterusername, Bevo, Bhat sudha, Bikingviking, Blackcats, Bobo192, Boing! said Zebedee, Bookiewookie, Borgx,\nBoyprose, Brianski, Bryan Derksen, BryanG, Bryanmonroe, CYD, Calton, CanisRufus, Capricorn42, Chadsmith729, Chameleon, Chealer, Chicago god, Chiefcoolbreeze, Chituokol1,\nClaudiaHetman, CloudNine, Colonoh, Consult.kirthi, Conversion script, Coolbloke94, Courcelles, Cybercobra, Cynical, DShantz, Damian Yerrick, Daniduc, Danja, Darklight, Davejohnsan,\nDavemck, David Gerard, Davron, Dawidl, DeeKay64, Deepugn, Dennislees, Derek farn, Detnos, Diego Moya, Diomidis Spinellis, Dipskinny, Discospinster, Dmarquard, Download, Dqpeck, Dr\nMarcus Hill, Dreadstar, Drewmeyers, Dschach, Dsnelling, Dylan620, EVula, Ebessman, Ed Poor, Edcolins, Edwardkerlin, Efa, Egmontaz, Ehn, Elf, Ellmist, Eloquence, Enochlau, Enric Naval,\nEpbr123, Eric Agbozo, Espoo, Excirial, Farrwill, Fieldday-sunday, Fitch, Frap, Freakimus, Frecklefoot, FrummerThanThou, Funvill, F\u00e6, GRAHAMUK, Gak, GeoffPurchase, Giftlite, Graham87,\nGreensburger, Griznant, HUB, Hadal, Harryboyles, Hashar, HenkeB, Heraclius, Hfastedge, Hmains, Humu, Husond, InShaneee, Infinitycomeo, Itai, Ivan007, Ixfd64, Izno, JHunterJ, JLaTondre,\nJWSchmidt, Jakuzem, JamesMLane, Jbolden1517, Jengod, Jerryobject, Jesse V. Jidanni, Jitse Niesen, Jleedev, Jmclaury, JoeB34, John of Reading, John.n-irl, JohnBlackburne, JulesH, Julien,\nJulienj, K12u, Kbolino, Kernel Saunters, Kichik, Kickin' Da Speaker, Kim Bruning, King of Hearts (old account 2), KnowledgeOfSelf, Kocio, Kurdo777, Landon1980, Lavers, Lee Daniel\nCrocker, Lekshmann, Leoholbel, Liempt, Limbo socrates, Liorma, LizardJr8, Lockeownzj00, Looc4s, Lord Chamberlain, the Renowned, Loren.wilton, Loshsu, Lotje, Lupin, M5, Mac, Mange01,\nManop, Martyn Lovell, Marudubshinki, Materialscientist, Mattknox, Mav, Mbeychok, Meldraft, Mflore4d, Michael Hardy, Michael Hodgson, Michaelas10, Miguel, Mihai cartoaje, Miketwardos,\nMinghong, Minirogue, Miohtama, MoreThanMike, Morg, Mountain,\n\npage_label: 8\nfile_path: test\\regression\\regression_test006\\W120623A.pdf\n\nKim Bruning, King of Hearts (old account 2), KnowledgeOfSelf, Kocio, Kurdo777, Landon1980, Lavers, Lee Daniel\nCrocker, Lekshmann, Leoholbel, Liempt, Limbo socrates, Liorma, LizardJr8, Lockeownzj00, Looc4s, Lord Chamberlain, the Renowned, Loren.wilton, Loshsu, Lotje, Lupin, M5, Mac, Mange01,\nManop, Martyn Lovell, Marudubshinki, Materialscientist, Mattknox, Mav, Mbeychok, Meldraft, Mflore4d, Michael Hardy, Michael Hodgson, Michaelas10, Miguel, Mihai cartoaje, Miketwardos,\nMinghong, Minirogue, Miohtama, MoreThanMike, Morg, Mountain, Mpbaumg, MrOllie, Mrh30, Mshivaram.ie22, Mwarf, Myc2001, Nanshu, Neelix, NewEnglandYankee, Nopetro,\nNotinasnaid, Nsda, Obradovic Goran, Ocean Shores, Ohspite, Old Guard, OlegMarchuk, Oulrij, Oxymoron83, Pascal.Tesson, PaymentVision, Peak, Pearll's sun, Pengo, Pepe.agell, Percede,\nPgimeno, Philip Trueman, Phuzion, Piano non troppo, Plamka, Poweroid, Prari, Pwforaker, Queenmomcat, Quinet, Quux, Qwertyus, Qx2020, Qxz, R'n'B, RJHall, Rackspacecloud, Raise\nexception, Randomalious, RedWolf, Redlentil, Reemrevnivek, Renatko, Rich Farmbrough, RichMorin, Riluve, Rktur, Robert K S, Robneild, Rocastelo, Ronocdh, RoyBoy, Rs rams, Rudyray,\nRwwww, SERIEZ, SQGibbon, ST47, Sakhal, Salvatore Ingala, Sam Korn, Scohil, Scott Ritchie, Seth Nimbosa, Sfmontyo, Shlomif, SimonTrew, SirSandGoblin, Sj, Skeejay, Skysmith, Slady,\nSlurrymaster, SocialRadiusOly, Sodium, Soumyasch, Spencer, Spikey, SqueakBox, Stephenchou0722, SteveBaker, Steven J. Anderson, Suruena, Syvanen, Szajd, T-borg, Ta bu shi da yu,\nTantrumizer, TastyPoutine, Tedickey, Teryx, Teutonic Tamer, The Anome, The Thing That Should Not Be, TheSoundAndTheFury, TheresaWilson, Thiotimoline, Thisisborin9, Tide rolls,\nTijuana Brass, Tony1, Torchiest, Transpar3nt, TrentonLipscomb, Troymccluresf,\n---------------------\nGiven the context information and not prior knowledge, answer the query.\nQuery: How many contributors are listed for the article sources and contributors?\nAnswer: "}, {"role": "assistant", "content": "The exact number of contributors is not specified in the context. However, many names are listed as contributors to the article."}]}
{"messages": [{"role": "user", "content": "You are an expert Q&A system that strictly operates in two modes when refining existing answers:\n1. **Rewrite** an original answer using the new context.\n2. **Repeat** the original answer if the new context isn't useful.\nNever reference the original answer or context directly in your answer.\nWhen in doubt, just repeat the original answer.New Context: Sj, Skeejay, Skysmith, Slady,\nSlurrymaster, SocialRadiusOly, Sodium, Soumyasch, Spencer, Spikey, SqueakBox, Stephenchou0722, SteveBaker, Steven J. Anderson, Suruena, Syvanen, Szajd, T-borg, Ta bu shi da yu,\nTantrumizer, TastyPoutine, Tedickey, Teryx, Teutonic Tamer, The Anome, The Thing That Should Not Be, TheSoundAndTheFury, TheresaWilson, Thiotimoline, Thisisborin9, Tide rolls,\nTijuana Brass, Tony1, Torchiest, Transpar3nt, TrentonLipscomb, Troymccluresf, Tseay11, Uriyan, Utype, Uzume, Varworld, Vikramtheone, Visvadinu, Vkorpor, Voidxor, WTRiker,\nWaltBusterkeys, Wapcaplet, Wavelength, Whatsnxt, Whitehorse212, WikHead, Willy-os, Wjejskenewr, Wysprgr2005, Xqt, Yaris678, YordanGeorgiev, Yurik, Zachlipton, Zeno Gantner, Zhinz,\nZimZalaBim, Zodon, \uacc4\uc815\uba85\ubb58\ub85c\ud558\uc9c0, 771 anonymous edits\nLicense\nCreative Commons Attribution-Share Alike 3.0 Unported\n//creativecommons.org/licenses/by-sa/3.0/\nQuery: How many contributors are listed for the article sources and contributors?\nOriginal Answer: The exact number of contributors is not specified in the context. However, many names are listed as contributors to the article.\nNew Answer: "}, {"role": "assistant", "content": "The specific number of contributors is not given in the context. Nonetheless, a substantial number of names are mentioned as contributors to the article."}]}
{"messages": [{"role": "system", "content": "You are an expert Q&A system that is trusted around the world.\nAlways answer the query using the provided context information, and not prior knowledge.\nSome rules to follow:\n1. Never directly reference the given context in your answer.\n2. Avoid statements like 'Based on the context, ...' or 'The context information ...' or anything along those lines."}, {"role": "user", "content": "Context information is below.\n---------------------\npage_label: 7\nfile_path: test\\regression\\regression_test006\\W120623A.pdf\n\nApplication programming interface\n7\nExternal links\n\u2022What is an API? Your Guide to the Internet (R)evolution (http:/ / www. 3scale. net/ wp-content/ uploads/ 2012/\n06/ What-is-an-API-1. 0. pdf)\n\u2022How to design a good API and why it matters (http:/ / lcsd05. cs. tamu. edu/ slides/ keynote. pdf)\n\u2022How to Write an API (http:/ / www. lior. ca/ publications/ api_design. pdf)\n\u2022LMAX Application Programming Interface (API) technology (http:/ / www. lmax. com/ trading-tech/ api-trading)\n\npage_label: 8\nfile_path: test\\regression\\regression_test006\\W120623A.pdf\n\nArticle Sources and Contributors\n8\nArticle Sources and Contributors\nApplication programming interface \u00a0Source: http://en.wikipedia.org/w/index.php?oldid=498937988 \u00a0Contributors: 213.121.101.xxx, 24.108.233.xxx, 24.93.53.xxx, 4483APK, 64.105.112.xxx,\n90, Aa1bb2cc3dd4ee5, AaronL, Aarsalankhalid, AbdulKhaaliq2, Adah, Addshore, Ae-a, Aeons, Aeternus, Ahunt, Ahzahraee, Airplaneman, Alan d, Alex43223, Altaf.attari86, Altenmann,\nAmanuse, Ancheta Wis, Andre Engels, Andremi, Andres, Andrey86, Andy16666, Anteru, Apoltix, Arindra r, Arjayay, Arthur Davies Sikopo, Aruton, Ashamerie, Asydwaters, Atheken, Atreys,\nAude, Auntof6, Avk15gt, Awg1010, Bamyers99, Bdesham, Beano, Bearcat, Betterusername, Bevo, Bhat sudha, Bikingviking, Blackcats, Bobo192, Boing! said Zebedee, Bookiewookie, Borgx,\nBoyprose, Brianski, Bryan Derksen, BryanG, Bryanmonroe, CYD, Calton, CanisRufus, Capricorn42, Chadsmith729, Chameleon, Chealer, Chicago god, Chiefcoolbreeze, Chituokol1,\nClaudiaHetman, CloudNine, Colonoh, Consult.kirthi, Conversion script, Coolbloke94, Courcelles, Cybercobra, Cynical, DShantz, Damian Yerrick, Daniduc, Danja, Darklight, Davejohnsan,\nDavemck, David Gerard, Davron, Dawidl, DeeKay64, Deepugn, Dennislees, Derek farn, Detnos, Diego Moya, Diomidis Spinellis, Dipskinny, Discospinster, Dmarquard, Download, Dqpeck, Dr\nMarcus Hill, Dreadstar, Drewmeyers, Dschach, Dsnelling, Dylan620, EVula, Ebessman, Ed Poor, Edcolins, Edwardkerlin, Efa, Egmontaz, Ehn, Elf, Ellmist, Eloquence, Enochlau, Enric Naval,\nEpbr123, Eric Agbozo, Espoo, Excirial, Farrwill, Fieldday-sunday, Fitch, Frap, Freakimus, Frecklefoot, FrummerThanThou, Funvill, F\u00e6, GRAHAMUK, Gak, GeoffPurchase, Giftlite, Graham87,\nGreensburger, Griznant, HUB, Hadal, Harryboyles, Hashar, HenkeB, Heraclius, Hfastedge, Hmains, Humu, Husond, InShaneee, Infinitycomeo, Itai, Ivan007, Ixfd64, Izno, JHunterJ, JLaTondre,\nJWSchmidt, Jakuzem, JamesMLane, Jbolden1517, Jengod, Jerryobject, Jesse V. Jidanni, Jitse Niesen, Jleedev, Jmclaury, JoeB34, John of Reading, John.n-irl, JohnBlackburne, JulesH, Julien,\nJulienj, K12u, Kbolino, Kernel Saunters, Kichik, Kickin' Da Speaker, Kim Bruning, King of Hearts (old account 2), KnowledgeOfSelf, Kocio, Kurdo777, Landon1980, Lavers, Lee Daniel\nCrocker, Lekshmann, Leoholbel, Liempt, Limbo socrates, Liorma, LizardJr8, Lockeownzj00, Looc4s, Lord Chamberlain, the Renowned, Loren.wilton, Loshsu, Lotje, Lupin, M5, Mac, Mange01,\nManop, Martyn Lovell, Marudubshinki, Materialscientist, Mattknox, Mav, Mbeychok, Meldraft, Mflore4d, Michael Hardy, Michael Hodgson, Michaelas10, Miguel, Mihai cartoaje, Miketwardos,\nMinghong, Minirogue, Miohtama, MoreThanMike, Morg, Mountain,\n---------------------\nGiven the context information and not prior knowledge, answer the query.\nQuery: What is the file size of the document?\nAnswer: "}, {"role": "assistant", "content": "The context information does not provide details about the file size of the document."}]}
{"messages": [{"role": "system", "content": "You are an expert Q&A system that is trusted around the world.\nAlways answer the query using the provided context information, and not prior knowledge.\nSome rules to follow:\n1. Never directly reference the given context in your answer.\n2. Avoid statements like 'Based on the context, ...' or 'The context information ...' or anything along those lines."}, {"role": "user", "content": "Context information is below.\n---------------------\npage_label: 8\nfile_path: test\\regression\\regression_test006\\W120623A.pdf\n\nKim Bruning, King of Hearts (old account 2), KnowledgeOfSelf, Kocio, Kurdo777, Landon1980, Lavers, Lee Daniel\nCrocker, Lekshmann, Leoholbel, Liempt, Limbo socrates, Liorma, LizardJr8, Lockeownzj00, Looc4s, Lord Chamberlain, the Renowned, Loren.wilton, Loshsu, Lotje, Lupin, M5, Mac, Mange01,\nManop, Martyn Lovell, Marudubshinki, Materialscientist, Mattknox, Mav, Mbeychok, Meldraft, Mflore4d, Michael Hardy, Michael Hodgson, Michaelas10, Miguel, Mihai cartoaje, Miketwardos,\nMinghong, Minirogue, Miohtama, MoreThanMike, Morg, Mountain, Mpbaumg, MrOllie, Mrh30, Mshivaram.ie22, Mwarf, Myc2001, Nanshu, Neelix, NewEnglandYankee, Nopetro,\nNotinasnaid, Nsda, Obradovic Goran, Ocean Shores, Ohspite, Old Guard, OlegMarchuk, Oulrij, Oxymoron83, Pascal.Tesson, PaymentVision, Peak, Pearll's sun, Pengo, Pepe.agell, Percede,\nPgimeno, Philip Trueman, Phuzion, Piano non troppo, Plamka, Poweroid, Prari, Pwforaker, Queenmomcat, Quinet, Quux, Qwertyus, Qx2020, Qxz, R'n'B, RJHall, Rackspacecloud, Raise\nexception, Randomalious, RedWolf, Redlentil, Reemrevnivek, Renatko, Rich Farmbrough, RichMorin, Riluve, Rktur, Robert K S, Robneild, Rocastelo, Ronocdh, RoyBoy, Rs rams, Rudyray,\nRwwww, SERIEZ, SQGibbon, ST47, Sakhal, Salvatore Ingala, Sam Korn, Scohil, Scott Ritchie, Seth Nimbosa, Sfmontyo, Shlomif, SimonTrew, SirSandGoblin, Sj, Skeejay, Skysmith, Slady,\nSlurrymaster, SocialRadiusOly, Sodium, Soumyasch, Spencer, Spikey, SqueakBox, Stephenchou0722, SteveBaker, Steven J. Anderson, Suruena, Syvanen, Szajd, T-borg, Ta bu shi da yu,\nTantrumizer, TastyPoutine, Tedickey, Teryx, Teutonic Tamer, The Anome, The Thing That Should Not Be, TheSoundAndTheFury, TheresaWilson, Thiotimoline, Thisisborin9, Tide rolls,\nTijuana Brass, Tony1, Torchiest, Transpar3nt, TrentonLipscomb, Troymccluresf, Tseay11, Uriyan, Utype, Uzume, Varworld, Vikramtheone, Visvadinu, Vkorpor, Voidxor, WTRiker,\nWaltBusterkeys, Wapcaplet, Wavelength, Whatsnxt, Whitehorse212, WikHead, Willy-os, Wjejskenewr, Wysprgr2005, Xqt, Yaris678, YordanGeorgiev, Yurik, Zachlipton, Zeno Gantner, Zhinz,\nZimZalaBim, Zodon, \uacc4\uc815\uba85\ubb58\ub85c\ud558\uc9c0, 771 anonymous edits\nLicense\nCreative Commons Attribution-Share Alike 3.0 Unported\n//creativecommons.org/licenses/by-sa/3.0/\n\npage_label: 8\nfile_path: test\\regression\\regression_test006\\W120623A.pdf\n\nArticle Sources and Contributors\n8\nArticle Sources and Contributors\nApplication programming interface \u00a0Source: http://en.wikipedia.org/w/index.php?oldid=498937988 \u00a0Contributors: 213.121.101.xxx, 24.108.233.xxx, 24.93.53.xxx, 4483APK, 64.105.112.xxx,\n90, Aa1bb2cc3dd4ee5, AaronL, Aarsalankhalid, AbdulKhaaliq2, Adah, Addshore, Ae-a, Aeons, Aeternus, Ahunt, Ahzahraee, Airplaneman, Alan d, Alex43223, Altaf.attari86, Altenmann,\nAmanuse, Ancheta Wis, Andre Engels, Andremi, Andres, Andrey86, Andy16666, Anteru, Apoltix, Arindra r, Arjayay, Arthur Davies Sikopo, Aruton, Ashamerie, Asydwaters, Atheken, Atreys,\nAude, Auntof6, Avk15gt, Awg1010, Bamyers99, Bdesham, Beano, Bearcat, Betterusername, Bevo, Bhat sudha, Bikingviking, Blackcats, Bobo192, Boing! said Zebedee, Bookiewookie, Borgx,\nBoyprose, Brianski, Bryan Derksen, BryanG, Bryanmonroe, CYD, Calton, CanisRufus, Capricorn42, Chadsmith729, Chameleon, Chealer, Chicago god, Chiefcoolbreeze, Chituokol1,\nClaudiaHetman, CloudNine, Colonoh, Consult.kirthi, Conversion script, Coolbloke94, Courcelles, Cybercobra, Cynical, DShantz, Damian Yerrick, Daniduc, Danja, Darklight, Davejohnsan,\nDavemck, David Gerard, Davron, Dawidl, DeeKay64, Deepugn, Dennislees, Derek farn, Detnos, Diego Moya, Diomidis Spinellis, Dipskinny, Discospinster, Dmarquard, Download, Dqpeck, Dr\nMarcus Hill, Dreadstar, Drewmeyers, Dschach, Dsnelling, Dylan620, EVula, Ebessman, Ed Poor, Edcolins, Edwardkerlin, Efa, Egmontaz, Ehn, Elf, Ellmist, Eloquence, Enochlau, Enric Naval,\nEpbr123, Eric Agbozo, Espoo, Excirial, Farrwill, Fieldday-sunday, Fitch, Frap, Freakimus, Frecklefoot, FrummerThanThou, Funvill, F\u00e6, GRAHAMUK, Gak, GeoffPurchase, Giftlite, Graham87,\nGreensburger, Griznant, HUB, Hadal, Harryboyles, Hashar, HenkeB, Heraclius, Hfastedge, Hmains, Humu, Husond, InShaneee, Infinitycomeo, Itai, Ivan007, Ixfd64, Izno, JHunterJ, JLaTondre,\nJWSchmidt, Jakuzem, JamesMLane, Jbolden1517, Jengod, Jerryobject, Jesse V. Jidanni, Jitse Niesen, Jleedev, Jmclaury, JoeB34, John of Reading, John.n-irl, JohnBlackburne, JulesH, Julien,\nJulienj, K12u, Kbolino, Kernel Saunters, Kichik, Kickin' Da Speaker, Kim Bruning, King of Hearts (old account 2), KnowledgeOfSelf, Kocio, Kurdo777, Landon1980, Lavers, Lee\n---------------------\nGiven the context information and not prior knowledge, answer the query.\nQuery: What is the creation date of the document?\nAnswer: "}, {"role": "assistant", "content": "The context information does not provide a creation date for the document."}]}
{"messages": [{"role": "user", "content": "You are an expert Q&A system that strictly operates in two modes when refining existing answers:\n1. **Rewrite** an original answer using the new context.\n2. **Repeat** the original answer if the new context isn't useful.\nNever reference the original answer or context directly in your answer.\nWhen in doubt, just repeat the original answer.New Context: Husond, InShaneee, Infinitycomeo, Itai, Ivan007, Ixfd64, Izno, JHunterJ, JLaTondre,\nJWSchmidt, Jakuzem, JamesMLane, Jbolden1517, Jengod, Jerryobject, Jesse V. Jidanni, Jitse Niesen, Jleedev, Jmclaury, JoeB34, John of Reading, John.n-irl, JohnBlackburne, JulesH, Julien,\nJulienj, K12u, Kbolino, Kernel Saunters, Kichik, Kickin' Da Speaker, Kim Bruning, King of Hearts (old account 2), KnowledgeOfSelf, Kocio, Kurdo777, Landon1980, Lavers, Lee Daniel\nCrocker, Lekshmann, Leoholbel, Liempt, Limbo socrates, Liorma, LizardJr8, Lockeownzj00, Looc4s, Lord Chamberlain, the Renowned, Loren.wilton, Loshsu, Lotje, Lupin, M5, Mac, Mange01,\nManop, Martyn Lovell, Marudubshinki, Materialscientist, Mattknox, Mav, Mbeychok, Meldraft, Mflore4d, Michael Hardy, Michael Hodgson, Michaelas10, Miguel, Mihai cartoaje, Miketwardos,\nMinghong, Minirogue, Miohtama, MoreThanMike, Morg, Mountain,\nQuery: What is the creation date of the document?\nOriginal Answer: The context information does not provide a creation date for the document.\nNew Answer: "}, {"role": "assistant", "content": "The context information does not provide a creation date for the document."}]}
{"messages": [{"role": "system", "content": "You are an expert Q&A system that is trusted around the world.\nAlways answer the query using the provided context information, and not prior knowledge.\nSome rules to follow:\n1. Never directly reference the given context in your answer.\n2. Avoid statements like 'Based on the context, ...' or 'The context information ...' or anything along those lines."}, {"role": "user", "content": "Context information is below.\n---------------------\npage_label: 8\nfile_path: test\\regression\\regression_test006\\W120623A.pdf\n\nArticle Sources and Contributors\n8\nArticle Sources and Contributors\nApplication programming interface \u00a0Source: http://en.wikipedia.org/w/index.php?oldid=498937988 \u00a0Contributors: 213.121.101.xxx, 24.108.233.xxx, 24.93.53.xxx, 4483APK, 64.105.112.xxx,\n90, Aa1bb2cc3dd4ee5, AaronL, Aarsalankhalid, AbdulKhaaliq2, Adah, Addshore, Ae-a, Aeons, Aeternus, Ahunt, Ahzahraee, Airplaneman, Alan d, Alex43223, Altaf.attari86, Altenmann,\nAmanuse, Ancheta Wis, Andre Engels, Andremi, Andres, Andrey86, Andy16666, Anteru, Apoltix, Arindra r, Arjayay, Arthur Davies Sikopo, Aruton, Ashamerie, Asydwaters, Atheken, Atreys,\nAude, Auntof6, Avk15gt, Awg1010, Bamyers99, Bdesham, Beano, Bearcat, Betterusername, Bevo, Bhat sudha, Bikingviking, Blackcats, Bobo192, Boing! said Zebedee, Bookiewookie, Borgx,\nBoyprose, Brianski, Bryan Derksen, BryanG, Bryanmonroe, CYD, Calton, CanisRufus, Capricorn42, Chadsmith729, Chameleon, Chealer, Chicago god, Chiefcoolbreeze, Chituokol1,\nClaudiaHetman, CloudNine, Colonoh, Consult.kirthi, Conversion script, Coolbloke94, Courcelles, Cybercobra, Cynical, DShantz, Damian Yerrick, Daniduc, Danja, Darklight, Davejohnsan,\nDavemck, David Gerard, Davron, Dawidl, DeeKay64, Deepugn, Dennislees, Derek farn, Detnos, Diego Moya, Diomidis Spinellis, Dipskinny, Discospinster, Dmarquard, Download, Dqpeck, Dr\nMarcus Hill, Dreadstar, Drewmeyers, Dschach, Dsnelling, Dylan620, EVula, Ebessman, Ed Poor, Edcolins, Edwardkerlin, Efa, Egmontaz, Ehn, Elf, Ellmist, Eloquence, Enochlau, Enric Naval,\nEpbr123, Eric Agbozo, Espoo, Excirial, Farrwill, Fieldday-sunday, Fitch, Frap, Freakimus, Frecklefoot, FrummerThanThou, Funvill, F\u00e6, GRAHAMUK, Gak, GeoffPurchase, Giftlite, Graham87,\nGreensburger, Griznant, HUB, Hadal, Harryboyles, Hashar, HenkeB, Heraclius, Hfastedge, Hmains, Humu, Husond, InShaneee, Infinitycomeo, Itai, Ivan007, Ixfd64, Izno, JHunterJ, JLaTondre,\nJWSchmidt, Jakuzem, JamesMLane, Jbolden1517, Jengod, Jerryobject, Jesse V. Jidanni, Jitse Niesen, Jleedev, Jmclaury, JoeB34, John of Reading, John.n-irl, JohnBlackburne, JulesH, Julien,\nJulienj, K12u, Kbolino, Kernel Saunters, Kichik, Kickin' Da Speaker, Kim Bruning, King of Hearts (old account 2), KnowledgeOfSelf, Kocio, Kurdo777, Landon1980, Lavers, Lee Daniel\nCrocker, Lekshmann, Leoholbel, Liempt, Limbo socrates, Liorma, LizardJr8, Lockeownzj00, Looc4s, Lord Chamberlain, the Renowned, Loren.wilton, Loshsu, Lotje, Lupin, M5, Mac, Mange01,\nManop, Martyn Lovell, Marudubshinki, Materialscientist, Mattknox, Mav, Mbeychok, Meldraft, Mflore4d, Michael Hardy, Michael Hodgson, Michaelas10, Miguel, Mihai cartoaje, Miketwardos,\nMinghong, Minirogue, Miohtama, MoreThanMike, Morg, Mountain,\n\npage_label: 8\nfile_path: test\\regression\\regression_test006\\W120623A.pdf\n\nKim Bruning, King of Hearts (old account 2), KnowledgeOfSelf, Kocio, Kurdo777, Landon1980, Lavers, Lee Daniel\nCrocker, Lekshmann, Leoholbel, Liempt, Limbo socrates, Liorma, LizardJr8, Lockeownzj00, Looc4s, Lord Chamberlain, the Renowned, Loren.wilton, Loshsu, Lotje, Lupin, M5, Mac, Mange01,\nManop, Martyn Lovell, Marudubshinki, Materialscientist, Mattknox, Mav, Mbeychok, Meldraft, Mflore4d, Michael Hardy, Michael Hodgson, Michaelas10, Miguel, Mihai cartoaje, Miketwardos,\nMinghong, Minirogue, Miohtama, MoreThanMike, Morg, Mountain, Mpbaumg, MrOllie, Mrh30, Mshivaram.ie22, Mwarf, Myc2001, Nanshu, Neelix, NewEnglandYankee, Nopetro,\nNotinasnaid, Nsda, Obradovic Goran, Ocean Shores, Ohspite, Old Guard, OlegMarchuk, Oulrij, Oxymoron83, Pascal.Tesson, PaymentVision, Peak, Pearll's sun, Pengo, Pepe.agell, Percede,\nPgimeno, Philip Trueman, Phuzion, Piano non troppo, Plamka, Poweroid, Prari, Pwforaker, Queenmomcat, Quinet, Quux, Qwertyus, Qx2020, Qxz, R'n'B, RJHall, Rackspacecloud, Raise\nexception, Randomalious, RedWolf, Redlentil, Reemrevnivek, Renatko, Rich Farmbrough, RichMorin, Riluve, Rktur, Robert K S, Robneild, Rocastelo, Ronocdh, RoyBoy, Rs rams, Rudyray,\nRwwww, SERIEZ, SQGibbon, ST47, Sakhal, Salvatore Ingala, Sam Korn, Scohil, Scott Ritchie, Seth Nimbosa, Sfmontyo, Shlomif, SimonTrew, SirSandGoblin, Sj, Skeejay, Skysmith, Slady,\nSlurrymaster, SocialRadiusOly, Sodium, Soumyasch, Spencer, Spikey, SqueakBox, Stephenchou0722, SteveBaker, Steven J. Anderson, Suruena, Syvanen, Szajd, T-borg, Ta bu shi da yu,\nTantrumizer, TastyPoutine, Tedickey, Teryx, Teutonic Tamer, The Anome, The Thing That Should Not Be, TheSoundAndTheFury, TheresaWilson, Thiotimoline, Thisisborin9, Tide rolls,\nTijuana Brass, Tony1, Torchiest, Transpar3nt, TrentonLipscomb, Troymccluresf,\n---------------------\nGiven the context information and not prior knowledge, answer the query.\nQuery: What is the file path of the document?\nAnswer: "}, {"role": "assistant", "content": "The file path of the document is test\\regression\\regression_test006\\W120623A.pdf."}]}
{"messages": [{"role": "user", "content": "You are an expert Q&A system that strictly operates in two modes when refining existing answers:\n1. **Rewrite** an original answer using the new context.\n2. **Repeat** the original answer if the new context isn't useful.\nNever reference the original answer or context directly in your answer.\nWhen in doubt, just repeat the original answer.New Context: Sj, Skeejay, Skysmith, Slady,\nSlurrymaster, SocialRadiusOly, Sodium, Soumyasch, Spencer, Spikey, SqueakBox, Stephenchou0722, SteveBaker, Steven J. Anderson, Suruena, Syvanen, Szajd, T-borg, Ta bu shi da yu,\nTantrumizer, TastyPoutine, Tedickey, Teryx, Teutonic Tamer, The Anome, The Thing That Should Not Be, TheSoundAndTheFury, TheresaWilson, Thiotimoline, Thisisborin9, Tide rolls,\nTijuana Brass, Tony1, Torchiest, Transpar3nt, TrentonLipscomb, Troymccluresf, Tseay11, Uriyan, Utype, Uzume, Varworld, Vikramtheone, Visvadinu, Vkorpor, Voidxor, WTRiker,\nWaltBusterkeys, Wapcaplet, Wavelength, Whatsnxt, Whitehorse212, WikHead, Willy-os, Wjejskenewr, Wysprgr2005, Xqt, Yaris678, YordanGeorgiev, Yurik, Zachlipton, Zeno Gantner, Zhinz,\nZimZalaBim, Zodon, \uacc4\uc815\uba85\ubb58\ub85c\ud558\uc9c0, 771 anonymous edits\nLicense\nCreative Commons Attribution-Share Alike 3.0 Unported\n//creativecommons.org/licenses/by-sa/3.0/\nQuery: What is the file path of the document?\nOriginal Answer: The file path of the document is test\\regression\\regression_test006\\W120623A.pdf.\nNew Answer: "}, {"role": "assistant", "content": "The file path of the document is test\\regression\\regression_test006\\W120623A.pdf."}]}
{"messages": [{"role": "system", "content": "You are an expert Q&A system that is trusted around the world.\nAlways answer the query using the provided context information, and not prior knowledge.\nSome rules to follow:\n1. Never directly reference the given context in your answer.\n2. Avoid statements like 'Based on the context, ...' or 'The context information ...' or anything along those lines."}, {"role": "user", "content": "Context information is below.\n---------------------\npage_label: 8\nfile_path: test\\regression\\regression_test006\\W120623A.pdf\n\nKim Bruning, King of Hearts (old account 2), KnowledgeOfSelf, Kocio, Kurdo777, Landon1980, Lavers, Lee Daniel\nCrocker, Lekshmann, Leoholbel, Liempt, Limbo socrates, Liorma, LizardJr8, Lockeownzj00, Looc4s, Lord Chamberlain, the Renowned, Loren.wilton, Loshsu, Lotje, Lupin, M5, Mac, Mange01,\nManop, Martyn Lovell, Marudubshinki, Materialscientist, Mattknox, Mav, Mbeychok, Meldraft, Mflore4d, Michael Hardy, Michael Hodgson, Michaelas10, Miguel, Mihai cartoaje, Miketwardos,\nMinghong, Minirogue, Miohtama, MoreThanMike, Morg, Mountain, Mpbaumg, MrOllie, Mrh30, Mshivaram.ie22, Mwarf, Myc2001, Nanshu, Neelix, NewEnglandYankee, Nopetro,\nNotinasnaid, Nsda, Obradovic Goran, Ocean Shores, Ohspite, Old Guard, OlegMarchuk, Oulrij, Oxymoron83, Pascal.Tesson, PaymentVision, Peak, Pearll's sun, Pengo, Pepe.agell, Percede,\nPgimeno, Philip Trueman, Phuzion, Piano non troppo, Plamka, Poweroid, Prari, Pwforaker, Queenmomcat, Quinet, Quux, Qwertyus, Qx2020, Qxz, R'n'B, RJHall, Rackspacecloud, Raise\nexception, Randomalious, RedWolf, Redlentil, Reemrevnivek, Renatko, Rich Farmbrough, RichMorin, Riluve, Rktur, Robert K S, Robneild, Rocastelo, Ronocdh, RoyBoy, Rs rams, Rudyray,\nRwwww, SERIEZ, SQGibbon, ST47, Sakhal, Salvatore Ingala, Sam Korn, Scohil, Scott Ritchie, Seth Nimbosa, Sfmontyo, Shlomif, SimonTrew, SirSandGoblin, Sj, Skeejay, Skysmith, Slady,\nSlurrymaster, SocialRadiusOly, Sodium, Soumyasch, Spencer, Spikey, SqueakBox, Stephenchou0722, SteveBaker, Steven J. Anderson, Suruena, Syvanen, Szajd, T-borg, Ta bu shi da yu,\nTantrumizer, TastyPoutine, Tedickey, Teryx, Teutonic Tamer, The Anome, The Thing That Should Not Be, TheSoundAndTheFury, TheresaWilson, Thiotimoline, Thisisborin9, Tide rolls,\nTijuana Brass, Tony1, Torchiest, Transpar3nt, TrentonLipscomb, Troymccluresf, Tseay11, Uriyan, Utype, Uzume, Varworld, Vikramtheone, Visvadinu, Vkorpor, Voidxor, WTRiker,\nWaltBusterkeys, Wapcaplet, Wavelength, Whatsnxt, Whitehorse212, WikHead, Willy-os, Wjejskenewr, Wysprgr2005, Xqt, Yaris678, YordanGeorgiev, Yurik, Zachlipton, Zeno Gantner, Zhinz,\nZimZalaBim, Zodon, \uacc4\uc815\uba85\ubb58\ub85c\ud558\uc9c0, 771 anonymous edits\nLicense\nCreative Commons Attribution-Share Alike 3.0 Unported\n//creativecommons.org/licenses/by-sa/3.0/\n\npage_label: 8\nfile_path: test\\regression\\regression_test006\\W120623A.pdf\n\nArticle Sources and Contributors\n8\nArticle Sources and Contributors\nApplication programming interface \u00a0Source: http://en.wikipedia.org/w/index.php?oldid=498937988 \u00a0Contributors: 213.121.101.xxx, 24.108.233.xxx, 24.93.53.xxx, 4483APK, 64.105.112.xxx,\n90, Aa1bb2cc3dd4ee5, AaronL, Aarsalankhalid, AbdulKhaaliq2, Adah, Addshore, Ae-a, Aeons, Aeternus, Ahunt, Ahzahraee, Airplaneman, Alan d, Alex43223, Altaf.attari86, Altenmann,\nAmanuse, Ancheta Wis, Andre Engels, Andremi, Andres, Andrey86, Andy16666, Anteru, Apoltix, Arindra r, Arjayay, Arthur Davies Sikopo, Aruton, Ashamerie, Asydwaters, Atheken, Atreys,\nAude, Auntof6, Avk15gt, Awg1010, Bamyers99, Bdesham, Beano, Bearcat, Betterusername, Bevo, Bhat sudha, Bikingviking, Blackcats, Bobo192, Boing! said Zebedee, Bookiewookie, Borgx,\nBoyprose, Brianski, Bryan Derksen, BryanG, Bryanmonroe, CYD, Calton, CanisRufus, Capricorn42, Chadsmith729, Chameleon, Chealer, Chicago god, Chiefcoolbreeze, Chituokol1,\nClaudiaHetman, CloudNine, Colonoh, Consult.kirthi, Conversion script, Coolbloke94, Courcelles, Cybercobra, Cynical, DShantz, Damian Yerrick, Daniduc, Danja, Darklight, Davejohnsan,\nDavemck, David Gerard, Davron, Dawidl, DeeKay64, Deepugn, Dennislees, Derek farn, Detnos, Diego Moya, Diomidis Spinellis, Dipskinny, Discospinster, Dmarquard, Download, Dqpeck, Dr\nMarcus Hill, Dreadstar, Drewmeyers, Dschach, Dsnelling, Dylan620, EVula, Ebessman, Ed Poor, Edcolins, Edwardkerlin, Efa, Egmontaz, Ehn, Elf, Ellmist, Eloquence, Enochlau, Enric Naval,\nEpbr123, Eric Agbozo, Espoo, Excirial, Farrwill, Fieldday-sunday, Fitch, Frap, Freakimus, Frecklefoot, FrummerThanThou, Funvill, F\u00e6, GRAHAMUK, Gak, GeoffPurchase, Giftlite, Graham87,\nGreensburger, Griznant, HUB, Hadal, Harryboyles, Hashar, HenkeB, Heraclius, Hfastedge, Hmains, Humu, Husond, InShaneee, Infinitycomeo, Itai, Ivan007, Ixfd64, Izno, JHunterJ, JLaTondre,\nJWSchmidt, Jakuzem, JamesMLane, Jbolden1517, Jengod, Jerryobject, Jesse V. Jidanni, Jitse Niesen, Jleedev, Jmclaury, JoeB34, John of Reading, John.n-irl, JohnBlackburne, JulesH, Julien,\nJulienj, K12u, Kbolino, Kernel Saunters, Kichik, Kickin' Da Speaker, Kim Bruning, King of Hearts (old account 2), KnowledgeOfSelf, Kocio, Kurdo777, Landon1980, Lavers, Lee\n---------------------\nGiven the context information and not prior knowledge, answer the query.\nQuery: What is the page label of the document?\nAnswer: "}, {"role": "assistant", "content": "The page label of the document is 8."}]}
{"messages": [{"role": "user", "content": "You are an expert Q&A system that strictly operates in two modes when refining existing answers:\n1. **Rewrite** an original answer using the new context.\n2. **Repeat** the original answer if the new context isn't useful.\nNever reference the original answer or context directly in your answer.\nWhen in doubt, just repeat the original answer.New Context: Husond, InShaneee, Infinitycomeo, Itai, Ivan007, Ixfd64, Izno, JHunterJ, JLaTondre,\nJWSchmidt, Jakuzem, JamesMLane, Jbolden1517, Jengod, Jerryobject, Jesse V. Jidanni, Jitse Niesen, Jleedev, Jmclaury, JoeB34, John of Reading, John.n-irl, JohnBlackburne, JulesH, Julien,\nJulienj, K12u, Kbolino, Kernel Saunters, Kichik, Kickin' Da Speaker, Kim Bruning, King of Hearts (old account 2), KnowledgeOfSelf, Kocio, Kurdo777, Landon1980, Lavers, Lee Daniel\nCrocker, Lekshmann, Leoholbel, Liempt, Limbo socrates, Liorma, LizardJr8, Lockeownzj00, Looc4s, Lord Chamberlain, the Renowned, Loren.wilton, Loshsu, Lotje, Lupin, M5, Mac, Mange01,\nManop, Martyn Lovell, Marudubshinki, Materialscientist, Mattknox, Mav, Mbeychok, Meldraft, Mflore4d, Michael Hardy, Michael Hodgson, Michaelas10, Miguel, Mihai cartoaje, Miketwardos,\nMinghong, Minirogue, Miohtama, MoreThanMike, Morg, Mountain,\nQuery: What is the page label of the document?\nOriginal Answer: The page label of the document is 8.\nNew Answer: "}, {"role": "assistant", "content": "The page label of the document is 8."}]}
{"messages": [{"role": "system", "content": "You are an expert Q&A system that is trusted around the world.\nAlways answer the query using the provided context information, and not prior knowledge.\nSome rules to follow:\n1. Never directly reference the given context in your answer.\n2. Avoid statements like 'Based on the context, ...' or 'The context information ...' or anything along those lines."}, {"role": "user", "content": "Context information is below.\n---------------------\npage_label: 8\nfile_path: test\\regression\\regression_test006\\W120623A.pdf\n\nKim Bruning, King of Hearts (old account 2), KnowledgeOfSelf, Kocio, Kurdo777, Landon1980, Lavers, Lee Daniel\nCrocker, Lekshmann, Leoholbel, Liempt, Limbo socrates, Liorma, LizardJr8, Lockeownzj00, Looc4s, Lord Chamberlain, the Renowned, Loren.wilton, Loshsu, Lotje, Lupin, M5, Mac, Mange01,\nManop, Martyn Lovell, Marudubshinki, Materialscientist, Mattknox, Mav, Mbeychok, Meldraft, Mflore4d, Michael Hardy, Michael Hodgson, Michaelas10, Miguel, Mihai cartoaje, Miketwardos,\nMinghong, Minirogue, Miohtama, MoreThanMike, Morg, Mountain, Mpbaumg, MrOllie, Mrh30, Mshivaram.ie22, Mwarf, Myc2001, Nanshu, Neelix, NewEnglandYankee, Nopetro,\nNotinasnaid, Nsda, Obradovic Goran, Ocean Shores, Ohspite, Old Guard, OlegMarchuk, Oulrij, Oxymoron83, Pascal.Tesson, PaymentVision, Peak, Pearll's sun, Pengo, Pepe.agell, Percede,\nPgimeno, Philip Trueman, Phuzion, Piano non troppo, Plamka, Poweroid, Prari, Pwforaker, Queenmomcat, Quinet, Quux, Qwertyus, Qx2020, Qxz, R'n'B, RJHall, Rackspacecloud, Raise\nexception, Randomalious, RedWolf, Redlentil, Reemrevnivek, Renatko, Rich Farmbrough, RichMorin, Riluve, Rktur, Robert K S, Robneild, Rocastelo, Ronocdh, RoyBoy, Rs rams, Rudyray,\nRwwww, SERIEZ, SQGibbon, ST47, Sakhal, Salvatore Ingala, Sam Korn, Scohil, Scott Ritchie, Seth Nimbosa, Sfmontyo, Shlomif, SimonTrew, SirSandGoblin, Sj, Skeejay, Skysmith, Slady,\nSlurrymaster, SocialRadiusOly, Sodium, Soumyasch, Spencer, Spikey, SqueakBox, Stephenchou0722, SteveBaker, Steven J. Anderson, Suruena, Syvanen, Szajd, T-borg, Ta bu shi da yu,\nTantrumizer, TastyPoutine, Tedickey, Teryx, Teutonic Tamer, The Anome, The Thing That Should Not Be, TheSoundAndTheFury, TheresaWilson, Thiotimoline, Thisisborin9, Tide rolls,\nTijuana Brass, Tony1, Torchiest, Transpar3nt, TrentonLipscomb, Troymccluresf, Tseay11, Uriyan, Utype, Uzume, Varworld, Vikramtheone, Visvadinu, Vkorpor, Voidxor, WTRiker,\nWaltBusterkeys, Wapcaplet, Wavelength, Whatsnxt, Whitehorse212, WikHead, Willy-os, Wjejskenewr, Wysprgr2005, Xqt, Yaris678, YordanGeorgiev, Yurik, Zachlipton, Zeno Gantner, Zhinz,\nZimZalaBim, Zodon, \uacc4\uc815\uba85\ubb58\ub85c\ud558\uc9c0, 771 anonymous edits\nLicense\nCreative Commons Attribution-Share Alike 3.0 Unported\n//creativecommons.org/licenses/by-sa/3.0/\n\npage_label: 8\nfile_path: test\\regression\\regression_test006\\W120623A.pdf\n\nArticle Sources and Contributors\n8\nArticle Sources and Contributors\nApplication programming interface \u00a0Source: http://en.wikipedia.org/w/index.php?oldid=498937988 \u00a0Contributors: 213.121.101.xxx, 24.108.233.xxx, 24.93.53.xxx, 4483APK, 64.105.112.xxx,\n90, Aa1bb2cc3dd4ee5, AaronL, Aarsalankhalid, AbdulKhaaliq2, Adah, Addshore, Ae-a, Aeons, Aeternus, Ahunt, Ahzahraee, Airplaneman, Alan d, Alex43223, Altaf.attari86, Altenmann,\nAmanuse, Ancheta Wis, Andre Engels, Andremi, Andres, Andrey86, Andy16666, Anteru, Apoltix, Arindra r, Arjayay, Arthur Davies Sikopo, Aruton, Ashamerie, Asydwaters, Atheken, Atreys,\nAude, Auntof6, Avk15gt, Awg1010, Bamyers99, Bdesham, Beano, Bearcat, Betterusername, Bevo, Bhat sudha, Bikingviking, Blackcats, Bobo192, Boing! said Zebedee, Bookiewookie, Borgx,\nBoyprose, Brianski, Bryan Derksen, BryanG, Bryanmonroe, CYD, Calton, CanisRufus, Capricorn42, Chadsmith729, Chameleon, Chealer, Chicago god, Chiefcoolbreeze, Chituokol1,\nClaudiaHetman, CloudNine, Colonoh, Consult.kirthi, Conversion script, Coolbloke94, Courcelles, Cybercobra, Cynical, DShantz, Damian Yerrick, Daniduc, Danja, Darklight, Davejohnsan,\nDavemck, David Gerard, Davron, Dawidl, DeeKay64, Deepugn, Dennislees, Derek farn, Detnos, Diego Moya, Diomidis Spinellis, Dipskinny, Discospinster, Dmarquard, Download, Dqpeck, Dr\nMarcus Hill, Dreadstar, Drewmeyers, Dschach, Dsnelling, Dylan620, EVula, Ebessman, Ed Poor, Edcolins, Edwardkerlin, Efa, Egmontaz, Ehn, Elf, Ellmist, Eloquence, Enochlau, Enric Naval,\nEpbr123, Eric Agbozo, Espoo, Excirial, Farrwill, Fieldday-sunday, Fitch, Frap, Freakimus, Frecklefoot, FrummerThanThou, Funvill, F\u00e6, GRAHAMUK, Gak, GeoffPurchase, Giftlite, Graham87,\nGreensburger, Griznant, HUB, Hadal, Harryboyles, Hashar, HenkeB, Heraclius, Hfastedge, Hmains, Humu, Husond, InShaneee, Infinitycomeo, Itai, Ivan007, Ixfd64, Izno, JHunterJ, JLaTondre,\nJWSchmidt, Jakuzem, JamesMLane, Jbolden1517, Jengod, Jerryobject, Jesse V. Jidanni, Jitse Niesen, Jleedev, Jmclaury, JoeB34, John of Reading, John.n-irl, JohnBlackburne, JulesH, Julien,\nJulienj, K12u, Kbolino, Kernel Saunters, Kichik, Kickin' Da Speaker, Kim Bruning, King of Hearts (old account 2), KnowledgeOfSelf, Kocio, Kurdo777, Landon1980, Lavers, Lee\n---------------------\nGiven the context information and not prior knowledge, answer the query.\nQuery: What is the file name of the document?\nAnswer: "}, {"role": "assistant", "content": "The file name of the document is W120623A.pdf."}]}
{"messages": [{"role": "user", "content": "You are an expert Q&A system that strictly operates in two modes when refining existing answers:\n1. **Rewrite** an original answer using the new context.\n2. **Repeat** the original answer if the new context isn't useful.\nNever reference the original answer or context directly in your answer.\nWhen in doubt, just repeat the original answer.New Context: Husond, InShaneee, Infinitycomeo, Itai, Ivan007, Ixfd64, Izno, JHunterJ, JLaTondre,\nJWSchmidt, Jakuzem, JamesMLane, Jbolden1517, Jengod, Jerryobject, Jesse V. Jidanni, Jitse Niesen, Jleedev, Jmclaury, JoeB34, John of Reading, John.n-irl, JohnBlackburne, JulesH, Julien,\nJulienj, K12u, Kbolino, Kernel Saunters, Kichik, Kickin' Da Speaker, Kim Bruning, King of Hearts (old account 2), KnowledgeOfSelf, Kocio, Kurdo777, Landon1980, Lavers, Lee Daniel\nCrocker, Lekshmann, Leoholbel, Liempt, Limbo socrates, Liorma, LizardJr8, Lockeownzj00, Looc4s, Lord Chamberlain, the Renowned, Loren.wilton, Loshsu, Lotje, Lupin, M5, Mac, Mange01,\nManop, Martyn Lovell, Marudubshinki, Materialscientist, Mattknox, Mav, Mbeychok, Meldraft, Mflore4d, Michael Hardy, Michael Hodgson, Michaelas10, Miguel, Mihai cartoaje, Miketwardos,\nMinghong, Minirogue, Miohtama, MoreThanMike, Morg, Mountain,\nQuery: What is the file name of the document?\nOriginal Answer: The file name of the document is W120623A.pdf.\nNew Answer: "}, {"role": "assistant", "content": "The file name of the document is W120623A.pdf."}]}
{"messages": [{"role": "system", "content": "You are an expert Q&A system that is trusted around the world.\nAlways answer the query using the provided context information, and not prior knowledge.\nSome rules to follow:\n1. Never directly reference the given context in your answer.\n2. Avoid statements like 'Based on the context, ...' or 'The context information ...' or anything along those lines."}, {"role": "user", "content": "Context information is below.\n---------------------\npage_label: 7\nfile_path: test\\regression\\regression_test006\\W120623A.pdf\n\nApplication programming interface\n7\nExternal links\n\u2022What is an API? Your Guide to the Internet (R)evolution (http:/ / www. 3scale. net/ wp-content/ uploads/ 2012/\n06/ What-is-an-API-1. 0. pdf)\n\u2022How to design a good API and why it matters (http:/ / lcsd05. cs. tamu. edu/ slides/ keynote. pdf)\n\u2022How to Write an API (http:/ / www. lior. ca/ publications/ api_design. pdf)\n\u2022LMAX Application Programming Interface (API) technology (http:/ / www. lmax. com/ trading-tech/ api-trading)\n\npage_label: 8\nfile_path: test\\regression\\regression_test006\\W120623A.pdf\n\nArticle Sources and Contributors\n8\nArticle Sources and Contributors\nApplication programming interface \u00a0Source: http://en.wikipedia.org/w/index.php?oldid=498937988 \u00a0Contributors: 213.121.101.xxx, 24.108.233.xxx, 24.93.53.xxx, 4483APK, 64.105.112.xxx,\n90, Aa1bb2cc3dd4ee5, AaronL, Aarsalankhalid, AbdulKhaaliq2, Adah, Addshore, Ae-a, Aeons, Aeternus, Ahunt, Ahzahraee, Airplaneman, Alan d, Alex43223, Altaf.attari86, Altenmann,\nAmanuse, Ancheta Wis, Andre Engels, Andremi, Andres, Andrey86, Andy16666, Anteru, Apoltix, Arindra r, Arjayay, Arthur Davies Sikopo, Aruton, Ashamerie, Asydwaters, Atheken, Atreys,\nAude, Auntof6, Avk15gt, Awg1010, Bamyers99, Bdesham, Beano, Bearcat, Betterusername, Bevo, Bhat sudha, Bikingviking, Blackcats, Bobo192, Boing! said Zebedee, Bookiewookie, Borgx,\nBoyprose, Brianski, Bryan Derksen, BryanG, Bryanmonroe, CYD, Calton, CanisRufus, Capricorn42, Chadsmith729, Chameleon, Chealer, Chicago god, Chiefcoolbreeze, Chituokol1,\nClaudiaHetman, CloudNine, Colonoh, Consult.kirthi, Conversion script, Coolbloke94, Courcelles, Cybercobra, Cynical, DShantz, Damian Yerrick, Daniduc, Danja, Darklight, Davejohnsan,\nDavemck, David Gerard, Davron, Dawidl, DeeKay64, Deepugn, Dennislees, Derek farn, Detnos, Diego Moya, Diomidis Spinellis, Dipskinny, Discospinster, Dmarquard, Download, Dqpeck, Dr\nMarcus Hill, Dreadstar, Drewmeyers, Dschach, Dsnelling, Dylan620, EVula, Ebessman, Ed Poor, Edcolins, Edwardkerlin, Efa, Egmontaz, Ehn, Elf, Ellmist, Eloquence, Enochlau, Enric Naval,\nEpbr123, Eric Agbozo, Espoo, Excirial, Farrwill, Fieldday-sunday, Fitch, Frap, Freakimus, Frecklefoot, FrummerThanThou, Funvill, F\u00e6, GRAHAMUK, Gak, GeoffPurchase, Giftlite, Graham87,\nGreensburger, Griznant, HUB, Hadal, Harryboyles, Hashar, HenkeB, Heraclius, Hfastedge, Hmains, Humu, Husond, InShaneee, Infinitycomeo, Itai, Ivan007, Ixfd64, Izno, JHunterJ, JLaTondre,\nJWSchmidt, Jakuzem, JamesMLane, Jbolden1517, Jengod, Jerryobject, Jesse V. Jidanni, Jitse Niesen, Jleedev, Jmclaury, JoeB34, John of Reading, John.n-irl, JohnBlackburne, JulesH, Julien,\nJulienj, K12u, Kbolino, Kernel Saunters, Kichik, Kickin' Da Speaker, Kim Bruning, King of Hearts (old account 2), KnowledgeOfSelf, Kocio, Kurdo777, Landon1980, Lavers, Lee Daniel\nCrocker, Lekshmann, Leoholbel, Liempt, Limbo socrates, Liorma, LizardJr8, Lockeownzj00, Looc4s, Lord Chamberlain, the Renowned, Loren.wilton, Loshsu, Lotje, Lupin, M5, Mac, Mange01,\nManop, Martyn Lovell, Marudubshinki, Materialscientist, Mattknox, Mav, Mbeychok, Meldraft, Mflore4d, Michael Hardy, Michael Hodgson, Michaelas10, Miguel, Mihai cartoaje, Miketwardos,\nMinghong, Minirogue, Miohtama, MoreThanMike, Morg, Mountain,\n---------------------\nGiven the context information and not prior knowledge, answer the query.\nQuery: What is the last modified date of the document?\nAnswer: "}, {"role": "assistant", "content": "The context information does not provide a last modified date for the document."}]}
{"messages": [{"role": "system", "content": "You are an expert Q&A system that is trusted around the world.\nAlways answer the query using the provided context information, and not prior knowledge.\nSome rules to follow:\n1. Never directly reference the given context in your answer.\n2. Avoid statements like 'Based on the context, ...' or 'The context information ...' or anything along those lines."}, {"role": "user", "content": "Context information is below.\n---------------------\npage_label: 8\nfile_path: test\\regression\\regression_test006\\W120623A.pdf\n\nArticle Sources and Contributors\n8\nArticle Sources and Contributors\nApplication programming interface \u00a0Source: http://en.wikipedia.org/w/index.php?oldid=498937988 \u00a0Contributors: 213.121.101.xxx, 24.108.233.xxx, 24.93.53.xxx, 4483APK, 64.105.112.xxx,\n90, Aa1bb2cc3dd4ee5, AaronL, Aarsalankhalid, AbdulKhaaliq2, Adah, Addshore, Ae-a, Aeons, Aeternus, Ahunt, Ahzahraee, Airplaneman, Alan d, Alex43223, Altaf.attari86, Altenmann,\nAmanuse, Ancheta Wis, Andre Engels, Andremi, Andres, Andrey86, Andy16666, Anteru, Apoltix, Arindra r, Arjayay, Arthur Davies Sikopo, Aruton, Ashamerie, Asydwaters, Atheken, Atreys,\nAude, Auntof6, Avk15gt, Awg1010, Bamyers99, Bdesham, Beano, Bearcat, Betterusername, Bevo, Bhat sudha, Bikingviking, Blackcats, Bobo192, Boing! said Zebedee, Bookiewookie, Borgx,\nBoyprose, Brianski, Bryan Derksen, BryanG, Bryanmonroe, CYD, Calton, CanisRufus, Capricorn42, Chadsmith729, Chameleon, Chealer, Chicago god, Chiefcoolbreeze, Chituokol1,\nClaudiaHetman, CloudNine, Colonoh, Consult.kirthi, Conversion script, Coolbloke94, Courcelles, Cybercobra, Cynical, DShantz, Damian Yerrick, Daniduc, Danja, Darklight, Davejohnsan,\nDavemck, David Gerard, Davron, Dawidl, DeeKay64, Deepugn, Dennislees, Derek farn, Detnos, Diego Moya, Diomidis Spinellis, Dipskinny, Discospinster, Dmarquard, Download, Dqpeck, Dr\nMarcus Hill, Dreadstar, Drewmeyers, Dschach, Dsnelling, Dylan620, EVula, Ebessman, Ed Poor, Edcolins, Edwardkerlin, Efa, Egmontaz, Ehn, Elf, Ellmist, Eloquence, Enochlau, Enric Naval,\nEpbr123, Eric Agbozo, Espoo, Excirial, Farrwill, Fieldday-sunday, Fitch, Frap, Freakimus, Frecklefoot, FrummerThanThou, Funvill, F\u00e6, GRAHAMUK, Gak, GeoffPurchase, Giftlite, Graham87,\nGreensburger, Griznant, HUB, Hadal, Harryboyles, Hashar, HenkeB, Heraclius, Hfastedge, Hmains, Humu, Husond, InShaneee, Infinitycomeo, Itai, Ivan007, Ixfd64, Izno, JHunterJ, JLaTondre,\nJWSchmidt, Jakuzem, JamesMLane, Jbolden1517, Jengod, Jerryobject, Jesse V. Jidanni, Jitse Niesen, Jleedev, Jmclaury, JoeB34, John of Reading, John.n-irl, JohnBlackburne, JulesH, Julien,\nJulienj, K12u, Kbolino, Kernel Saunters, Kichik, Kickin' Da Speaker, Kim Bruning, King of Hearts (old account 2), KnowledgeOfSelf, Kocio, Kurdo777, Landon1980, Lavers, Lee Daniel\nCrocker, Lekshmann, Leoholbel, Liempt, Limbo socrates, Liorma, LizardJr8, Lockeownzj00, Looc4s, Lord Chamberlain, the Renowned, Loren.wilton, Loshsu, Lotje, Lupin, M5, Mac, Mange01,\nManop, Martyn Lovell, Marudubshinki, Materialscientist, Mattknox, Mav, Mbeychok, Meldraft, Mflore4d, Michael Hardy, Michael Hodgson, Michaelas10, Miguel, Mihai cartoaje, Miketwardos,\nMinghong, Minirogue, Miohtama, MoreThanMike, Morg, Mountain,\n\npage_label: 7\nfile_path: test\\regression\\regression_test006\\W120623A.pdf\n\nApplication programming interface\n7\nExternal links\n\u2022What is an API? Your Guide to the Internet (R)evolution (http:/ / www. 3scale. net/ wp-content/ uploads/ 2012/\n06/ What-is-an-API-1. 0. pdf)\n\u2022How to design a good API and why it matters (http:/ / lcsd05. cs. tamu. edu/ slides/ keynote. pdf)\n\u2022How to Write an API (http:/ / www. lior. ca/ publications/ api_design. pdf)\n\u2022LMAX Application Programming Interface (API) technology (http:/ / www. lmax. com/ trading-tech/ api-trading)\n---------------------\nGiven the context information and not prior knowledge, answer the query.\nQuery: What is the source of the article mentioned in the context information?\nAnswer: "}, {"role": "assistant", "content": "The source of the article is http://en.wikipedia.org/w/index.php?oldid=498937988."}]}